"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerIndicatorCardNode = void 0;
var g6_1 = __importDefault(require("@antv/g6"));
var constants_1 = require("../constants");
var utils_1 = require("../utils");
// 通用指标卡
var registerIndicatorCardNode = function () {
    var defaultTitleLabelStyle = {
        fill: '#fff',
        fontSize: 12,
    };
    var defaultTitleRectStyle = {
        fill: '#40a9ff',
        radius: [2, 2, 0, 0],
    };
    var defaultIconStyle = {
        width: 12,
        height: 12,
    };
    g6_1.default.registerNode('indicator-card', {
        // @ts-ignore
        draw: function (cfg, group) {
            if (cfg === void 0) { cfg = {}; }
            var _a = cfg.value, value = _a === void 0 ? {} : _a, nodeCfg = cfg.nodeCfg, markerCfg = cfg.markerCfg;
            var _b = nodeCfg, titleCfg = _b.title, itemsCfg = _b.items, _c = _b.label, label = _c === void 0 ? {} : _c, style = _b.style, _d = _b.padding, padding = _d === void 0 ? 0 : _d, badge = _b.badge, customContent = _b.customContent;
            var appendPadding = utils_1.getStatusBBox(badge);
            var labelStyle = label.style;
            var cardPadding = utils_1.getCssPadding(padding);
            var paddingArray = cardPadding.map(function (item, index) { return item + appendPadding[index]; });
            var _e = titleCfg !== null && titleCfg !== void 0 ? titleCfg : {}, titleStyle = _e.style, titleContainerStyle = _e.containerStyle;
            var _f = itemsCfg !== null && itemsCfg !== void 0 ? itemsCfg : {}, itemStyle = _f.style, itemContainerStyle = _f.containerStyle, layout = _f.layout, _g = _f.itemSpacing, itemSpacing = _g === void 0 ? 4 : _g, sort = _f.sort, _h = _f.padding, itemPadding = _h === void 0 ? [6, 0, 0] : _h;
            var itemPaddingArray = utils_1.getCssPadding(itemPadding);
            var _j = value, title = _j.title, items = _j.items;
            var size = (cfg === null || cfg === void 0 ? void 0 : cfg.size) || [100, 30];
            if (typeof size === 'number')
                size = [size, size];
            var height = 0; // 统计容器总高度，动态设置
            var shapeWidth = size[0];
            var contentWidth = shapeWidth - paddingArray[1] - paddingArray[3];
            // card box
            var cardStyle = utils_1.getStyle(style, cfg, group);
            var shape = group.addShape('rect', {
                attrs: __assign(__assign({ x: 0, y: 0, width: size[0], height: size[1] }, constants_1.defaultCardStyle), cardStyle),
                name: 'main-box',
                draggable: true,
            });
            // node title
            var titleTextShape, itemShape, titleShape;
            if (title) {
                // title rect
                titleShape = group.addShape('rect', {
                    attrs: __assign(__assign({ x: 0, y: 0, width: size[0], height: 0 }, defaultTitleRectStyle), utils_1.getStyle(titleContainerStyle, cfg, group)),
                    name: 'title-rect',
                    draggable: true,
                });
                titleTextShape = group.addShape('text', {
                    attrs: __assign(__assign({ x: paddingArray[3], y: paddingArray[0], textBaseline: 'top', text: title }, defaultTitleLabelStyle), utils_1.getStyle(titleStyle, cfg, group)),
                    name: 'title',
                });
                var titleHeight = (titleTextShape
                    ? titleTextShape.getBBox()
                    : { height: size[1] / 2 }).height;
                titleShape === null || titleShape === void 0 ? void 0 : titleShape.attr('height', titleHeight + paddingArray[0] + paddingArray[2]);
                height += titleShape.getBBox().height;
            }
            if (items) {
                itemShape = group.addShape('rect', {
                    attrs: __assign({ x: paddingArray[3], y: height, width: contentWidth, height: 0 }, utils_1.getStyle(itemContainerStyle, cfg, group)),
                    name: 'item-box',
                });
                height += itemPaddingArray[0];
                var itemContentWidth_1 = contentWidth - itemPaddingArray[1] - itemPaddingArray[3];
                var isArray_1 = Array.isArray(items);
                var createRowItems_1 = function (item, contentWidth, startX, index) {
                    if (index === void 0) { index = 0; }
                    var rowHeight = [];
                    var valueShapeWidth = 0;
                    var keys = sort ? Object.keys(item) : ['text', 'value', 'icon'];
                    keys.forEach(function (key, keyIndex) {
                        var x;
                        var isIcon = key.startsWith('icon');
                        // sort 直接均分，简单化
                        if (sort || layout === 'flex') {
                            x = (keyIndex * contentWidth) / keys.length;
                        }
                        else if (layout === 'follow') {
                            x = valueShapeWidth;
                        }
                        else {
                            // layout === 'bundled'
                            // 直接均分，icon 紧随 value
                            x = key === 'text' ? 0 : contentWidth / 2;
                            x += isIcon ? valueShapeWidth : 0;
                        }
                        var keyShape = group.addShape(isIcon ? 'image' : 'text', {
                            attrs: __assign(__assign({ textBaseline: 'top', x: startX + x, y: height, text: item[key], img: item[key] }, (isIcon ? defaultIconStyle : constants_1.defaultLabelStyle)), utils_1.getStyle(itemStyle || labelStyle, cfg, group, key)),
                            name: key + "-" + index + "-" + keyIndex,
                        });
                        if (key === 'value' || layout === 'follow') {
                            valueShapeWidth += keyShape.getBBox().width;
                            valueShapeWidth += layout === 'follow' ? itemSpacing : 0;
                        }
                        rowHeight.push(keyShape.getBBox().height);
                    });
                    return rowHeight;
                };
                var createItems_1 = function (item, index) {
                    var _a;
                    if (index === void 0) { index = 0; }
                    var itemsHeight = [];
                    if (customContent) {
                        itemsHeight.push((_a = customContent(item, group, {
                            startX: paddingArray[3] + itemPaddingArray[3],
                            startY: height,
                            width: itemContentWidth_1,
                        })) !== null && _a !== void 0 ? _a : 0);
                    }
                    else {
                        itemsHeight.push.apply(itemsHeight, createRowItems_1(item, itemContentWidth_1, paddingArray[3] + itemPaddingArray[3], index));
                    }
                    height += Math.max.apply(Math, itemsHeight);
                    if (isArray_1 && index !== items.length - 1) {
                        height += constants_1.defaultMargin;
                    }
                };
                if (Array.isArray(items)) {
                    items.forEach(function (item, index) {
                        createItems_1(item, index);
                    });
                }
                else {
                    createItems_1(items);
                }
            }
            itemShape === null || itemShape === void 0 ? void 0 : itemShape.attr('height', Math.max(height - (titleShape === null || titleShape === void 0 ? void 0 : titleShape.getBBox().height) + itemPaddingArray[2], size[1]));
            var shapeHeight = items
                ? (titleShape === null || titleShape === void 0 ? void 0 : titleShape.getBBox().height) + (itemShape === null || itemShape === void 0 ? void 0 : itemShape.getBBox().height) + paddingArray[2]
                : (titleShape === null || titleShape === void 0 ? void 0 : titleShape.getBBox().height) + (itemShape === null || itemShape === void 0 ? void 0 : itemShape.getBBox().height);
            shape === null || shape === void 0 ? void 0 : shape.attr('height', shapeHeight);
            if (badge) {
                var statusConfig = utils_1.getStatusCfg(badge, [size[0], shapeHeight]);
                group.addShape('rect', {
                    attrs: __assign(__assign({ fill: '#40a9ff' }, statusConfig), utils_1.getStyle(badge.style, cfg, group)),
                    name: 'status-rect',
                });
            }
            // collapse marker
            if (markerCfg) {
                var _k = shape.getBBox(), shapeWidth_1 = _k.width, shapeHeight_1 = _k.height;
                var _l = typeof markerCfg === 'function' ? markerCfg(cfg, group) : markerCfg, show = _l.show, _m = _l.position, position = _m === void 0 ? 'right' : _m, collapsed = _l.collapsed, markerStyle = _l.style;
                utils_1.createMarker({
                    show: show,
                    position: position,
                    collapsed: collapsed,
                    style: markerStyle,
                }, group, [shapeWidth_1, shapeHeight_1]);
                shape.attr('defaultCollapsed', collapsed);
            }
            return shape;
        },
        /**
         * 更新节点，包含文本
         * @override
         * @param  {Object} cfg 节点的配置项
         * @param  {Node} node 节点
         */
        update: function (cfg, node) {
            var group = node.getContainer();
            var markerShape = group
                .get('children')
                .find(function (item) { return item.get('type') === 'marker'; });
            var collapsed = node.getModel().collapsed;
            markerShape === null || markerShape === void 0 ? void 0 : markerShape.attr({
                symbol: collapsed ? g6_1.default.Marker.expand : g6_1.default.Marker.collapse,
            });
        },
    }, 'single-node');
};
exports.registerIndicatorCardNode = registerIndicatorCardNode;
