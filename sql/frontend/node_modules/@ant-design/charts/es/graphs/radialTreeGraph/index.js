var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useEffect } from 'react';
import G6 from '@antv/g6';
import { ErrorBoundary } from '../../base';
import useGraph from '../../hooks/useGraph';
import useProps from '../../hooks/useProps';
import ChartLoading from '../../util/createLoading';
import { getGraphSize, getGraphId } from '../utils';
import { processMinimap, renderGraph, getCommonConfig, getArrowCfg, bindStateEvents, } from '../utils';
import { defaultFlowGraphAnchorPoints, defaultStateStyles, defaultNodeStyle } from '../constants';
var graphs = {};
var defaultLayout = {
    type: 'dendrogram',
    direction: 'LR',
    nodeSep: 20,
    rankSep: 100,
    radial: true,
};
var defaultProps = {
    nodeCfg: {
        type: 'circle',
        size: 30,
        anchorPoints: defaultFlowGraphAnchorPoints,
        linkCenter: true,
        nodeStateStyles: defaultStateStyles,
        style: defaultNodeStyle,
    },
    edgeCfg: {
        type: 'line',
        edgeStateStyles: defaultStateStyles,
    },
    behaviors: ['zoom-canvas', 'drag-canvas'],
    layout: defaultLayout,
    animate: true,
    markerPosition: 'right',
    autoFit: true,
    style: {
        height: 'inherit',
    },
};
var RadialTreeGraph = function (props) {
    var uProps = useProps(props, defaultProps).uProps;
    var data = uProps.data, className = uProps.className, style = uProps.style, width = uProps.width, height = uProps.height, behaviors = uProps.behaviors, layout = uProps.layout, animate = uProps.animate, nodeCfg = uProps.nodeCfg, edgeCfg = uProps.edgeCfg, autoFit = uProps.autoFit, minimapCfg = uProps.minimapCfg, onReady = uProps.onReady, loading = uProps.loading, loadingTemplate = uProps.loadingTemplate, errorTemplate = uProps.errorTemplate;
    var _a = nodeCfg !== null && nodeCfg !== void 0 ? nodeCfg : {}, nodeType = _a.type, nodeSize = _a.size, nodeAnchorPoints = _a.anchorPoints, nodeStateStyles = _a.nodeStateStyles, linkCenter = _a.linkCenter, nodeStyle = _a.style, nodeLabelCfg = _a.label;
    var _b = edgeCfg !== null && edgeCfg !== void 0 ? edgeCfg : {}, edgeType = _b.type, edgeStyle = _b.style, startArrowCfg = _b.startArrow, endArrowCfg = _b.endArrow, edgeLabelCfg = _b.label, edgeStateStyles = _b.edgeStateStyles;
    var container = React.useRef(null);
    var graph = React.useRef(null);
    var graphId = getGraphId(graph);
    useGraph(graphs[graphId], uProps, container);
    useEffect(function () {
        var graphSize = getGraphSize(width, height, container);
        var graph = graphs[graphId];
        if (!graph) {
            graph = new G6.TreeGraph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                animate: animate,
                linkCenter: linkCenter,
                modes: {
                    default: behaviors,
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    anchorPoints: nodeAnchorPoints,
                },
                defaultEdge: {
                    type: edgeType,
                },
                nodeStateStyles: nodeStateStyles,
                edgeStateStyles: edgeStateStyles,
                layout: layout,
            });
            graphs[graphId] = graph;
        }
        graph.node(function (node) {
            var style = (nodeLabelCfg !== null && nodeLabelCfg !== void 0 ? nodeLabelCfg : {}).style;
            return {
                label: node.value,
                labelCfg: {
                    style: getCommonConfig(style, node, graph),
                },
                style: __assign({ stroke: '#ccc' }, (typeof nodeStyle === 'function' ? nodeStyle(node, graph) : nodeStyle)),
            };
        });
        graph.edge(function (edge) {
            var startArrow = getArrowCfg(startArrowCfg, edge);
            var endArrow = getArrowCfg(endArrowCfg, edge);
            var _a = edgeLabelCfg !== null && edgeLabelCfg !== void 0 ? edgeLabelCfg : {}, style = _a.style, content = _a.content;
            return {
                label: getCommonConfig(content, edge, graph),
                labelCfg: {
                    style: getCommonConfig(style, edge, graph),
                },
                style: __assign({ stroke: '#ccc', startArrow: startArrow, endArrow: endArrow }, (typeof edgeStyle === 'function' ? edgeStyle(edge, graph) : edgeStyle)),
            };
        });
        processMinimap(minimapCfg, graph);
        bindStateEvents(graph, uProps);
        renderGraph(graph, data, autoFit);
        if (onReady) {
            onReady(graph);
        }
        return function () {
            if (graphs[graphId]) {
                graphs[graphId].destroy();
                delete graphs[graphId];
            }
        };
    }, []);
    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },
        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),
        React.createElement("div", { className: className, style: style, ref: container })));
};
export default RadialTreeGraph;
