var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import G6 from '@antv/g6';
import { isNumber } from '@antv/util';
import { deepClone, isType } from '../util/utils';
import { defaultMinimapCfg, defaultNodeSize, defaultCardStyle } from './constants';
export var getGraphSize = function (width, height, container) {
    var CANVAS_WIDTH;
    var CANVAS_HEIGHT;
    if (container && container.current) {
        CANVAS_WIDTH = container.current.offsetWidth;
        CANVAS_HEIGHT = container.current.offsetHeight || 500;
    }
    if ((!width && !CANVAS_WIDTH) || (!height && !CANVAS_HEIGHT)) {
        console.warn('请为 Graph 指定 width 与 height！否则将使用默认值 500 * 500');
        return [500, 500];
    }
    return [width || CANVAS_WIDTH || 500, height || CANVAS_HEIGHT || 500];
};
var EventData = /** @class */ (function () {
    function EventData(data) {
        data && this.setData(data);
    }
    EventData.prototype.getData = function () {
        return this.data;
    };
    EventData.prototype.setData = function (data) {
        this.data = data;
    };
    return EventData;
}());
// 展开&折叠事件
export var bindDefaultEvents = function (graph) {
    var onClick = function (e) {
        var item = e.item;
        if (e.target.get('name') === 'collapse-icon') {
            graph.updateItem(item, {
                collapsed: !item.getModel().collapsed,
            });
            graph.layout();
        }
    };
    graph.on('node:click', function (e) {
        onClick(e);
    });
    graph.on('node:touchstart', function (e) {
        onClick(e);
    });
};
export var renderGraph = function (graph, data) {
    var originData = deepClone(data);
    graph.data(originData);
    graph.set('eventData', new EventData(data));
    graph.render();
    // 关闭局部刷新，各种 bug
    graph.get('canvas').set('localRefresh', false);
};
export var processMinimap = function (cfg, graph) {
    if (cfg === void 0) { cfg = {}; }
    if (!graph || graph.destroyed)
        return;
    if (cfg.show) {
        var curMminimapCfg = Object.assign(defaultMinimapCfg, cfg);
        var minimap = new G6.Minimap(__assign({}, curMminimapCfg));
        graph.addPlugin(minimap);
        return minimap;
    }
    return null;
};
var getUuid = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};
// 同一页面存在多 graph 时需要指定 graphId
export var getGraphId = function (graph) {
    if (graph.current) {
        return graph.current;
    }
    graph.current = "Graph-" + getUuid();
    return graph.current;
};
export var getMarkerPosition = function (direction, size) {
    if (direction === void 0) { direction = 'right'; }
    var width = size[0], height = size[1];
    var x = 0;
    var y = 0;
    switch (direction) {
        case 'top':
            x = width / 2;
            y = 0;
            break;
        case 'right':
            x = width;
            y = height / 2;
            break;
        case 'bottom':
            x = width / 2;
            y = height;
            break;
        case 'left':
            x = 0;
            y = height / 2;
            break;
    }
    return { x: x, y: y };
};
export var bindSourceMapCollapseEvents = function (graph) {
    var onClick = function (e) {
        var _a;
        var controlData = graph.get('eventData').getData();
        if (e.target.get('name') === 'collapse-icon') {
            var item = e.item;
            var collapsed = item.getModel().collapsed;
            if (!isType(collapsed, 'Boolean')) {
                // @ts-ignore
                collapsed = (_a = item._cfg.group
                    .getChildren()
                    .find(function (item) { return item.get('name') === 'main-box'; })) === null || _a === void 0 ? void 0 : _a.attr('defaultCollapsed');
            }
            // @ts-ignore
            var marker = e.item._cfg.group.getChildren().find(function (item) { return item.cfg.type === 'marker'; });
            var _b = (controlData !== null && controlData !== void 0 ? controlData : {}).edges, fullEdges_1 = _b === void 0 ? [] : _b;
            var nodeId = item.getModel().id;
            var targetNodeIds_1 = [];
            var updateItems_1 = [];
            var updateIds_1 = [];
            var getLinkedId_1 = function (currentId) {
                fullEdges_1.forEach(function (edge) {
                    var source = edge.source, target = edge.target;
                    if (source === currentId) {
                        targetNodeIds_1.push(target);
                        getLinkedId_1(target);
                    }
                });
            };
            getLinkedId_1(nodeId);
            if (!collapsed) {
                // collapse
                graph
                    .findAll('node', function (node) { return targetNodeIds_1.includes(node.get('id')); })
                    .forEach(function (node) { return graph.hideItem(node); });
                controlData.nodes.forEach(function (node) {
                    var _a = node.collapsedLevel, collapsedLevel = _a === void 0 ? 0 : _a, id = node.id;
                    if (targetNodeIds_1.includes(id)) {
                        node.collapsedLevel = collapsedLevel + 1;
                    }
                });
            }
            else {
                // expand
                graph
                    .findAll('node', function (node) {
                    var collapsedLevel = controlData.nodes.find(function (item) { return item.id === node.get('id'); }).collapsedLevel;
                    return (targetNodeIds_1.includes(node.get('id')) && (!collapsedLevel || collapsedLevel < 2));
                })
                    .forEach(function (node) { return graph.showItem(node); });
                controlData.nodes.forEach(function (node) {
                    var _a = node.collapsedLevel, collapsedLevel = _a === void 0 ? 0 : _a, id = node.id;
                    if (targetNodeIds_1.includes(id)) {
                        node.collapsedLevel = collapsedLevel - 1;
                    }
                });
            }
            fullEdges_1.forEach(function (edge) {
                var source = edge.source, target = edge.target;
                if (targetNodeIds_1.includes(target)) {
                    updateIds_1.push(source);
                }
            });
            updateIds_1 = Array.from(new Set(updateIds_1));
            updateIds_1.forEach(function (id) {
                updateItems_1.push(graph.find('node', function (node) { return node.get('id') === id; }));
            });
            updateItems_1.forEach(function (nodeItem) {
                graph.updateItem(nodeItem, {
                    collapsed: !nodeItem.getModel().collapsed,
                });
                graph.refreshItem(nodeItem);
            });
        }
    };
    graph.on('node:click', function (e) {
        onClick(e);
    });
    graph.on('node:touchstart', function (e) {
        onClick(e);
    });
};
/**
 * padding | margin 按 CSS 规则转换
 */
export var getCssPadding = function (padding) {
    if (typeof padding === 'number') {
        return [padding, padding, padding, padding];
    }
    var result = [];
    switch (padding.length) {
        case 1:
            result = [padding[0], padding[0], padding[0], padding[0]];
            break;
        case 2:
            result = [padding[0], padding[1], padding[0], padding[1]];
            break;
        case 3:
            result = [padding[0], padding[1], padding[2], padding[1]];
            break;
        case 4:
            result = padding;
            break;
        default:
            break;
    }
    return result;
};
// 默认箭头样式
export var getArrowCfg = function (arrowCfg, edge) {
    if (!arrowCfg) {
        return;
    }
    if (typeof arrowCfg === 'object' && (arrowCfg === null || arrowCfg === void 0 ? void 0 : arrowCfg.show) === false) {
        return;
    }
    var cfg = typeof arrowCfg === 'function' ? arrowCfg(edge) : arrowCfg;
    var _a = cfg.type, type = _a === void 0 ? 'vee' : _a, _b = cfg.d, d = _b === void 0 ? 0 : _b, _c = cfg.size, size = _c === void 0 ? 10 : _c;
    return __assign({ path: G6.Arrow[type](size, size, d), fill: '#ccc', d: d }, cfg);
};
// 交互
export var bindStateEvents = function (graph, cfg) {
    var _a = cfg !== null && cfg !== void 0 ? cfg : {}, _b = _a.nodeCfg, nodeCfg = _b === void 0 ? {} : _b, _c = _a.edgeCfg, edgeCfg = _c === void 0 ? {} : _c;
    var nodeStateStyles = nodeCfg.nodeStateStyles;
    var edgeStateStyles = edgeCfg.edgeStateStyles;
    /**
     * 存储交互状态
     * id: [[endActive, endDefalut], [startActive, startDefalut]]
     */
    var statusCache = {};
    var updateArrowFill = function (item, endArrowFill, stratArrowFill) {
        graph.updateItem(item, {
            style: {
                endArrow: !!endArrowFill && {
                    fill: endArrowFill,
                },
                startArrow: !!stratArrowFill && {
                    fill: stratArrowFill,
                },
            },
        });
    };
    var setState = function (item, name, status) {
        var _a, _b, _c;
        status ? item.toFront() : item.toBack();
        var _d = (_a = item.getModel().style) !== null && _a !== void 0 ? _a : {}, endArrow = _d.endArrow, startArrow = _d.startArrow;
        if (endArrow || startArrow) {
            if (!statusCache[item.getID()]) {
                //@ts-ignore
                var endArrowFill = (endArrow !== null && endArrow !== void 0 ? endArrow : {}).fill;
                //@ts-ignore
                var startArrowFill = (startArrow !== null && startArrow !== void 0 ? startArrow : {}).fill;
                var hoverStatus = (_c = (_b = item.getModel().style) === null || _b === void 0 ? void 0 : _b[name]) === null || _c === void 0 ? void 0 : _c.stroke;
                statusCache[item.getID()] = [
                    [hoverStatus !== null && hoverStatus !== void 0 ? hoverStatus : endArrowFill, endArrowFill],
                    [hoverStatus !== null && hoverStatus !== void 0 ? hoverStatus : startArrowFill, startArrowFill],
                ];
            }
            var fill = statusCache[item.getID()];
            updateArrowFill(item, endArrow && fill[0][status ? 0 : 1], startArrow && fill[1][status ? 0 : 1]);
        }
        graph.setItemState(item, name, status);
    };
    var getRelationItems = function (currentItem, name, status, type) {
        var relationItems = type === 'node'
            ? graph.findAll('edge', function (edge) { return edge.getSource() === currentItem || edge.getTarget() === currentItem; })
            : graph.findAll('node', function (node) {
                return currentItem.getSource().get('id') === node.get('id') ||
                    currentItem.getTarget().get('id') === node.get('id');
            });
        var highlightItems = [currentItem].concat(relationItems);
        highlightItems.forEach(function (item) {
            setState(item, name, status);
        });
    };
    if (nodeStateStyles) {
        graph.on('node:mouseenter', function (evt) {
            var item = evt.item;
            getRelationItems(item, 'hover', true, 'node');
        });
        graph.on('node:mouseleave', function (evt) {
            var item = evt.item;
            getRelationItems(item, 'hover', false, 'node');
        });
    }
    if (edgeStateStyles) {
        graph.on('edge:mouseenter', function (evt) {
            var item = evt.item;
            getRelationItems(item, 'hover', true, 'edge');
        });
        graph.on('edge:mouseleave', function (evt) {
            var item = evt.item;
            getRelationItems(item, 'hover', false, 'edge');
        });
    }
};
// 统一处理 config，支持回调
export var getStyle = function (source, cfg, item, current) {
    if (typeof source === 'function') {
        return source(cfg, item, current);
    }
    return source || {};
};
// 统一处理 config，支持回调
export var getCommonConfig = function (cfg, item, graph) {
    if (typeof cfg === 'function') {
        return cfg(item, graph);
    }
    return cfg;
};
export var getSize = function (size) {
    if (Array.isArray(size)) {
        return size;
    }
    return size ? [size, size] : defaultNodeSize;
};
// status bar 的默认宽度
var DefaultStatusBarWidth = 4;
/**
 * card status 对布局的影响，直接加到 padding 中
 */
export var getStatusBBox = function (cfg) {
    if (!cfg) {
        return [0, 0, 0, 0];
    }
    var _a = cfg.size, size = _a === void 0 ? [] : _a, _b = cfg.position, position = _b === void 0 ? 'left' : _b;
    var _c = getSize(size), width = _c[0], height = _c[1];
    var appendPadding = [];
    switch (position) {
        case 'top':
            appendPadding.push(height !== null && height !== void 0 ? height : DefaultStatusBarWidth, 0, 0, 0);
            break;
        case 'right':
            appendPadding.push(0, width !== null && width !== void 0 ? width : DefaultStatusBarWidth, 0, 0);
            break;
        case 'bottom':
            appendPadding.push(0, 0, height !== null && height !== void 0 ? height : DefaultStatusBarWidth, 0);
            break;
        case 'left':
            appendPadding.push(0, 0, 0, width !== null && width !== void 0 ? width : DefaultStatusBarWidth);
            break;
    }
    return appendPadding;
};
export var getStatusCfg = function (cfg, cardSize) {
    var _a = cfg !== null && cfg !== void 0 ? cfg : {}, _b = _a.size, size = _b === void 0 ? [] : _b, _c = _a.position, position = _c === void 0 ? 'left' : _c;
    var _d = getSize(size), width = _d[0], height = _d[1];
    var cardWidth = cardSize[0], cardHeight = cardSize[1];
    var x = 0;
    var y = 0;
    var w = 0;
    var h = 0;
    switch (position) {
        case 'top':
            x = 0;
            y = 0;
            w = width !== null && width !== void 0 ? width : cardWidth;
            h = height !== null && height !== void 0 ? height : DefaultStatusBarWidth;
            break;
        case 'left':
            x = 0;
            y = 0;
            w = width !== null && width !== void 0 ? width : DefaultStatusBarWidth;
            h = height !== null && height !== void 0 ? height : cardHeight;
            break;
        case 'right':
            x = cardWidth - (isNumber(width) ? width : DefaultStatusBarWidth);
            y = 0;
            w = width !== null && width !== void 0 ? width : DefaultStatusBarWidth;
            h = height !== null && height !== void 0 ? height : cardHeight;
            break;
        case 'bottom':
            x = 0;
            y = cardHeight - (isNumber(height) ? height : DefaultStatusBarWidth);
            w = width !== null && width !== void 0 ? width : cardWidth;
            h = height !== null && height !== void 0 ? height : DefaultStatusBarWidth;
            break;
    }
    return {
        x: x,
        y: y,
        width: w,
        height: h,
    };
};
export var createMarker = function (cfg, group, size) {
    var show = cfg.show, position = cfg.position, collapsed = cfg.collapsed, style = cfg.style;
    if (show) {
        group.addShape('marker', {
            attrs: __assign(__assign(__assign({}, getMarkerPosition(position, size)), { r: 6, cursor: 'pointer', symbol: collapsed ? G6.Marker.expand : G6.Marker.collapse, stroke: defaultCardStyle.stroke, lineWidth: 1, fill: '#fff' }), style),
            defaultCollapsed: false,
            name: 'collapse-icon',
        });
    }
};
