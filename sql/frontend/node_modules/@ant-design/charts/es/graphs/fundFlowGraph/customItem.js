var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import G6 from '@antv/g6';
import { defaultMargin, defaultLabelStyle } from '../constants';
import { getStyle, getCssPadding, getSize, getArrowCfg, createMarker } from '../utils';
// 资金流向图
export var registerFundFlowItems = function () {
    // 注册节点
    G6.registerNode('fund-card', {
        // @ts-ignore
        draw: function (cfg, group) {
            if (cfg === void 0) { cfg = {}; }
            var _a = cfg.value, value = _a === void 0 ? {} : _a, nodeCfg = cfg.nodeCfg, markerCfg = cfg.markerCfg;
            var _b = nodeCfg, _c = _b.label, label = _c === void 0 ? {} : _c, style = _b.style, _d = _b.padding, padding = _d === void 0 ? 0 : _d, customContent = _b.customContent;
            var labelStyle = label.style;
            var paddingArray = getCssPadding(padding);
            var size = getSize(cfg.size);
            var height = 0; // 统计容器总高度，动态设置
            var shapeWidth = size[0];
            var contentWidth = shapeWidth - paddingArray[1] - paddingArray[3];
            var contentHeight = size[1] - paddingArray[0] - paddingArray[2];
            // card box
            var cardStyle = getStyle(style, cfg, group);
            var shape = group.addShape('rect', {
                attrs: __assign({ x: 0, y: 0, width: size[0], height: size[1], radius: size[1] / 2, fill: '#fff', stroke: '#40a9ff' }, cardStyle),
                name: 'main-box',
                draggable: true,
            });
            if (value) {
                height += paddingArray[0];
                var createRowItems_1 = function (item, contentWidth, startX) {
                    var _a, _b;
                    var text = item.text, icon = item.icon;
                    var textShape, iconShape;
                    if (icon) {
                        iconShape = group.addShape('image', {
                            attrs: __assign({ x: startX, y: height, img: icon, width: contentHeight, height: contentHeight }, getStyle(labelStyle, cfg, group, 'icon')),
                            name: 'fund-icon',
                        });
                    }
                    textShape = group === null || group === void 0 ? void 0 : group.addShape('text', {
                        attrs: __assign(__assign({ textBaseline: 'middle', textAlign: iconShape ? 'start' : 'center', x: startX +
                                (iconShape ? (iconShape === null || iconShape === void 0 ? void 0 : iconShape.getBBox().width) + defaultMargin : contentWidth / 2), y: paddingArray[0] + contentHeight / 2, text: text }, defaultLabelStyle), getStyle(labelStyle, cfg, group, 'text')),
                        name: "fund-text",
                    });
                    return [(_a = textShape === null || textShape === void 0 ? void 0 : textShape.getBBox().height) !== null && _a !== void 0 ? _a : 0, (_b = iconShape === null || iconShape === void 0 ? void 0 : iconShape.getBBox().height) !== null && _b !== void 0 ? _b : 0];
                };
                var createItems = function (item) {
                    var _a;
                    var itemsHeight = [];
                    if (customContent) {
                        itemsHeight.push((_a = customContent(item, group, {
                            startX: paddingArray[3],
                            startY: height,
                            width: contentWidth,
                        })) !== null && _a !== void 0 ? _a : 0);
                    }
                    else {
                        itemsHeight.push.apply(itemsHeight, createRowItems_1(item, contentWidth, paddingArray[3]));
                    }
                    height += Math.max.apply(Math, itemsHeight);
                };
                createItems(value);
            }
            shape === null || shape === void 0 ? void 0 : shape.attr('height', Math.max(size[1], height + paddingArray[2]));
            // collapse marker
            if (markerCfg) {
                var _e = shape.getBBox(), shapeWidth_1 = _e.width, shapeHeight = _e.height;
                var _f = typeof markerCfg === 'function' ? markerCfg(cfg, group) : markerCfg, show = _f.show, _g = _f.position, position = _g === void 0 ? 'right' : _g, collapsed = _f.collapsed, markerStyle = _f.style;
                createMarker({
                    show: show,
                    position: position,
                    collapsed: collapsed,
                    style: markerStyle,
                }, group, [shapeWidth_1, shapeHeight]);
                shape.attr('defaultCollapsed', collapsed);
            }
            return shape;
        },
        /**
         * 更新节点，包含文本
         * @override
         * @param  {Object} cfg 节点的配置项
         * @param  {Node} node 节点
         */
        update: function (cfg, node) {
            var group = node.getContainer();
            var markerShape = group
                .get('children')
                .find(function (item) { return item.get('type') === 'marker'; });
            var collapsed = node.getModel().collapsed;
            markerShape === null || markerShape === void 0 ? void 0 : markerShape.attr({
                symbol: collapsed ? G6.Marker.expand : G6.Marker.collapse,
            });
        },
    }, 'single-node');
    // 注册边
    G6.registerEdge('fund-polyline', {
        // @ts-ignore
        draw: function draw(cfg, group) {
            if (cfg === void 0) { cfg = {}; }
            var edgeCfg = cfg.edgeCfg, value = cfg.value;
            var text;
            var subText;
            if (value instanceof Object) {
                text = value.text;
                subText = value.subText;
            }
            else {
                text = value;
            }
            var startPoint = cfg.startPoint;
            var endPoint = cfg.endPoint;
            var startX = startPoint.x, startY = startPoint.y;
            var endX = endPoint.x, endY = endPoint.y;
            var Ydiff = endY - startY;
            var slope = Ydiff !== 0 ? Math.min(500 / Math.abs(Ydiff), 20) : 0;
            var cpOffset = slope > 15 ? 0 : 16;
            var offset = Ydiff < 0 ? cpOffset : -cpOffset;
            var line1EndPoint = {
                x: startX + slope,
                y: endY + offset,
            };
            var line2StartPoint = {
                x: line1EndPoint.x + cpOffset,
                y: endY,
            };
            // 控制点坐标
            var controlPoint = {
                x: ((line1EndPoint.x - startX) * (endY - startY)) / (line1EndPoint.y - startY) + startX,
                y: endY,
            };
            var path = [
                ['M', startX, startY],
                ['L', line1EndPoint.x, line1EndPoint.y],
                ['Q', controlPoint.x, controlPoint.y, line2StartPoint.x, line2StartPoint.y],
                ['L', endX, endY],
            ];
            if (Math.abs(Ydiff) <= 5) {
                path = [
                    ['M', startX, startY],
                    ['L', endX, endY],
                ];
            }
            var _a = edgeCfg, edgeStyle = _a.style, startArrowCfg = _a.startArrow, endArrowCfg = _a.endArrow, labelCfg = _a.label;
            var startArrow = getArrowCfg(startArrowCfg, cfg);
            var endArrow = getArrowCfg(endArrowCfg, cfg);
            var labelStyle = (labelCfg !== null && labelCfg !== void 0 ? labelCfg : {}).style;
            var line = group.addShape('path', {
                attrs: __assign({ path: path, stroke: '#ccc', startArrow: startArrow, endArrow: endArrow }, (typeof edgeStyle === 'function' ? edgeStyle(cfg, group) : edgeStyle)),
                name: 'path-shape',
            });
            var createItem = function (itemText, key) {
                group.addShape('text', {
                    attrs: __assign(__assign({ text: itemText, x: line2StartPoint.x, y: key === 'text' ? endY - 4 : endY + 16 }, defaultLabelStyle), getStyle(labelStyle, cfg, group, key)),
                    name: "line-text-" + key,
                });
            };
            text && createItem(text, 'text');
            subText && createItem(subText, 'subText');
            return line;
        },
        update: undefined,
    }, 'single-edge');
};
