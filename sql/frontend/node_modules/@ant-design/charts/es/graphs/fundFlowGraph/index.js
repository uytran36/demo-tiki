var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useEffect } from 'react';
import G6 from '@antv/g6';
import { ErrorBoundary } from '../../base';
import useGraph from '../../hooks/useGraph';
import useProps from '../../hooks/useProps';
import ChartLoading from '../../util/createLoading';
import { getGraphSize, getGraphId, bindSourceMapCollapseEvents, processMinimap, renderGraph, getCommonConfig, getArrowCfg, bindStateEvents, } from '../utils';
import { defaultFlowGraphAnchorPoints, defaultNodeSize, defaultStateStyles, defaultNodeStyle, } from '../constants';
import { registerFundFlowItems } from './customItem';
var graphs = {};
registerFundFlowItems();
var defaultLayout = {
    type: 'dagre',
    rankdir: 'LR',
    nodesep: 30,
    ranksep: 50,
};
var defaultProps = {
    nodeCfg: {
        type: 'fund-card',
        size: defaultNodeSize,
        style: defaultNodeStyle,
        anchorPoints: defaultFlowGraphAnchorPoints,
        nodeStateStyles: defaultStateStyles,
        padding: 6,
    },
    edgeCfg: {
        type: 'fund-polyline',
        edgeStateStyles: defaultStateStyles,
        style: {
            stroke: '#40a9ff',
        },
        endArrow: {
            fill: '#40a9ff',
        },
    },
    behaviors: ['zoom-canvas', 'drag-canvas'],
    layout: defaultLayout,
    animate: true,
    autoFit: true,
    fitCenter: true,
    style: {
        height: 'inherit',
    },
};
var getEdgeStateStyles = function (edgeStateStyles) {
    if (!edgeStateStyles) {
        return;
    }
    var _a = edgeStateStyles.hover, hover = _a === void 0 ? {} : _a;
    var endArrow = hover.endArrow, startArrow = hover.startArrow;
    if (!endArrow && !startArrow) {
        return edgeStateStyles;
    }
    return {
        hover: __assign(__assign({}, hover), { endArrow: endArrow ? getArrowCfg(endArrow) : false, startArrow: startArrow ? getArrowCfg(startArrow) : false }),
    };
};
var FundFlowGraph = function (props) {
    var uProps = useProps(props, defaultProps).uProps;
    var data = uProps.data, className = uProps.className, style = uProps.style, width = uProps.width, height = uProps.height, nodeCfg = uProps.nodeCfg, edgeCfg = uProps.edgeCfg, behaviors = uProps.behaviors, layout = uProps.layout, animate = uProps.animate, minimapCfg = uProps.minimapCfg, autoFit = uProps.autoFit, fitCenter = uProps.fitCenter, markerCfg = uProps.markerCfg, onReady = uProps.onReady, loading = uProps.loading, loadingTemplate = uProps.loadingTemplate, errorTemplate = uProps.errorTemplate;
    var _a = nodeCfg !== null && nodeCfg !== void 0 ? nodeCfg : {}, nodeType = _a.type, nodeSize = _a.size, nodeAnchorPoints = _a.anchorPoints, nodeStateStyles = _a.nodeStateStyles, nodeStyle = _a.style, nodeLabelCfg = _a.label;
    var _b = edgeCfg !== null && edgeCfg !== void 0 ? edgeCfg : {}, edgeType = _b.type, edgeStyle = _b.style, startArrowCfg = _b.startArrow, endArrowCfg = _b.endArrow, labelCfg = _b.label, edgeStateStyles = _b.edgeStateStyles;
    var container = React.useRef(null);
    var graph = React.useRef(null);
    var graphId = getGraphId(graph);
    useGraph(graphs[graphId], uProps, container);
    useEffect(function () {
        var graphSize = getGraphSize(width, height, container);
        var graph = graphs[graphId];
        if (!graph) {
            graph = new G6.Graph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                animate: animate,
                modes: {
                    default: behaviors,
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    anchorPoints: nodeAnchorPoints,
                    nodeCfg: nodeCfg,
                },
                defaultEdge: {
                    type: edgeType,
                    edgeCfg: edgeCfg,
                },
                nodeStateStyles: nodeStateStyles,
                edgeStateStyles: getEdgeStateStyles(edgeStateStyles),
                layout: layout,
                fitView: autoFit,
                fitCenter: fitCenter,
            });
            graphs[graphId] = graph;
        }
        // defaultNode 默认只能绑定 plainObject，针对 Function 类型需要通过该模式绑定
        graph.node(function (node) {
            var _a;
            if (node.type === 'fund-card') {
                node.markerCfg = markerCfg;
                return {};
            }
            var style = (nodeLabelCfg !== null && nodeLabelCfg !== void 0 ? nodeLabelCfg : {}).style;
            return {
                label: (_a = node.value) === null || _a === void 0 ? void 0 : _a.text,
                labelCfg: {
                    style: getCommonConfig(style, node, graph),
                },
                style: __assign({ stroke: '#ccc' }, (typeof nodeStyle === 'function' ? nodeStyle(node, graph) : nodeStyle)),
            };
        });
        if (edgeType !== 'fund-polyline') {
            graph.edge(function (edge) {
                var startArrow = getArrowCfg(startArrowCfg, edge);
                var endArrow = getArrowCfg(endArrowCfg, edge);
                var style = (labelCfg !== null && labelCfg !== void 0 ? labelCfg : {}).style;
                var value = edge.value;
                return {
                    label: typeof value === 'object' ? value === null || value === void 0 ? void 0 : value.text : value,
                    labelCfg: {
                        style: getCommonConfig(style, edge, graph),
                    },
                    style: __assign({ stroke: '#ccc', startArrow: startArrow, endArrow: endArrow }, (typeof edgeStyle === 'function' ? edgeStyle(edge, graph) : edgeStyle)),
                };
            });
        }
        processMinimap(minimapCfg, graph);
        bindStateEvents(graph, uProps);
        if (markerCfg) {
            bindSourceMapCollapseEvents(graph);
        }
        renderGraph(graph, data);
        if (onReady) {
            onReady(graph);
        }
        return function () {
            if (graphs[graphId]) {
                graphs[graphId].destroy();
                delete graphs[graphId];
            }
        };
    }, []);
    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },
        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate }),
        React.createElement("div", { className: className, style: style, ref: container })));
};
export default FundFlowGraph;
