{"ast":null,"code":"var _ = require(\"../lodash\");\n\nvar Graph = require(\"../graph\");\n\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = prim;\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function (v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  }); // Start from an arbitrary node\n\n\n  pq.decrease(g.nodes()[0], 0);\n  var init = false;\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error(\"Input graph is not connected: \" + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["E:/sqlindex2/sql/frontend/node_modules/graphlib/lib/alg/prim.js"],"names":["_","require","Graph","PriorityQueue","module","exports","prim","g","weightFunc","result","parents","pq","v","updateNeighbors","edge","w","pri","priority","undefined","edgeWeight","decrease","nodeCount","each","nodes","add","Number","POSITIVE_INFINITY","setNode","init","size","removeMin","has","setEdge","Error","nodeEdges","forEach"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,WAAD,CAAf;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,wBAAD,CAA3B;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AAEA,SAASA,IAAT,CAAcC,CAAd,EAAiBC,UAAjB,EAA6B;AAC3B,MAAIC,MAAM,GAAG,IAAIP,KAAJ,EAAb;AACA,MAAIQ,OAAO,GAAG,EAAd;AACA,MAAIC,EAAE,GAAG,IAAIR,aAAJ,EAAT;AACA,MAAIS,CAAJ;;AAEA,WAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,QAAIC,CAAC,GAAGD,IAAI,CAACF,CAAL,KAAWA,CAAX,GAAeE,IAAI,CAACC,CAApB,GAAwBD,IAAI,CAACF,CAArC;AACA,QAAII,GAAG,GAAGL,EAAE,CAACM,QAAH,CAAYF,CAAZ,CAAV;;AACA,QAAIC,GAAG,KAAKE,SAAZ,EAAuB;AACrB,UAAIC,UAAU,GAAGX,UAAU,CAACM,IAAD,CAA3B;;AACA,UAAIK,UAAU,GAAGH,GAAjB,EAAsB;AACpBN,QAAAA,OAAO,CAACK,CAAD,CAAP,GAAaH,CAAb;AACAD,QAAAA,EAAE,CAACS,QAAH,CAAYL,CAAZ,EAAeI,UAAf;AACD;AACF;AACF;;AAED,MAAIZ,CAAC,CAACc,SAAF,OAAkB,CAAtB,EAAyB;AACvB,WAAOZ,MAAP;AACD;;AAEDT,EAAAA,CAAC,CAACsB,IAAF,CAAOf,CAAC,CAACgB,KAAF,EAAP,EAAkB,UAASX,CAAT,EAAY;AAC5BD,IAAAA,EAAE,CAACa,GAAH,CAAOZ,CAAP,EAAUa,MAAM,CAACC,iBAAjB;AACAjB,IAAAA,MAAM,CAACkB,OAAP,CAAef,CAAf;AACD,GAHD,EAtB2B,CA2B3B;;;AACAD,EAAAA,EAAE,CAACS,QAAH,CAAYb,CAAC,CAACgB,KAAF,GAAU,CAAV,CAAZ,EAA0B,CAA1B;AAEA,MAAIK,IAAI,GAAG,KAAX;;AACA,SAAOjB,EAAE,CAACkB,IAAH,KAAY,CAAnB,EAAsB;AACpBjB,IAAAA,CAAC,GAAGD,EAAE,CAACmB,SAAH,EAAJ;;AACA,QAAI9B,CAAC,CAAC+B,GAAF,CAAMrB,OAAN,EAAeE,CAAf,CAAJ,EAAuB;AACrBH,MAAAA,MAAM,CAACuB,OAAP,CAAepB,CAAf,EAAkBF,OAAO,CAACE,CAAD,CAAzB;AACD,KAFD,MAEO,IAAIgB,IAAJ,EAAU;AACf,YAAM,IAAIK,KAAJ,CAAU,mCAAmC1B,CAA7C,CAAN;AACD,KAFM,MAEA;AACLqB,MAAAA,IAAI,GAAG,IAAP;AACD;;AAEDrB,IAAAA,CAAC,CAAC2B,SAAF,CAAYtB,CAAZ,EAAeuB,OAAf,CAAuBtB,eAAvB;AACD;;AAED,SAAOJ,MAAP;AACD","sourcesContent":["var _ = require(\"../lodash\");\r\nvar Graph = require(\"../graph\");\r\nvar PriorityQueue = require(\"../data/priority-queue\");\r\n\r\nmodule.exports = prim;\r\n\r\nfunction prim(g, weightFunc) {\r\n  var result = new Graph();\r\n  var parents = {};\r\n  var pq = new PriorityQueue();\r\n  var v;\r\n\r\n  function updateNeighbors(edge) {\r\n    var w = edge.v === v ? edge.w : edge.v;\r\n    var pri = pq.priority(w);\r\n    if (pri !== undefined) {\r\n      var edgeWeight = weightFunc(edge);\r\n      if (edgeWeight < pri) {\r\n        parents[w] = v;\r\n        pq.decrease(w, edgeWeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (g.nodeCount() === 0) {\r\n    return result;\r\n  }\r\n\r\n  _.each(g.nodes(), function(v) {\r\n    pq.add(v, Number.POSITIVE_INFINITY);\r\n    result.setNode(v);\r\n  });\r\n\r\n  // Start from an arbitrary node\r\n  pq.decrease(g.nodes()[0], 0);\r\n\r\n  var init = false;\r\n  while (pq.size() > 0) {\r\n    v = pq.removeMin();\r\n    if (_.has(parents, v)) {\r\n      result.setEdge(v, parents[v]);\r\n    } else if (init) {\r\n      throw new Error(\"Input graph is not connected: \" + g);\r\n    } else {\r\n      init = true;\r\n    }\r\n\r\n    g.nodeEdges(v).forEach(updateNeighbors);\r\n  }\r\n\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}