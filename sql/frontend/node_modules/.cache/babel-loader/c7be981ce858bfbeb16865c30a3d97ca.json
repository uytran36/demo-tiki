{"ast":null,"code":"import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport polyline from './polyline';\n\nfunction getAllPoints(points) {\n  var tmp = points.slice(0);\n\n  if (points.length) {\n    tmp.push(points[0]);\n  }\n\n  return tmp;\n}\n\nexport default {\n  /**\r\n   * 计算多边形的包围盒\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @return {object} 包围盒\r\n   */\n  box: function (points) {\n    return polyline.box(points);\n  },\n\n  /**\r\n   * 计算多边形的长度\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @return {object} 多边形边的长度\r\n   */\n  length: function (points) {\n    return lengthOfSegment(getAllPoints(points));\n  },\n\n  /**\r\n   * 根据比例获取多边形的点\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @param {number} t 在多边形的长度上的比例\r\n   * @return {object} 根据比例值计算出来的点\r\n   */\n  pointAt: function (points, t) {\n    return pointAtSegments(getAllPoints(points), t);\n  },\n\n  /**\r\n   * 指定点到多边形的距离\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @param {number} x 指定点的 x\r\n   * @param {number} y 指定点的 y\r\n   * @return {number} 点到多边形的距离\r\n   */\n  pointDistance: function (points, x, y) {\n    return distanceAtSegment(getAllPoints(points), x, y);\n  },\n\n  /**\r\n   * 根据比例获取多边形的切线角度\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @param {number} t 在多边形的长度上的比例\r\n   * @return {object} 根据比例值计算出来的角度\r\n   */\n  tangentAngle: function (points, t) {\n    return angleAtSegments(getAllPoints(points), t);\n  }\n};","map":{"version":3,"sources":["../src/polygon.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,EAA0B,eAA1B,EAA2C,iBAA3C,EAA8D,eAA9D,QAAqF,YAArF;AACA,OAAO,QAAP,MAAqB,YAArB;;AAGA,SAAS,YAAT,CAAsB,MAAtB,EAA0C;AACxC,MAAM,GAAG,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,CAAZ;;AACA,MAAI,MAAM,CAAC,MAAX,EAAmB;AACjB,IAAA,GAAG,CAAC,IAAJ,CAAS,MAAM,CAAC,CAAD,CAAf;AACD;;AACD,SAAO,GAAP;AACD;;AAED,eAAe;AACb;;;;AAIG;AACH,EAAA,GAAG,EAAH,UAAI,MAAJ,EAAwB;AACtB,WAAO,QAAQ,CAAC,GAAT,CAAa,MAAb,CAAP;AACD,GARY;;AASb;;;;AAIG;AACH,EAAA,MAAM,EAAN,UAAO,MAAP,EAA2B;AACzB,WAAO,eAAe,CAAC,YAAY,CAAC,MAAD,CAAb,CAAtB;AACD,GAhBY;;AAiBb;;;;;AAKG;AACH,EAAA,OAAO,EAAP,UAAQ,MAAR,EAA8B,CAA9B,EAAuC;AACrC,WAAO,eAAe,CAAC,YAAY,CAAC,MAAD,CAAb,EAAuB,CAAvB,CAAtB;AACD,GAzBY;;AA0Bb;;;;;;AAMG;AACH,EAAA,aAAa,EAAb,UAAc,MAAd,EAAoC,CAApC,EAA+C,CAA/C,EAAwD;AACtD,WAAO,iBAAiB,CAAC,YAAY,CAAC,MAAD,CAAb,EAAuB,CAAvB,EAA0B,CAA1B,CAAxB;AACD,GAnCY;;AAoCb;;;;;AAKG;AACH,EAAA,YAAY,EAAZ,UAAa,MAAb,EAAmC,CAAnC,EAA4C;AAC1C,WAAO,eAAe,CAAC,YAAY,CAAC,MAAD,CAAb,EAAuB,CAAvB,CAAtB;AACD;AA5CY,CAAf","sourceRoot":"","sourcesContent":["import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\r\nimport polyline from './polyline';\r\nfunction getAllPoints(points) {\r\n    var tmp = points.slice(0);\r\n    if (points.length) {\r\n        tmp.push(points[0]);\r\n    }\r\n    return tmp;\r\n}\r\nexport default {\r\n    /**\r\n     * 计算多边形的包围盒\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @return {object} 包围盒\r\n     */\r\n    box: function (points) {\r\n        return polyline.box(points);\r\n    },\r\n    /**\r\n     * 计算多边形的长度\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @return {object} 多边形边的长度\r\n     */\r\n    length: function (points) {\r\n        return lengthOfSegment(getAllPoints(points));\r\n    },\r\n    /**\r\n     * 根据比例获取多边形的点\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @param {number} t 在多边形的长度上的比例\r\n     * @return {object} 根据比例值计算出来的点\r\n     */\r\n    pointAt: function (points, t) {\r\n        return pointAtSegments(getAllPoints(points), t);\r\n    },\r\n    /**\r\n     * 指定点到多边形的距离\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @param {number} x 指定点的 x\r\n     * @param {number} y 指定点的 y\r\n     * @return {number} 点到多边形的距离\r\n     */\r\n    pointDistance: function (points, x, y) {\r\n        return distanceAtSegment(getAllPoints(points), x, y);\r\n    },\r\n    /**\r\n     * 根据比例获取多边形的切线角度\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @param {number} t 在多边形的长度上的比例\r\n     * @return {object} 根据比例值计算出来的角度\r\n     */\r\n    tangentAngle: function (points, t) {\r\n        return angleAtSegments(getAllPoints(points), t);\r\n    },\r\n};\r\n//# sourceMappingURL=polygon.js.map"]},"metadata":{},"sourceType":"module"}