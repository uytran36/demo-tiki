{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { interaction, theme } from '../../adaptor/common';\nimport { flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\nimport { transformToViewsData } from './helper';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var color = options.color,\n      nodeStyle = options.nodeStyle,\n      edgeStyle = options.edgeStyle,\n      label = options.label,\n      tooltip = options.tooltip; // 1. 组件，优先设置，因为子 view 会继承配置\n\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false); // y 镜像一下，防止图形顺序和数据顺序反了\n\n  chart.coordinate().reflect('y'); // 2. node edge views\n  // @ts-ignore\n\n  var _a = transformToViewsData(options, chart.width, chart.height),\n      nodes = _a.nodes,\n      edges = _a.edges; // edge view\n\n\n  var edgeView = chart.createView({\n    id: EDGES_VIEW_ID\n  });\n  edgeView.data(edges);\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color: color,\n        style: edgeStyle,\n        shape: 'arc'\n      },\n      tooltip: tooltip,\n      state: {\n        active: {\n          style: {\n            opacity: 0.8,\n            lineWidth: 0\n          }\n        }\n      }\n    }\n  });\n  var nodeView = chart.createView({\n    id: NODES_VIEW_ID\n  });\n  nodeView.data(nodes);\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color: color,\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip\n    }\n  });\n  chart.interaction('element-active'); // scale\n\n  chart.scale({\n    x: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    y: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    name: {\n      sync: 'color',\n      type: 'cat'\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\n\n\nexport function animation(params) {\n  var chart = params.chart,\n      options = params.options;\n  var animation = options.animation; // 同时设置整个 view 动画选项\n\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  var geometries = __spreadArrays(chart.views[0].geometries, chart.views[1].geometries); // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n\n\n  geometries.forEach(function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 节点拖动\n * @param params\n */\n\nexport function nodeDraggable(params) {\n  var chart = params.chart,\n      options = params.options;\n  var nodeDraggable = options.nodeDraggable;\n  var DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, interaction, nodeDraggable, animation, theme // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"sources":["../../../src/plots/sankey/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { interaction, theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { SankeyOptions } from './types';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\nimport { transformToViewsData } from './helper';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { color, nodeStyle, edgeStyle, label, tooltip } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n\n  // 2. node edge views\n  // @ts-ignore\n  const { nodes, edges } = transformToViewsData(options, chart.width, chart.height);\n\n  // edge view\n  const edgeView = chart.createView({ id: EDGES_VIEW_ID });\n  edgeView.data(edges);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: {\n        active: {\n          style: {\n            opacity: 0.8,\n            lineWidth: 0,\n          },\n        },\n      },\n    },\n  });\n\n  const nodeView = chart.createView({ id: NODES_VIEW_ID });\n  nodeView.data(nodes);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    y: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    name: { sync: 'color', type: 'cat' },\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  const geometries = [...chart.views[0].geometries, ...chart.views[1].geometries];\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  geometries.forEach((g) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { nodeDraggable } = options;\n\n  const DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    interaction,\n    nodeDraggable,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}