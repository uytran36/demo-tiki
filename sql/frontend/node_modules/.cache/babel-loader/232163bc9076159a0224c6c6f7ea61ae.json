{"ast":null,"code":"var GraphEvent =\n/** @class */\nfunction () {\n  function GraphEvent(type, event) {\n    /**\r\n     * 是否允许冒泡\r\n     * @type {boolean}\r\n     */\n    this.bubbles = true;\n    /**\r\n     * 触发对象\r\n     * @type {object}\r\n     */\n\n    this.target = null;\n    /**\r\n     * 监听对象\r\n     * @type {object}\r\n     */\n\n    this.currentTarget = null;\n    /**\r\n     * 委托对象\r\n     * @type {object}\r\n     */\n\n    this.delegateTarget = null;\n    /**\r\n     * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')\r\n     * @type {object}\r\n     */\n\n    this.delegateObject = null;\n    /**\r\n     * 是否阻止了原生事件\r\n     * @type {boolean}\r\n     */\n\n    this.defaultPrevented = false;\n    /**\r\n     * 是否阻止传播（向上冒泡）\r\n     * @type {boolean}\r\n     */\n\n    this.propagationStopped = false;\n    /**\r\n     * 触发事件的图形\r\n     * @type {IShape}\r\n     */\n\n    this.shape = null;\n    /**\r\n     * 开始触发事件的图形\r\n     * @type {IShape}\r\n     */\n\n    this.fromShape = null;\n    /**\r\n     * 事件结束时的触发图形\r\n     * @type {IShape}\r\n     */\n\n    this.toShape = null; // 触发事件的路径\n\n    this.propagationPath = [];\n    this.type = type;\n    this.name = type;\n    this.originalEvent = event;\n    this.timeStamp = event.timeStamp;\n  }\n  /**\r\n   * 阻止浏览器默认的行为\r\n   */\n\n\n  GraphEvent.prototype.preventDefault = function () {\n    this.defaultPrevented = true;\n\n    if (this.originalEvent.preventDefault) {\n      this.originalEvent.preventDefault();\n    }\n  };\n  /**\r\n   * 阻止冒泡\r\n   */\n\n\n  GraphEvent.prototype.stopPropagation = function () {\n    this.propagationStopped = true;\n  };\n\n  GraphEvent.prototype.toString = function () {\n    var type = this.type;\n    return \"[Event (type=\" + type + \")]\";\n  };\n\n  GraphEvent.prototype.save = function () {};\n\n  GraphEvent.prototype.restore = function () {};\n\n  return GraphEvent;\n}();\n\nexport default GraphEvent;","map":{"version":3,"sources":["../../src/event/graph-event.ts"],"names":[],"mappings":"AAGA,IAAA,UAAA;AAAA;AAAA,YAAA;AAiGE,WAAA,UAAA,CAAY,IAAZ,EAAkB,KAAlB,EAAuB;AAlEvB;;;AAGG;AACH,SAAA,OAAA,GAAmB,IAAnB;AACA;;;AAGG;;AACH,SAAA,MAAA,GAAsB,IAAtB;AACA;;;AAGG;;AACH,SAAA,aAAA,GAA6B,IAA7B;AACA;;;AAGG;;AACH,SAAA,cAAA,GAA8B,IAA9B;AACA;;;AAGG;;AACH,SAAA,cAAA,GAAyB,IAAzB;AACA;;;AAGG;;AACH,SAAA,gBAAA,GAA4B,KAA5B;AACA;;;AAGG;;AACH,SAAA,kBAAA,GAA8B,KAA9B;AACA;;;AAGG;;AACH,SAAA,KAAA,GAAgB,IAAhB;AACA;;;AAGG;;AACH,SAAA,SAAA,GAAoB,IAApB;AACA;;;AAGG;;AACH,SAAA,OAAA,GAAkB,IAAlB,CAiBuB,CAHvB;;AACA,SAAA,eAAA,GAAyB,EAAzB;AAGE,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,aAAL,GAAqB,KAArB;AACA,SAAK,SAAL,GAAiB,KAAK,CAAC,SAAvB;AACD;AAED;;AAEG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,SAAK,gBAAL,GAAwB,IAAxB;;AACA,QAAI,KAAK,aAAL,CAAmB,cAAvB,EAAuC;AACrC,WAAK,aAAL,CAAmB,cAAnB;AACD;AACF,GALD;AAOA;;AAEG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,SAAK,kBAAL,GAA0B,IAA1B;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,IAAI,GAAG,KAAK,IAAlB;AACA,WAAO,kBAAgB,IAAhB,GAAoB,IAA3B;AACD,GAHD;;AAKA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA,CAAS,CAAT;;AAEA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA,CAAY,CAAZ;;AACF,SAAA,UAAA;AAAC,CAjID,EAAA;;AAmIA,eAAe,UAAf","sourceRoot":"","sourcesContent":["var GraphEvent = /** @class */ (function () {\r\n    function GraphEvent(type, event) {\r\n        /**\r\n         * 是否允许冒泡\r\n         * @type {boolean}\r\n         */\r\n        this.bubbles = true;\r\n        /**\r\n         * 触发对象\r\n         * @type {object}\r\n         */\r\n        this.target = null;\r\n        /**\r\n         * 监听对象\r\n         * @type {object}\r\n         */\r\n        this.currentTarget = null;\r\n        /**\r\n         * 委托对象\r\n         * @type {object}\r\n         */\r\n        this.delegateTarget = null;\r\n        /**\r\n         * 委托事件监听对象的代理对象，即 ev.delegateObject = ev.currentTarget.get('delegateObject')\r\n         * @type {object}\r\n         */\r\n        this.delegateObject = null;\r\n        /**\r\n         * 是否阻止了原生事件\r\n         * @type {boolean}\r\n         */\r\n        this.defaultPrevented = false;\r\n        /**\r\n         * 是否阻止传播（向上冒泡）\r\n         * @type {boolean}\r\n         */\r\n        this.propagationStopped = false;\r\n        /**\r\n         * 触发事件的图形\r\n         * @type {IShape}\r\n         */\r\n        this.shape = null;\r\n        /**\r\n         * 开始触发事件的图形\r\n         * @type {IShape}\r\n         */\r\n        this.fromShape = null;\r\n        /**\r\n         * 事件结束时的触发图形\r\n         * @type {IShape}\r\n         */\r\n        this.toShape = null;\r\n        // 触发事件的路径\r\n        this.propagationPath = [];\r\n        this.type = type;\r\n        this.name = type;\r\n        this.originalEvent = event;\r\n        this.timeStamp = event.timeStamp;\r\n    }\r\n    /**\r\n     * 阻止浏览器默认的行为\r\n     */\r\n    GraphEvent.prototype.preventDefault = function () {\r\n        this.defaultPrevented = true;\r\n        if (this.originalEvent.preventDefault) {\r\n            this.originalEvent.preventDefault();\r\n        }\r\n    };\r\n    /**\r\n     * 阻止冒泡\r\n     */\r\n    GraphEvent.prototype.stopPropagation = function () {\r\n        this.propagationStopped = true;\r\n    };\r\n    GraphEvent.prototype.toString = function () {\r\n        var type = this.type;\r\n        return \"[Event (type=\" + type + \")]\";\r\n    };\r\n    GraphEvent.prototype.save = function () { };\r\n    GraphEvent.prototype.restore = function () { };\r\n    return GraphEvent;\r\n}());\r\nexport default GraphEvent;\r\n//# sourceMappingURL=graph-event.js.map"]},"metadata":{},"sourceType":"module"}