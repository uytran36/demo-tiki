{"ast":null,"code":"/**\r\n * 获取指定节点的所有邻居\r\n * @param nodeId 节点 ID\r\n * @param edges 图中的所有边数据\r\n * @param type 邻居类型\r\n */\nexport var getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  } // 若未指定 type ，则返回所有邻居\n\n\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n\n  return currentEdges.map(neighhborsConverter);\n};\n/**\r\n * 获取指定节点的出边\r\n * @param nodeId 节点 ID\r\n * @param edges 图中的所有边数据\r\n */\n\nexport var getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\r\n * 获取指定节点的边，包括出边和入边\r\n * @param nodeId 节点 ID\r\n * @param edges 图中的所有边数据\r\n */\n\nexport var getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\r\n * 生成唯一的 ID，规则是序号 + 时间戳\r\n * @param index 序号\r\n */\n\nexport var uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var random1 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\n  var random2 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\n  return index + \"-\" + random1 + random2;\n};","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/@antv/algorithm/es/util.js"],"names":["getNeighbors","nodeId","edges","type","currentEdges","filter","edge","source","target","neighhborsConverter_1","map","neighhborsConverter_2","neighhborsConverter","getOutEdgesNodeId","getEdgesByNodeId","uniqueId","index","random1","Math","random","split","substr","random2"],"mappings":"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","sourcesContent":["/**\r\n * 获取指定节点的所有邻居\r\n * @param nodeId 节点 ID\r\n * @param edges 图中的所有边数据\r\n * @param type 邻居类型\r\n */\r\nexport var getNeighbors = function getNeighbors(nodeId, edges, type) {\r\n  if (edges === void 0) {\r\n    edges = [];\r\n  }\r\n\r\n  var currentEdges = edges.filter(function (edge) {\r\n    return edge.source === nodeId || edge.target === nodeId;\r\n  });\r\n\r\n  if (type === 'target') {\r\n    // 当前节点为 source，它所指向的目标节点\r\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\r\n      return edge.source === nodeId;\r\n    };\r\n\r\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\r\n      return edge.target;\r\n    });\r\n  }\r\n\r\n  if (type === 'source') {\r\n    // 当前节点为 target，它所指向的源节点\r\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\r\n      return edge.target === nodeId;\r\n    };\r\n\r\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\r\n      return edge.source;\r\n    });\r\n  } // 若未指定 type ，则返回所有邻居\r\n\r\n\r\n  var neighhborsConverter = function neighhborsConverter(edge) {\r\n    return edge.source === nodeId ? edge.target : edge.source;\r\n  };\r\n\r\n  return currentEdges.map(neighhborsConverter);\r\n};\r\n/**\r\n * 获取指定节点的出边\r\n * @param nodeId 节点 ID\r\n * @param edges 图中的所有边数据\r\n */\r\n\r\nexport var getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\r\n  return edges.filter(function (edge) {\r\n    return edge.source === nodeId;\r\n  });\r\n};\r\n/**\r\n * 获取指定节点的边，包括出边和入边\r\n * @param nodeId 节点 ID\r\n * @param edges 图中的所有边数据\r\n */\r\n\r\nexport var getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\r\n  return edges.filter(function (edge) {\r\n    return edge.source === nodeId || edge.target === nodeId;\r\n  });\r\n};\r\n/**\r\n * 生成唯一的 ID，规则是序号 + 时间戳\r\n * @param index 序号\r\n */\r\n\r\nexport var uniqueId = function uniqueId(index) {\r\n  if (index === void 0) {\r\n    index = 0;\r\n  }\r\n\r\n  var random1 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\r\n  var random2 = (\"\" + Math.random()).split('.')[1].substr(0, 5);\r\n  return index + \"-\" + random1 + random2;\r\n};"]},"metadata":{},"sourceType":"module"}