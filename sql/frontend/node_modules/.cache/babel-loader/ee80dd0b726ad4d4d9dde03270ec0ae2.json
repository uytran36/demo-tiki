{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Event } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util'; // 获取对应的 scale\n\nfunction getFilter(scale, dim, point1, point2) {\n  var min = Math.min(point1[dim], point2[dim]);\n  var max = Math.max(point1[dim], point2[dim]);\n  var _a = scale.range,\n      rangeMin = _a[0],\n      rangeMax = _a[1]; // 约束值在 scale 的 range 之间\n\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n\n  if (max > rangeMax) {\n    max = rangeMax;\n  } // 范围大于整个 view 的范围，则返回 null\n\n\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n\n  var minValue = scale.invert(min);\n  var maxValue = scale.invert(max);\n\n  if (scale.isCategory) {\n    var minIndex = scale.values.indexOf(minValue);\n    var maxIndex = scale.values.indexOf(maxValue);\n    var arr_1 = scale.values.slice(minIndex, maxIndex + 1);\n    return function (value) {\n      return arr_1.includes(value);\n    };\n  } else {\n    return function (value) {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n/** range-filter 只用于：brush-filter, brush-x-filter, brush-y-filter */\n\n\nvar EVENTS;\n\n(function (EVENTS) {\n  EVENTS[\"FILTER\"] = \"brush-filter-processing\";\n  EVENTS[\"RESET\"] = \"brush-filter-reset\";\n  EVENTS[\"BEFORE_FILTER\"] = \"brush-filter:beforefilter\";\n  EVENTS[\"AFTER_FILTER\"] = \"brush-filter:afterfilter\";\n  EVENTS[\"BEFORE_RESET\"] = \"brush-filter:beforereset\";\n  EVENTS[\"AFTER_RESET\"] = \"brush-filter:afterreset\";\n})(EVENTS || (EVENTS = {}));\n\nexport { EVENTS as BRUSH_FILTER_EVENTS };\n/**\r\n * 范围过滤的 Action\r\n * @ignore\r\n */\n\nvar RangeFilter =\n/** @class */\nfunction (_super) {\n  __extends(RangeFilter, _super);\n\n  function RangeFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * 范围过滤生效的字段/维度，可以是 x, y\r\n     */\n\n\n    _this.dims = ['x', 'y'];\n    /** 起始点 */\n\n    _this.startPoint = null;\n    _this.isStarted = false;\n    return _this;\n  } // x,y 是否生效\n\n\n  RangeFilter.prototype.hasDim = function (dim) {\n    return this.dims.includes(dim);\n  };\n  /**\r\n   * 开始范围过滤，记录范围过滤的起点\r\n   */\n\n\n  RangeFilter.prototype.start = function () {\n    var context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  };\n  /**\r\n   * 过滤，以开始的点和当前点对数据进行过滤\r\n   */\n\n\n  RangeFilter.prototype.filter = function () {\n    var startPoint;\n    var currentPoint;\n\n    if (isMask(this.context)) {\n      var maskShape = this.context.event.target;\n      var bbox = maskShape.getCanvasBBox();\n      startPoint = {\n        x: bbox.x,\n        y: bbox.y\n      };\n      currentPoint = {\n        x: bbox.maxX,\n        y: bbox.maxY\n      };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n\n    var _a = this.context,\n        view = _a.view,\n        event = _a.event;\n    var payload = {\n      view: view,\n      event: event,\n      dims: this.dims\n    };\n    view.emit(EVENTS.BEFORE_FILTER, Event.fromData(view, EVENTS.BEFORE_FILTER, payload));\n    var coord = view.getCoordinate();\n    var normalCurrent = coord.invert(currentPoint);\n    var normalStart = coord.invert(startPoint); // 设置 x 方向的 filter\n\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      var filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    } // 设置 y 方向的 filter\n\n\n    if (this.hasDim('y')) {\n      var yScale = view.getYScales()[0];\n      var filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n\n    this.reRender(view, {\n      source: EVENTS.FILTER\n    });\n    view.emit(EVENTS.AFTER_FILTER, Event.fromData(view, EVENTS.AFTER_FILTER, payload));\n  };\n  /**\r\n   * 结束\r\n   */\n\n\n  RangeFilter.prototype.end = function () {\n    this.isStarted = false;\n  };\n  /**\r\n   * 取消同当前 Action 相关的过滤，指定的 x,y\r\n   */\n\n\n  RangeFilter.prototype.reset = function () {\n    var view = this.context.view;\n    view.emit(EVENTS.BEFORE_RESET, Event.fromData(view, EVENTS.BEFORE_RESET, {}));\n    this.isStarted = false;\n\n    if (this.hasDim('x')) {\n      var xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      var yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n\n    this.reRender(view, {\n      source: EVENTS.RESET\n    });\n    view.emit(EVENTS.AFTER_RESET, Event.fromData(view, EVENTS.AFTER_RESET, {}));\n  };\n  /**\r\n   * 对 view 进行过滤\r\n   */\n\n\n  RangeFilter.prototype.filterView = function (view, field, filter) {\n    view.filter(field, filter);\n  };\n  /**\r\n   * 重新渲染\r\n   * @param view\r\n   */\n\n\n  RangeFilter.prototype.reRender = function (view, payload) {\n    view.render(true, payload);\n  };\n\n  return RangeFilter;\n}(Action);\n\nexport default RangeFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/data/range-filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Point, Scale } from '../../../dependents';\nimport { FilterCondition, EventPayload } from '../../../interface';\nimport { View } from '../../../chart';\nimport Action from '../base';\nimport { isMask } from '../util';\n\n// 获取对应的 scale\nfunction getFilter(scale: Scale, dim: string, point1: Point, point2: Point): FilterCondition {\n  let min = Math.min(point1[dim], point2[dim]);\n  let max = Math.max(point1[dim], point2[dim]);\n  const [rangeMin, rangeMax] = scale.range;\n  // 约束值在 scale 的 range 之间\n  if (min < rangeMin) {\n    min = rangeMin;\n  }\n  if (max > rangeMax) {\n    max = rangeMax;\n  }\n  // 范围大于整个 view 的范围，则返回 null\n  if (min === rangeMax && max === rangeMax) {\n    return null;\n  }\n  const minValue = scale.invert(min);\n  const maxValue = scale.invert(max);\n  if (scale.isCategory) {\n    const minIndex = scale.values.indexOf(minValue);\n    const maxIndex = scale.values.indexOf(maxValue);\n    const arr = scale.values.slice(minIndex, maxIndex + 1);\n    return (value) => {\n      return arr.includes(value);\n    };\n  } else {\n    return (value) => {\n      return value >= minValue && value <= maxValue;\n    };\n  }\n}\n\nexport enum BRUSH_FILTER_EVENTS {\n  FILTER = 'brush-filter-processing',\n  RESET = 'brush-filter-reset',\n}\n\n/**\n * 范围过滤的 Action\n * @ignore\n */\nclass RangeFilter extends Action {\n  /** 允许外部传入 dims */\n  protected cfgFields: ['dims'];\n  /**\n   * 范围过滤生效的字段/维度，可以是 x, y\n   */\n  protected dims: string[] = ['x', 'y'];\n  /** 起始点 */\n  protected startPoint: Point = null;\n\n  private isStarted: boolean = false;\n\n  // x,y 是否生效\n  private hasDim(dim: string) {\n    return this.dims.includes(dim);\n  }\n\n  /**\n   * 开始范围过滤，记录范围过滤的起点\n   */\n  public start() {\n    const context = this.context;\n    this.isStarted = true;\n    this.startPoint = context.getCurrentPoint();\n  }\n\n  /**\n   * 过滤，以开始的点和当前点对数据进行过滤\n   */\n  public filter() {\n    let startPoint;\n    let currentPoint;\n    if (isMask(this.context)) {\n      const maskShape = this.context.event.target;\n      const bbox = maskShape.getCanvasBBox();\n      startPoint = { x: bbox.x, y: bbox.y };\n      currentPoint = { x: bbox.maxX, y: bbox.maxY };\n    } else {\n      if (!this.isStarted) {\n        // 如果没有开始，则不执行过滤\n        return;\n      }\n      startPoint = this.startPoint;\n      currentPoint = this.context.getCurrentPoint();\n    }\n    if (Math.abs(startPoint.x - currentPoint.x) < 5 || Math.abs(startPoint.x - currentPoint.y) < 5) {\n      // 距离过小也不生效\n      return;\n    }\n    const view = this.context.view;\n    const coord = view.getCoordinate();\n    const normalCurrent = coord.invert(currentPoint);\n    const normalStart = coord.invert(startPoint);\n    // 设置 x 方向的 filter\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      const filter = getFilter(xScale, 'x', normalCurrent, normalStart);\n      this.filterView(view, xScale.field, filter);\n    }\n    // 设置 y 方向的 filter\n    if (this.hasDim('y')) {\n      const yScale = view.getYScales()[0];\n      const filter = getFilter(yScale, 'y', normalCurrent, normalStart);\n      this.filterView(view, yScale.field, filter);\n    }\n    this.reRender(view, { source: BRUSH_FILTER_EVENTS.FILTER });\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.isStarted = false;\n  }\n\n  /**\n   * 取消同当前 Action 相关的过滤，指定的 x,y\n   */\n  public reset() {\n    const view = this.context.view;\n    this.isStarted = false;\n    if (this.hasDim('x')) {\n      const xScale = view.getXScale();\n      this.filterView(view, xScale.field, null); // 取消过滤\n    }\n    if (this.hasDim('y')) {\n      // y 轴过滤仅取第一个 yScale\n      const yScale = view.getYScales()[0];\n      this.filterView(view, yScale.field, null); // 取消过滤\n    }\n    this.reRender(view, { source: BRUSH_FILTER_EVENTS.RESET });\n  }\n\n  /**\n   * 对 view 进行过滤\n   */\n  protected filterView(view: View, field: string, filter: FilterCondition) {\n    view.filter(field, filter);\n  }\n\n  /**\n   * 重新渲染\n   * @param view\n   */\n  protected reRender(view: View, payload?: EventPayload) {\n    view.render(true, payload);\n  }\n}\n\nexport default RangeFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}