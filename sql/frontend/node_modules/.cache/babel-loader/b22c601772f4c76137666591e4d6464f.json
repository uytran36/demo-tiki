{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { isNumber } from '@antv/util';\nimport { flow, deepAssign, pick } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { findGeometry, transformLabel } from '../../utils';\nimport { getQuadrantDefaultConfig, getPath, getMeta } from './util';\n/**\r\n * 散点图默认美观\r\n * ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\r\n * @param params\r\n * @returns params\r\n */\n\nexport function transformOptions(options) {\n  var _a = options.data,\n      data = _a === void 0 ? [] : _a,\n      xField = options.xField,\n      yField = options.yField;\n\n  if (data.length) {\n    // x y 字段知否只有一个值，如果只有一个值，则进行优化\n    var isOneX = true;\n    var isOneY = true;\n    var prev = data[0];\n    var curr = void 0;\n\n    for (var i = 1; i < data.length; i++) {\n      curr = data[i];\n\n      if (prev[xField] !== curr[xField]) {\n        isOneX = false;\n      }\n\n      if (prev[yField] !== curr[yField]) {\n        isOneY = false;\n      } // 如果都不是 oneValue，那么可提前跳出循环\n\n\n      if (!isOneX && !isOneY) {\n        break;\n      }\n\n      prev = curr;\n    }\n\n    var keys = [];\n    isOneX && keys.push(xField);\n    isOneY && keys.push(yField);\n    var meta_1 = pick(getMeta(options), keys);\n    return deepAssign({}, options, {\n      meta: meta_1\n    });\n  }\n\n  return options;\n}\n/**\r\n * 字段\r\n * @param params\r\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      type = options.type,\n      color = options.color,\n      shape = options.shape,\n      pointStyle = options.pointStyle,\n      shapeField = options.shapeField,\n      colorField = options.colorField,\n      xField = options.xField,\n      yField = options.yField,\n      sizeField = options.sizeField;\n  var size = options.size;\n  var tooltip = options.tooltip;\n\n  if (sizeField) {\n    if (!size) {\n      size = [2, 8];\n    }\n\n    if (isNumber(size)) {\n      size = [size, size];\n    }\n  }\n\n  if (tooltip && !tooltip.fields) {\n    tooltip = __assign(__assign({}, tooltip), {\n      fields: [xField, yField, colorField, sizeField, shapeField]\n    });\n  } // 数据\n\n\n  chart.data(data); // geometry\n\n  point(deepAssign({}, params, {\n    options: {\n      seriesField: colorField,\n      point: {\n        color: color,\n        shape: shape,\n        size: size,\n        style: pointStyle\n      },\n      tooltip: tooltip\n    }\n  }));\n  var geometry = findGeometry(chart, 'point'); // 数据调整\n\n  if (type) {\n    geometry.adjust(type);\n  }\n\n  return params;\n}\n/**\r\n * meta 配置\r\n * @param params\r\n */\n\n\nexport function meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  var newOptions = transformOptions(options);\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(deepAssign({}, params, {\n    options: newOptions\n  }));\n}\n/**\r\n * axis 配置\r\n * @param params\r\n */\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  chart.axis(xField, xAxis);\n  chart.axis(yField, yAxis);\n  return params;\n}\n/**\r\n * legend 配置\r\n * @param params\r\n */\n\n\nfunction legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      shapeField = options.shapeField,\n      sizeField = options.sizeField,\n      shapeLegend = options.shapeLegend,\n      sizeLegend = options.sizeLegend;\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n\n  var showLegend = legend !== false;\n\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  } // 优先取 shapeLegend, 否则取 legend\n\n\n  if (shapeField) {\n    if (shapeLegend) {\n      chart.legend(shapeField, shapeLegend);\n    } else {\n      chart.legend(shapeField, shapeLegend === false ? false : legend);\n    }\n  }\n\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend ? sizeLegend : false);\n  }\n  /** 默认不展示 shape 图例，当 shapeLegend 为 undefined 也不展示图例 */\n\n  /** 默认没有 sizeField，则隐藏连续图例 */\n\n\n  if (!showLegend && !shapeLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\r\n * 数据标签\r\n * @param params\r\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField;\n  var scatterGeometry = findGeometry(chart, 'point'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    scatterGeometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    scatterGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\r\n * annotation 配置\r\n * - 特殊 annotation: quadrant(四象限)\r\n * @param params\r\n */\n\n\nfunction scatterAnnotation(params) {\n  var options = params.options;\n  var quadrant = options.quadrant;\n  var annotationOptions = [];\n\n  if (quadrant) {\n    var _a = quadrant.xBaseline,\n        xBaseline = _a === void 0 ? 0 : _a,\n        _b = quadrant.yBaseline,\n        yBaseline = _b === void 0 ? 0 : _b,\n        labels_1 = quadrant.labels,\n        regionStyle_1 = quadrant.regionStyle,\n        lineStyle = quadrant.lineStyle;\n    var defaultConfig_1 = getQuadrantDefaultConfig(xBaseline, yBaseline); // 仅支持四象限\n\n    var quadrants = new Array(4).join(',').split(',');\n    quadrants.forEach(function (_, index) {\n      annotationOptions.push(__assign(__assign({\n        type: 'region',\n        top: false\n      }, defaultConfig_1.regionStyle[index].position), {\n        style: deepAssign({}, defaultConfig_1.regionStyle[index].style, regionStyle_1 === null || regionStyle_1 === void 0 ? void 0 : regionStyle_1[index])\n      }), __assign({\n        type: 'text',\n        top: true\n      }, deepAssign({}, defaultConfig_1.labelStyle[index], labels_1 === null || labels_1 === void 0 ? void 0 : labels_1[index])));\n    }); // 生成坐标轴\n\n    annotationOptions.push({\n      type: 'line',\n      top: false,\n      start: ['min', yBaseline],\n      end: ['max', yBaseline],\n      style: deepAssign({}, defaultConfig_1.lineStyle, lineStyle)\n    }, {\n      type: 'line',\n      top: false,\n      start: [xBaseline, 'min'],\n      end: [xBaseline, 'max'],\n      style: deepAssign({}, defaultConfig_1.lineStyle, lineStyle)\n    });\n  }\n\n  return flow(annotation(annotationOptions))(params);\n} // 趋势线\n\n\nfunction regressionLine(params) {\n  var options = params.options,\n      chart = params.chart;\n  var regressionLine = options.regressionLine;\n\n  if (regressionLine) {\n    var style_1 = regressionLine.style,\n        _a = regressionLine.top,\n        top_1 = _a === void 0 ? false : _a;\n    var defaultStyle_1 = {\n      stroke: '#9ba29a',\n      lineWidth: 2,\n      opacity: 0.5\n    };\n    chart.annotation().shape({\n      top: top_1,\n      render: function (container, view) {\n        var group = container.addGroup({\n          id: chart.id + \"-regression-line\",\n          name: 'regression-line-group'\n        });\n        var path = getPath({\n          view: view,\n          options: options\n        });\n        group.addShape('path', {\n          name: 'regression-line',\n          attrs: __assign(__assign({\n            path: path\n          }, defaultStyle_1), style_1)\n        });\n      }\n    });\n  }\n\n  return params;\n}\n/**\r\n * tooltip 配置\r\n * @param params\r\n */\n\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip) {\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n/**\r\n * 散点图适配器\r\n * @param chart\r\n * @param options\r\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, axis, legend, tooltip, label, // 需要在 interaction 前面\n  brushInteraction, interaction, scatterAnnotation, animation, theme, regressionLine)(params);\n}","map":{"version":3,"sources":["../../../src/plots/scatter/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNumber } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, pick } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { findGeometry, transformLabel } from '../../utils';\nimport { getQuadrantDefaultConfig, getPath, getMeta } from './util';\nimport { ScatterOptions } from './types';\n\n/**\n * 散点图默认美观\n * ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param params\n * @returns params\n */\nexport function transformOptions(options: ScatterOptions): ScatterOptions {\n  const { data = [], xField, yField } = options;\n\n  if (data.length) {\n    // x y 字段知否只有一个值，如果只有一个值，则进行优化\n    let isOneX = true;\n    let isOneY = true;\n\n    let prev = data[0];\n    let curr;\n\n    for (let i = 1; i < data.length; i++) {\n      curr = data[i];\n\n      if (prev[xField] !== curr[xField]) {\n        isOneX = false;\n      }\n\n      if (prev[yField] !== curr[yField]) {\n        isOneY = false;\n      }\n\n      // 如果都不是 oneValue，那么可提前跳出循环\n      if (!isOneX && !isOneY) {\n        break;\n      }\n\n      prev = curr;\n    }\n\n    const keys = [];\n    isOneX && keys.push(xField);\n    isOneY && keys.push(yField);\n\n    const meta = pick(getMeta(options), keys);\n\n    return deepAssign({}, options, { meta });\n  }\n\n  return options;\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { data, type, color, shape, pointStyle, shapeField, colorField, xField, yField, sizeField } = options;\n  let { size } = options;\n\n  let { tooltip } = options;\n\n  if (sizeField) {\n    if (!size) {\n      size = [2, 8];\n    }\n    if (isNumber(size)) {\n      size = [size, size];\n    }\n  }\n\n  if (tooltip && !tooltip.fields) {\n    tooltip = {\n      ...tooltip,\n      fields: [xField, yField, colorField, sizeField, shapeField],\n    };\n  }\n  // 数据\n  chart.data(data);\n\n  // geometry\n  point(\n    deepAssign({}, params, {\n      options: {\n        seriesField: colorField,\n        point: {\n          color,\n          shape,\n          size,\n          style: pointStyle,\n        },\n        tooltip,\n      },\n    })\n  );\n\n  const geometry = findGeometry(chart, 'point');\n\n  // 数据调整\n  if (type) {\n    geometry.adjust(type);\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  const newOptions = transformOptions(options);\n  return flow(\n    scale({\n      [xField]: xAxis,\n      [yField]: yAxis,\n    })\n  )(deepAssign({}, params, { options: newOptions }));\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  chart.axis(xField, xAxis);\n  chart.axis(yField, yAxis);\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nfunction legend(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { legend, colorField, shapeField, sizeField, shapeLegend, sizeLegend } = options;\n\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n  const showLegend = legend !== false;\n\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  }\n\n  // 优先取 shapeLegend, 否则取 legend\n  if (shapeField) {\n    if (shapeLegend) {\n      chart.legend(shapeField, shapeLegend);\n    } else {\n      chart.legend(shapeField, shapeLegend === false ? false : legend);\n    }\n  }\n\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend ? sizeLegend : false);\n  }\n\n  /** 默认不展示 shape 图例，当 shapeLegend 为 undefined 也不展示图例 */\n  /** 默认没有 sizeField，则隐藏连续图例 */\n  if (!showLegend && !shapeLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { label, yField } = options;\n\n  const scatterGeometry = findGeometry(chart, 'point');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    scatterGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    scatterGeometry.label({\n      fields: [yField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * annotation 配置\n * - 特殊 annotation: quadrant(四象限)\n * @param params\n */\nfunction scatterAnnotation(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { options } = params;\n  const { quadrant } = options;\n\n  const annotationOptions = [];\n\n  if (quadrant) {\n    const { xBaseline = 0, yBaseline = 0, labels, regionStyle, lineStyle } = quadrant;\n    const defaultConfig = getQuadrantDefaultConfig(xBaseline, yBaseline);\n    // 仅支持四象限\n    const quadrants = new Array(4).join(',').split(',');\n    quadrants.forEach((_: string, index: number) => {\n      annotationOptions.push(\n        {\n          type: 'region',\n          top: false,\n          ...defaultConfig.regionStyle[index].position,\n          style: deepAssign({}, defaultConfig.regionStyle[index].style, regionStyle?.[index]),\n        },\n        {\n          type: 'text',\n          top: true,\n          ...deepAssign({}, defaultConfig.labelStyle[index], labels?.[index]),\n        }\n      );\n    });\n    // 生成坐标轴\n    annotationOptions.push(\n      {\n        type: 'line',\n        top: false,\n        start: ['min', yBaseline],\n        end: ['max', yBaseline],\n        style: deepAssign({}, defaultConfig.lineStyle, lineStyle),\n      },\n      {\n        type: 'line',\n        top: false,\n        start: [xBaseline, 'min'],\n        end: [xBaseline, 'max'],\n        style: deepAssign({}, defaultConfig.lineStyle, lineStyle),\n      }\n    );\n  }\n\n  return flow(annotation(annotationOptions))(params);\n}\n\n// 趋势线\nfunction regressionLine(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { options, chart } = params;\n  const { regressionLine } = options;\n  if (regressionLine) {\n    const { style, top = false } = regressionLine;\n    const defaultStyle = {\n      stroke: '#9ba29a',\n      lineWidth: 2,\n      opacity: 0.5,\n    };\n    chart.annotation().shape({\n      top,\n      render: (container, view) => {\n        const group = container.addGroup({\n          id: `${chart.id}-regression-line`,\n          name: 'regression-line-group',\n        });\n        const path = getPath({\n          view,\n          options,\n        });\n        group.addShape('path', {\n          name: 'regression-line',\n          attrs: {\n            path,\n            ...defaultStyle,\n            ...style,\n          },\n        });\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * tooltip 配置\n * @param params\n */\nexport function tooltip(params: Params<ScatterOptions>): Params<ScatterOptions> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip) {\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n\n/**\n * 散点图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ScatterOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    meta,\n    axis,\n    legend,\n    tooltip,\n    label,\n    interaction,\n    scatterAnnotation,\n    animation,\n    theme,\n    regressionLine\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}