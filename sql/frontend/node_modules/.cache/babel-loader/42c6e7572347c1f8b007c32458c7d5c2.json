{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeSensor = exports.getSensor = void 0;\n\nvar _id = _interopRequireDefault(require(\"./id\"));\n\nvar _sensors = require(\"./sensors\");\n\nvar _constant = require(\"./constant\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\r\n * Created by hustcc on 18/6/9.\r\n * Contract: i@hust.cc\r\n */\n\n/**\r\n * all the sensor objects.\r\n * sensor pool\r\n */\n\n\nvar Sensors = {};\n/**\r\n * get one sensor\r\n * @param element\r\n * @returns {*}\r\n */\n\nvar getSensor = function getSensor(element) {\n  var sensorId = element.getAttribute(_constant.SizeSensorId); // 1. if the sensor exists, then use it\n\n  if (sensorId && Sensors[sensorId]) {\n    return Sensors[sensorId];\n  } // 2. not exist, then create one\n\n\n  var newId = (0, _id[\"default\"])();\n  element.setAttribute(_constant.SizeSensorId, newId);\n  var sensor = (0, _sensors.createSensor)(element); // add sensor into pool\n\n  Sensors[newId] = sensor;\n  return sensor;\n};\n/**\r\n * 移除 sensor\r\n * @param sensor\r\n */\n\n\nexports.getSensor = getSensor;\n\nvar removeSensor = function removeSensor(sensor) {\n  var sensorId = sensor.element.getAttribute(_constant.SizeSensorId); // remove attribute\n\n  sensor.element.removeAttribute(_constant.SizeSensorId); // remove event, dom of the sensor used\n\n  sensor.destroy(); // exist, then remove from pool\n\n  if (sensorId && Sensors[sensorId]) {\n    delete Sensors[sensorId];\n  }\n};\n\nexports.removeSensor = removeSensor;","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/size-sensor/lib/sensorPool.js"],"names":["Object","defineProperty","exports","value","removeSensor","getSensor","_id","_interopRequireDefault","require","_sensors","_constant","obj","__esModule","Sensors","element","sensorId","getAttribute","SizeSensorId","newId","setAttribute","sensor","createSensor","removeAttribute","destroy"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,SAAR,GAAoB,KAAK,CAAhD;;AAEA,IAAIC,GAAG,GAAGC,sBAAsB,CAACC,OAAO,CAAC,MAAD,CAAR,CAAhC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,IAAIE,OAAO,GAAG,EAAd;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIR,SAAS,GAAG,SAASA,SAAT,CAAmBS,OAAnB,EAA4B;AAC1C,MAAIC,QAAQ,GAAGD,OAAO,CAACE,YAAR,CAAqBN,SAAS,CAACO,YAA/B,CAAf,CAD0C,CACmB;;AAE7D,MAAIF,QAAQ,IAAIF,OAAO,CAACE,QAAD,CAAvB,EAAmC;AACjC,WAAOF,OAAO,CAACE,QAAD,CAAd;AACD,GALyC,CAKxC;;;AAGF,MAAIG,KAAK,GAAG,CAAC,GAAGZ,GAAG,CAAC,SAAD,CAAP,GAAZ;AACAQ,EAAAA,OAAO,CAACK,YAAR,CAAqBT,SAAS,CAACO,YAA/B,EAA6CC,KAA7C;AACA,MAAIE,MAAM,GAAG,CAAC,GAAGX,QAAQ,CAACY,YAAb,EAA2BP,OAA3B,CAAb,CAV0C,CAUQ;;AAElDD,EAAAA,OAAO,CAACK,KAAD,CAAP,GAAiBE,MAAjB;AACA,SAAOA,MAAP;AACD,CAdD;AAeA;AACA;AACA;AACA;;;AAGAlB,OAAO,CAACG,SAAR,GAAoBA,SAApB;;AAEA,IAAID,YAAY,GAAG,SAASA,YAAT,CAAsBgB,MAAtB,EAA8B;AAC/C,MAAIL,QAAQ,GAAGK,MAAM,CAACN,OAAP,CAAeE,YAAf,CAA4BN,SAAS,CAACO,YAAtC,CAAf,CAD+C,CACqB;;AAEpEG,EAAAA,MAAM,CAACN,OAAP,CAAeQ,eAAf,CAA+BZ,SAAS,CAACO,YAAzC,EAH+C,CAGS;;AAExDG,EAAAA,MAAM,CAACG,OAAP,GAL+C,CAK7B;;AAElB,MAAIR,QAAQ,IAAIF,OAAO,CAACE,QAAD,CAAvB,EAAmC;AACjC,WAAOF,OAAO,CAACE,QAAD,CAAd;AACD;AACF,CAVD;;AAYAb,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.removeSensor = exports.getSensor = void 0;\r\n\r\nvar _id = _interopRequireDefault(require(\"./id\"));\r\n\r\nvar _sensors = require(\"./sensors\");\r\n\r\nvar _constant = require(\"./constant\");\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\r\n\r\n/**\r\n * Created by hustcc on 18/6/9.\r\n * Contract: i@hust.cc\r\n */\r\n\r\n/**\r\n * all the sensor objects.\r\n * sensor pool\r\n */\r\nvar Sensors = {};\r\n/**\r\n * get one sensor\r\n * @param element\r\n * @returns {*}\r\n */\r\n\r\nvar getSensor = function getSensor(element) {\r\n  var sensorId = element.getAttribute(_constant.SizeSensorId); // 1. if the sensor exists, then use it\r\n\r\n  if (sensorId && Sensors[sensorId]) {\r\n    return Sensors[sensorId];\r\n  } // 2. not exist, then create one\r\n\r\n\r\n  var newId = (0, _id[\"default\"])();\r\n  element.setAttribute(_constant.SizeSensorId, newId);\r\n  var sensor = (0, _sensors.createSensor)(element); // add sensor into pool\r\n\r\n  Sensors[newId] = sensor;\r\n  return sensor;\r\n};\r\n/**\r\n * 移除 sensor\r\n * @param sensor\r\n */\r\n\r\n\r\nexports.getSensor = getSensor;\r\n\r\nvar removeSensor = function removeSensor(sensor) {\r\n  var sensorId = sensor.element.getAttribute(_constant.SizeSensorId); // remove attribute\r\n\r\n  sensor.element.removeAttribute(_constant.SizeSensorId); // remove event, dom of the sensor used\r\n\r\n  sensor.destroy(); // exist, then remove from pool\r\n\r\n  if (sensorId && Sensors[sensorId]) {\r\n    delete Sensors[sensorId];\r\n  }\r\n};\r\n\r\nexports.removeSensor = removeSensor;"]},"metadata":{},"sourceType":"script"}