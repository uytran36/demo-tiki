{"ast":null,"code":"var _jsxFileName = \"D:\\\\LECONS-KHTN\\\\CSDL Avanc\\xE9\\\\TH\\\\sqlindex2\\\\sql\\\\frontend\\\\src\\\\pages\\\\nhaban\\\\components\\\\dangKy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Layout, Form, Input, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst residences = [{\n  value: \"zhejiang\",\n  label: \"Zhejiang\",\n  children: [{\n    value: \"hangzhou\",\n    label: \"Hangzhou\",\n    children: [{\n      value: \"xihu\",\n      label: \"West Lake\"\n    }]\n  }]\n}, {\n  value: \"jiangsu\",\n  label: \"Jiangsu\",\n  children: [{\n    value: \"nanjing\",\n    label: \"Nanjing\",\n    children: [{\n      value: \"zhonghuamen\",\n      label: \"Zhong Hua Men\"\n    }]\n  }]\n}];\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nconst DangKy = () => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    console.log(\"Received values of form: \", values);\n  };\n\n  const prefixSelector = /*#__PURE__*/_jsxDEV(Form.Item, {\n    name: \"prefix\",\n    noStyle: true,\n    children: /*#__PURE__*/_jsxDEV(Select, {\n      style: {\n        width: 70\n      },\n      children: [/*#__PURE__*/_jsxDEV(Option, {\n        value: \"86\",\n        children: \"+86\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Option, {\n        value: \"87\",\n        children: \"+87\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n\n  const onWebsiteChange = value => {\n    if (!value) {\n      setAutoCompleteResult([]);\n    } else {\n      setAutoCompleteResult([\".com\", \".org\", \".net\"].map(domain => `${value}${domain}`));\n    }\n  };\n\n  const websiteOptions = autoCompleteResult.map(website => ({\n    label: website,\n    value: website\n  }));\n  return /*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 7\n  }, this);\n};\n\n_s(DangKy, \"TY8+cMsRaO9bLWjs4W3ddTl9qnU=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = DangKy;\nexport default DangKy;\n\nvar _c;\n\n$RefreshReg$(_c, \"DangKy\");","map":{"version":3,"sources":["D:/LECONS-KHTN/CSDL AvancÃ©/TH/sqlindex2/sql/frontend/src/pages/nhaban/components/dangKy.js"],"names":["React","useState","Layout","Form","Input","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","residences","value","label","children","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","DangKy","form","useForm","onFinish","values","console","log","prefixSelector","width","autoCompleteResult","setAutoCompleteResult","onWebsiteChange","map","domain","websiteOptions","website"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SACIC,MADJ,EAEEC,IAFF,EAGEC,KAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,GANF,EAOEC,GAPF,EAQEC,QARF,EASEC,MATF,EAUEC,YAVF,QAWO,MAXP;;AAYA,MAAM;AAAEC,EAAAA;AAAF,IAAaN,MAAnB;AACA,MAAMO,UAAU,GAAG,CACjB;AACEC,EAAAA,KAAK,EAAE,UADT;AAEEC,EAAAA,KAAK,EAAE,UAFT;AAGEC,EAAAA,QAAQ,EAAE,CACR;AACEF,IAAAA,KAAK,EAAE,UADT;AAEEC,IAAAA,KAAK,EAAE,UAFT;AAGEC,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAE,MADT;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADQ;AAHZ,GADQ;AAHZ,CADiB,EAiBjB;AACED,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,QAAQ,EAAE,CACR;AACEF,IAAAA,KAAK,EAAE,SADT;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGEC,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAE,aADT;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADQ;AAHZ,GADQ;AAHZ,CAjBiB,CAAnB;AAkCA,MAAME,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE;AADJ,KADI;AAIRC,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAE;AADJ;AAJI,GADW;AASrBE,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE;AADJ,KADM;AAIVC,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAE;AADJ;AAJM;AATS,CAAvB;AAkBA,MAAMG,kBAAkB,GAAG;AACzBD,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAE,EADJ;AAEFI,MAAAA,MAAM,EAAE;AAFN,KADM;AAKVH,IAAAA,EAAE,EAAE;AACFD,MAAAA,IAAI,EAAE,EADJ;AAEFI,MAAAA,MAAM,EAAE;AAFN;AALM;AADa,CAA3B;;AAaA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,IAASvB,IAAI,CAACwB,OAAL,EAAf;;AAEA,QAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,MAAzC;AACD,GAFD;;AAIA,QAAMG,cAAc,gBAClB,QAAC,IAAD,CAAM,IAAN;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,OAAO,MAAhC;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE;AADF,OADT;AAAA,8BAKE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8ClC,QAAQ,CAAC,EAAD,CAA5D;;AAEA,QAAMmC,eAAe,GAAItB,KAAD,IAAW;AACjC,QAAI,CAACA,KAAL,EAAY;AACVqB,MAAAA,qBAAqB,CAAC,EAAD,CAArB;AACD,KAFD,MAEO;AACLA,MAAAA,qBAAqB,CACnB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyBE,GAAzB,CAA8BC,MAAD,IAAa,GAAExB,KAAM,GAAEwB,MAAO,EAA3D,CADmB,CAArB;AAGD;AACF,GARD;;AAUA,QAAMC,cAAc,GAAGL,kBAAkB,CAACG,GAAnB,CAAwBG,OAAD,KAAc;AAC1DzB,IAAAA,KAAK,EAAEyB,OADmD;AAE1D1B,IAAAA,KAAK,EAAE0B;AAFmD,GAAd,CAAvB,CAAvB;AAIA,sBACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAOD,CA1CD;;GAAMf,M;UACWtB,IAAI,CAACwB,O;;;KADhBF,M;AA4CN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport {\r\n    Layout,\r\n  Form,\r\n  Input,\r\n  Cascader,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  Checkbox,\r\n  Button,\r\n  AutoComplete,\r\n} from \"antd\";\r\nconst { Option } = Select;\r\nconst residences = [\r\n  {\r\n    value: \"zhejiang\",\r\n    label: \"Zhejiang\",\r\n    children: [\r\n      {\r\n        value: \"hangzhou\",\r\n        label: \"Hangzhou\",\r\n        children: [\r\n          {\r\n            value: \"xihu\",\r\n            label: \"West Lake\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    value: \"jiangsu\",\r\n    label: \"Jiangsu\",\r\n    children: [\r\n      {\r\n        value: \"nanjing\",\r\n        label: \"Nanjing\",\r\n        children: [\r\n          {\r\n            value: \"zhonghuamen\",\r\n            label: \"Zhong Hua Men\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nconst DangKy = () => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = (values) => {\r\n    console.log(\"Received values of form: \", values);\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const [autoCompleteResult, setAutoCompleteResult] = useState([]);\r\n\r\n  const onWebsiteChange = (value) => {\r\n    if (!value) {\r\n      setAutoCompleteResult([]);\r\n    } else {\r\n      setAutoCompleteResult(\r\n        [\".com\", \".org\", \".net\"].map((domain) => `${value}${domain}`)\r\n      );\r\n    }\r\n  };\r\n\r\n  const websiteOptions = autoCompleteResult.map((website) => ({\r\n    label: website,\r\n    value: website,\r\n  }));\r\n  return (\r\n      <Layout>\r\n\r\n      </Layout>\r\n\r\n   \r\n  );\r\n};\r\n\r\nexport default DangKy;\r\n"]},"metadata":{},"sourceType":"module"}