{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { ext, mat3, vec3 } from '@antv/matrix-util';\nimport { assign } from '@antv/util';\n/**\r\n * Coordinate Base Class\r\n */\n\nvar Coordinate =\n/** @class */\nfunction () {\n  function Coordinate(cfg) {\n    // 自身属性\n    this.type = 'coordinate';\n    this.isRect = false;\n    this.isHelix = false;\n    this.isPolar = false;\n    this.isReflectX = false;\n    this.isReflectY = false;\n    var start = cfg.start,\n        end = cfg.end,\n        _a = cfg.matrix,\n        matrix = _a === void 0 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : _a,\n        _b = cfg.isTransposed,\n        isTransposed = _b === void 0 ? false : _b;\n    this.start = start;\n    this.end = end;\n    this.matrix = matrix;\n    this.originalMatrix = __spreadArray([], matrix); // 去除引用\n\n    this.isTransposed = isTransposed;\n  }\n  /**\r\n   * 初始化流程\r\n   */\n\n\n  Coordinate.prototype.initial = function () {\n    // center、width、height\n    this.center = {\n      x: (this.start.x + this.end.x) / 2,\n      y: (this.start.y + this.end.y) / 2\n    };\n    this.width = Math.abs(this.end.x - this.start.x);\n    this.height = Math.abs(this.end.y - this.start.y);\n  };\n  /**\r\n   * 更新配置\r\n   * @param cfg\r\n   */\n\n\n  Coordinate.prototype.update = function (cfg) {\n    assign(this, cfg);\n    this.initial();\n  };\n\n  Coordinate.prototype.convertDim = function (percent, dim) {\n    var _a;\n\n    var _b = this[dim],\n        start = _b.start,\n        end = _b.end; // 交换\n\n    if (this.isReflect(dim)) {\n      _a = [end, start], start = _a[0], end = _a[1];\n    }\n\n    return start + percent * (end - start);\n  };\n\n  Coordinate.prototype.invertDim = function (value, dim) {\n    var _a;\n\n    var _b = this[dim],\n        start = _b.start,\n        end = _b.end; // 交换\n\n    if (this.isReflect(dim)) {\n      _a = [end, start], start = _a[0], end = _a[1];\n    }\n\n    return (value - start) / (end - start);\n  };\n  /**\r\n   * 将坐标点进行矩阵变换\r\n   * @param x   对应 x 轴画布坐标\r\n   * @param y   对应 y 轴画布坐标\r\n   * @param tag 默认为 0，可取值 0, 1\r\n   * @return    返回变换后的三阶向量 [x, y, z]\r\n   */\n\n\n  Coordinate.prototype.applyMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n\n    var matrix = this.matrix;\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return vector;\n  };\n  /**\r\n   * 将坐标点进行矩阵逆变换\r\n   * @param x   对应 x 轴画布坐标\r\n   * @param y   对应 y 轴画布坐标\r\n   * @param tag 默认为 0，可取值 0, 1\r\n   * @return    返回矩阵逆变换后的三阶向量 [x, y, z]\r\n   */\n\n\n  Coordinate.prototype.invertMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n\n    var matrix = this.matrix;\n    var inverted = mat3.invert([0, 0, 0, 0, 0, 0, 0, 0, 0], matrix);\n    var vector = [x, y, tag];\n\n    if (inverted) {\n      // 如果为空则不进行矩阵变化，防止报错\n      vec3.transformMat3(vector, vector, inverted);\n    }\n\n    return vector;\n  };\n  /**\r\n   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\r\n   * @param point 归一化的坐标点\r\n   * @return      返回进行矩阵变换后的画布坐标\r\n   */\n\n\n  Coordinate.prototype.convert = function (point) {\n    var _a = this.convertPoint(point),\n        x = _a.x,\n        y = _a.y;\n\n    var vector = this.applyMatrix(x, y, 1);\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  };\n  /**\r\n   * 将进行过矩阵变换画布坐标转换为归一化坐标\r\n   * @param point 画布坐标\r\n   * @return      返回归一化的坐标点\r\n   */\n\n\n  Coordinate.prototype.invert = function (point) {\n    var vector = this.invertMatrix(point.x, point.y, 1);\n    return this.invertPoint({\n      x: vector[0],\n      y: vector[1]\n    });\n  };\n  /**\r\n   * 坐标系旋转变换\r\n   * @param  radian 旋转弧度\r\n   * @return        返回坐标系对象\r\n   */\n\n\n  Coordinate.prototype.rotate = function (radian) {\n    var matrix = this.matrix;\n    var center = this.center;\n    ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n    ext.leftRotate(matrix, matrix, radian);\n    ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\r\n   * 坐标系反射变换\r\n   * @param dim 反射维度\r\n   * @return    返回坐标系对象\r\n   */\n\n\n  Coordinate.prototype.reflect = function (dim) {\n    if (dim === 'x') {\n      this.isReflectX = !this.isReflectX;\n    } else {\n      this.isReflectY = !this.isReflectY;\n    }\n\n    return this;\n  };\n  /**\r\n   * 坐标系比例变换\r\n   * @param s1 x 方向缩放比例\r\n   * @param s2 y 方向缩放比例\r\n   * @return     返回坐标系对象\r\n   */\n\n\n  Coordinate.prototype.scale = function (s1, s2) {\n    var matrix = this.matrix;\n    var center = this.center;\n    ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n    ext.leftScale(matrix, matrix, [s1, s2]);\n    ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\r\n   * 坐标系平移变换\r\n   * @param x x 方向平移像素\r\n   * @param y y 方向平移像素\r\n   * @return    返回坐标系对象\r\n   */\n\n\n  Coordinate.prototype.translate = function (x, y) {\n    var matrix = this.matrix;\n    ext.leftTranslate(matrix, matrix, [x, y]);\n    return this;\n  };\n  /**\r\n   * 将坐标系 x y 两个轴进行转置\r\n   * @return 返回坐标系对象\r\n   */\n\n\n  Coordinate.prototype.transpose = function () {\n    this.isTransposed = !this.isTransposed;\n    return this;\n  };\n\n  Coordinate.prototype.getCenter = function () {\n    return this.center;\n  };\n\n  Coordinate.prototype.getWidth = function () {\n    return this.width;\n  };\n\n  Coordinate.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  Coordinate.prototype.getRadius = function () {\n    return this.radius;\n  };\n  /**\r\n   * whether has reflect\r\n   * @param dim\r\n   */\n\n\n  Coordinate.prototype.isReflect = function (dim) {\n    return dim === 'x' ? this.isReflectX : this.isReflectY;\n  };\n  /**\r\n   * 重置 matrix\r\n   * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\r\n   */\n\n\n  Coordinate.prototype.resetMatrix = function (matrix) {\n    // 去除引用关系\n    this.matrix = matrix ? matrix : __spreadArray([], this.originalMatrix);\n  };\n\n  return Coordinate;\n}();\n\nexport default Coordinate;","map":{"version":3,"sources":["../../src/coord/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __spreadArray } from \"tslib\";\r\nimport { ext, mat3, vec3 } from '@antv/matrix-util';\r\nimport { assign } from '@antv/util';\r\n/**\r\n * Coordinate Base Class\r\n */\r\nvar Coordinate = /** @class */ (function () {\r\n    function Coordinate(cfg) {\r\n        // 自身属性\r\n        this.type = 'coordinate';\r\n        this.isRect = false;\r\n        this.isHelix = false;\r\n        this.isPolar = false;\r\n        this.isReflectX = false;\r\n        this.isReflectY = false;\r\n        var start = cfg.start, end = cfg.end, _a = cfg.matrix, matrix = _a === void 0 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : _a, _b = cfg.isTransposed, isTransposed = _b === void 0 ? false : _b;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.matrix = matrix;\r\n        this.originalMatrix = __spreadArray([], matrix); // 去除引用\r\n        this.isTransposed = isTransposed;\r\n    }\r\n    /**\r\n     * 初始化流程\r\n     */\r\n    Coordinate.prototype.initial = function () {\r\n        // center、width、height\r\n        this.center = {\r\n            x: (this.start.x + this.end.x) / 2,\r\n            y: (this.start.y + this.end.y) / 2,\r\n        };\r\n        this.width = Math.abs(this.end.x - this.start.x);\r\n        this.height = Math.abs(this.end.y - this.start.y);\r\n    };\r\n    /**\r\n     * 更新配置\r\n     * @param cfg\r\n     */\r\n    Coordinate.prototype.update = function (cfg) {\r\n        assign(this, cfg);\r\n        this.initial();\r\n    };\r\n    Coordinate.prototype.convertDim = function (percent, dim) {\r\n        var _a;\r\n        var _b = this[dim], start = _b.start, end = _b.end;\r\n        // 交换\r\n        if (this.isReflect(dim)) {\r\n            _a = [end, start], start = _a[0], end = _a[1];\r\n        }\r\n        return start + percent * (end - start);\r\n    };\r\n    Coordinate.prototype.invertDim = function (value, dim) {\r\n        var _a;\r\n        var _b = this[dim], start = _b.start, end = _b.end;\r\n        // 交换\r\n        if (this.isReflect(dim)) {\r\n            _a = [end, start], start = _a[0], end = _a[1];\r\n        }\r\n        return (value - start) / (end - start);\r\n    };\r\n    /**\r\n     * 将坐标点进行矩阵变换\r\n     * @param x   对应 x 轴画布坐标\r\n     * @param y   对应 y 轴画布坐标\r\n     * @param tag 默认为 0，可取值 0, 1\r\n     * @return    返回变换后的三阶向量 [x, y, z]\r\n     */\r\n    Coordinate.prototype.applyMatrix = function (x, y, tag) {\r\n        if (tag === void 0) { tag = 0; }\r\n        var matrix = this.matrix;\r\n        var vector = [x, y, tag];\r\n        vec3.transformMat3(vector, vector, matrix);\r\n        return vector;\r\n    };\r\n    /**\r\n     * 将坐标点进行矩阵逆变换\r\n     * @param x   对应 x 轴画布坐标\r\n     * @param y   对应 y 轴画布坐标\r\n     * @param tag 默认为 0，可取值 0, 1\r\n     * @return    返回矩阵逆变换后的三阶向量 [x, y, z]\r\n     */\r\n    Coordinate.prototype.invertMatrix = function (x, y, tag) {\r\n        if (tag === void 0) { tag = 0; }\r\n        var matrix = this.matrix;\r\n        var inverted = mat3.invert([0, 0, 0, 0, 0, 0, 0, 0, 0], matrix);\r\n        var vector = [x, y, tag];\r\n        if (inverted) {\r\n            // 如果为空则不进行矩阵变化，防止报错\r\n            vec3.transformMat3(vector, vector, inverted);\r\n        }\r\n        return vector;\r\n    };\r\n    /**\r\n     * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\r\n     * @param point 归一化的坐标点\r\n     * @return      返回进行矩阵变换后的画布坐标\r\n     */\r\n    Coordinate.prototype.convert = function (point) {\r\n        var _a = this.convertPoint(point), x = _a.x, y = _a.y;\r\n        var vector = this.applyMatrix(x, y, 1);\r\n        return {\r\n            x: vector[0],\r\n            y: vector[1],\r\n        };\r\n    };\r\n    /**\r\n     * 将进行过矩阵变换画布坐标转换为归一化坐标\r\n     * @param point 画布坐标\r\n     * @return      返回归一化的坐标点\r\n     */\r\n    Coordinate.prototype.invert = function (point) {\r\n        var vector = this.invertMatrix(point.x, point.y, 1);\r\n        return this.invertPoint({\r\n            x: vector[0],\r\n            y: vector[1],\r\n        });\r\n    };\r\n    /**\r\n     * 坐标系旋转变换\r\n     * @param  radian 旋转弧度\r\n     * @return        返回坐标系对象\r\n     */\r\n    Coordinate.prototype.rotate = function (radian) {\r\n        var matrix = this.matrix;\r\n        var center = this.center;\r\n        ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\r\n        ext.leftRotate(matrix, matrix, radian);\r\n        ext.leftTranslate(matrix, matrix, [center.x, center.y]);\r\n        return this;\r\n    };\r\n    /**\r\n     * 坐标系反射变换\r\n     * @param dim 反射维度\r\n     * @return    返回坐标系对象\r\n     */\r\n    Coordinate.prototype.reflect = function (dim) {\r\n        if (dim === 'x') {\r\n            this.isReflectX = !this.isReflectX;\r\n        }\r\n        else {\r\n            this.isReflectY = !this.isReflectY;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 坐标系比例变换\r\n     * @param s1 x 方向缩放比例\r\n     * @param s2 y 方向缩放比例\r\n     * @return     返回坐标系对象\r\n     */\r\n    Coordinate.prototype.scale = function (s1, s2) {\r\n        var matrix = this.matrix;\r\n        var center = this.center;\r\n        ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\r\n        ext.leftScale(matrix, matrix, [s1, s2]);\r\n        ext.leftTranslate(matrix, matrix, [center.x, center.y]);\r\n        return this;\r\n    };\r\n    /**\r\n     * 坐标系平移变换\r\n     * @param x x 方向平移像素\r\n     * @param y y 方向平移像素\r\n     * @return    返回坐标系对象\r\n     */\r\n    Coordinate.prototype.translate = function (x, y) {\r\n        var matrix = this.matrix;\r\n        ext.leftTranslate(matrix, matrix, [x, y]);\r\n        return this;\r\n    };\r\n    /**\r\n     * 将坐标系 x y 两个轴进行转置\r\n     * @return 返回坐标系对象\r\n     */\r\n    Coordinate.prototype.transpose = function () {\r\n        this.isTransposed = !this.isTransposed;\r\n        return this;\r\n    };\r\n    Coordinate.prototype.getCenter = function () {\r\n        return this.center;\r\n    };\r\n    Coordinate.prototype.getWidth = function () {\r\n        return this.width;\r\n    };\r\n    Coordinate.prototype.getHeight = function () {\r\n        return this.height;\r\n    };\r\n    Coordinate.prototype.getRadius = function () {\r\n        return this.radius;\r\n    };\r\n    /**\r\n     * whether has reflect\r\n     * @param dim\r\n     */\r\n    Coordinate.prototype.isReflect = function (dim) {\r\n        return dim === 'x' ? this.isReflectX : this.isReflectY;\r\n    };\r\n    /**\r\n     * 重置 matrix\r\n     * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\r\n     */\r\n    Coordinate.prototype.resetMatrix = function (matrix) {\r\n        // 去除引用关系\r\n        this.matrix = matrix ? matrix : __spreadArray([], this.originalMatrix);\r\n    };\r\n    return Coordinate;\r\n}());\r\nexport default Coordinate;\r\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}