{"ast":null,"code":"/**\r\n * @fileOverview random layout\r\n * @author shiwu.wyy@antfin.com\r\n */\nimport { Base } from \"./base\";\n/**\r\n * 随机布局\r\n */\n\nexport class RandomLayout extends Base {\n  constructor(options) {\n    super();\n    /** 布局中心 */\n\n    this.center = [0, 0];\n    /** 宽度 */\n\n    this.width = 300;\n    /** 高度 */\n\n    this.height = 300;\n    this.nodes = [];\n    this.edges = [];\n    /** 迭代结束的回调函数 */\n\n    this.onLayoutEnd = () => {};\n\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      center: [0, 0],\n      width: 300,\n      height: 300\n    };\n  }\n  /**\r\n   * 执行布局\r\n   */\n\n\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const layoutScale = 0.9;\n    const center = self.center;\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n\n    if (nodes) {\n      nodes.forEach(node => {\n        node.x = (Math.random() - 0.5) * layoutScale * self.width + center[0];\n        node.y = (Math.random() - 0.5) * layoutScale * self.height + center[1];\n      });\n    }\n\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes,\n      edges: this.edges\n    };\n  }\n\n  getType() {\n    return \"random\";\n  }\n\n}","map":{"version":3,"sources":["../../src/layout/random.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAGH,SAAS,IAAT,QAAqB,QAArB;AAEA;;AAEG;;AACH,OAAM,MAAO,YAAP,SAA4B,IAA5B,CAAgC;AAiBpC,EAAA,WAAA,CAAY,OAAZ,EAAyC;AACvC;AAjBF;;AACO,SAAA,MAAA,GAAqB,CAAC,CAAD,EAAI,CAAJ,CAArB;AAEP;;AACO,SAAA,KAAA,GAAgB,GAAhB;AAEP;;AACO,SAAA,MAAA,GAAiB,GAAjB;AAEA,SAAA,KAAA,GAAmB,EAAnB;AAEA,SAAA,KAAA,GAAgB,EAAhB;AAEP;;AACO,SAAA,WAAA,GAA0B,MAAK,CAAG,CAAlC;;AAIL,SAAK,SAAL,CAAe,OAAf;AACD;;AAEM,EAAA,aAAa,GAAA;AAClB,WAAO;AACL,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CADH;AAEL,MAAA,KAAK,EAAE,GAFF;AAGL,MAAA,MAAM,EAAE;AAHH,KAAP;AAKD;AAED;;AAEG;;;AACI,EAAA,OAAO,GAAA;AACZ,UAAM,IAAI,GAAG,IAAb;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAnB;AACA,UAAM,WAAW,GAAG,GAApB;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,MAApB;;AACA,QAAI,CAAC,IAAI,CAAC,KAAN,IAAe,OAAO,MAAP,KAAkB,WAArC,EAAkD;AAChD,MAAA,IAAI,CAAC,KAAL,GAAa,MAAM,CAAC,UAApB;AACD;;AACD,QAAI,CAAC,IAAI,CAAC,MAAN,IAAgB,OAAO,MAAP,KAAkB,WAAtC,EAAmD;AACjD,MAAA,IAAI,CAAC,MAAL,GAAc,MAAM,CAAC,WAArB;AACD;;AAED,QAAI,KAAJ,EAAW;AACT,MAAA,KAAK,CAAC,OAAN,CAAe,IAAD,IAAS;AACrB,QAAA,IAAI,CAAC,CAAL,GAAS,CAAC,IAAI,CAAC,MAAL,KAAgB,GAAjB,IAAwB,WAAxB,GAAsC,IAAI,CAAC,KAA3C,GAAmD,MAAM,CAAC,CAAD,CAAlE;AACA,QAAA,IAAI,CAAC,CAAL,GAAS,CAAC,IAAI,CAAC,MAAL,KAAgB,GAAjB,IAAwB,WAAxB,GAAsC,IAAI,CAAC,MAA3C,GAAoD,MAAM,CAAC,CAAD,CAAnE;AACD,OAHD;AAID;;AAED,QAAI,IAAI,CAAC,WAAT,EAAsB,IAAI,CAAC,WAAL;AAEtB,WAAO;AACL,MAAA,KADK;AAEL,MAAA,KAAK,EAAE,KAAK;AAFP,KAAP;AAID;;AAEM,EAAA,OAAO,GAAA;AACZ,WAAO,QAAP;AACD;;AA9DmC","sourceRoot":"","sourcesContent":["/**\r\n * @fileOverview random layout\r\n * @author shiwu.wyy@antfin.com\r\n */\r\nimport { Base } from \"./base\";\r\n/**\r\n * 随机布局\r\n */\r\nexport class RandomLayout extends Base {\r\n    constructor(options) {\r\n        super();\r\n        /** 布局中心 */\r\n        this.center = [0, 0];\r\n        /** 宽度 */\r\n        this.width = 300;\r\n        /** 高度 */\r\n        this.height = 300;\r\n        this.nodes = [];\r\n        this.edges = [];\r\n        /** 迭代结束的回调函数 */\r\n        this.onLayoutEnd = () => { };\r\n        this.updateCfg(options);\r\n    }\r\n    getDefaultCfg() {\r\n        return {\r\n            center: [0, 0],\r\n            width: 300,\r\n            height: 300\r\n        };\r\n    }\r\n    /**\r\n     * 执行布局\r\n     */\r\n    execute() {\r\n        const self = this;\r\n        const nodes = self.nodes;\r\n        const layoutScale = 0.9;\r\n        const center = self.center;\r\n        if (!self.width && typeof window !== \"undefined\") {\r\n            self.width = window.innerWidth;\r\n        }\r\n        if (!self.height && typeof window !== \"undefined\") {\r\n            self.height = window.innerHeight;\r\n        }\r\n        if (nodes) {\r\n            nodes.forEach((node) => {\r\n                node.x = (Math.random() - 0.5) * layoutScale * self.width + center[0];\r\n                node.y = (Math.random() - 0.5) * layoutScale * self.height + center[1];\r\n            });\r\n        }\r\n        if (self.onLayoutEnd)\r\n            self.onLayoutEnd();\r\n        return {\r\n            nodes,\r\n            edges: this.edges\r\n        };\r\n    }\r\n    getType() {\r\n        return \"random\";\r\n    }\r\n}\r\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"module"}