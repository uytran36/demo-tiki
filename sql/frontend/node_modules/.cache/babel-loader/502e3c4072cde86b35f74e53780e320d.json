{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\nvar STATUS_UPDATE = 'update_status';\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\n\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\n\nvar GroupComponent =\n/** @class */\nfunction (_super) {\n  __extends(GroupComponent, _super);\n\n  function GroupComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GroupComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      container: null,\n\n      /**\r\n       * @private\r\n       * 缓存图形的 Map\r\n       */\n      shapesMap: {},\n      group: null,\n      capture: true,\n\n      /**\r\n       * @private 组件或者图形是否允许注册\r\n       * @type {false}\r\n       */\n      isRegister: false,\n\n      /**\r\n       * @private 是否正在更新\r\n       * @type {false}\r\n       */\n      isUpdating: false,\n\n      /**\r\n       * @private\r\n       * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\r\n       */\n      isInit: true\n    });\n  };\n\n  GroupComponent.prototype.remove = function () {\n    this.clear();\n    var group = this.get('group');\n    group.remove();\n  };\n\n  GroupComponent.prototype.clear = function () {\n    var group = this.get('group');\n    group.clear();\n    this.set('shapesMap', {});\n    this.clearOffScreenCache();\n    this.set('isInit', true);\n  };\n\n  GroupComponent.prototype.getChildComponentById = function (id) {\n    var group = this.getElementById(id);\n    var inst = group && group.get('component');\n    return inst;\n  };\n\n  GroupComponent.prototype.getElementById = function (id) {\n    return this.get('shapesMap')[id];\n  };\n\n  GroupComponent.prototype.getElementByLocalId = function (localId) {\n    var id = this.getElementId(localId);\n    return this.getElementById(id);\n  };\n\n  GroupComponent.prototype.getElementsByName = function (name) {\n    var rst = [];\n    each(this.get('shapesMap'), function (elem) {\n      if (elem.get('name') === name) {\n        rst.push(elem);\n      }\n    });\n    return rst;\n  };\n\n  GroupComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  GroupComponent.prototype.updateInner = function (cfg) {\n    // this.updateInner();\n    // this.set('isUpdating', false);\n    this.offScreenRender();\n\n    if (this.get('updateAutoRender')) {\n      this.render();\n    }\n  };\n\n  GroupComponent.prototype.render = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n\n    if (!offScreenGroup) {\n      offScreenGroup = this.offScreenRender();\n    }\n\n    var group = this.get('group');\n    this.updateElements(offScreenGroup, group);\n    this.deleteElements();\n    this.applyOffset();\n\n    if (!this.get('eventInitted')) {\n      this.initEvent();\n      this.set('eventInitted', true);\n    }\n\n    this.set('isInit', false);\n  };\n\n  GroupComponent.prototype.show = function () {\n    var group = this.get('group');\n    group.show();\n    this.set('visible', true);\n  };\n\n  GroupComponent.prototype.hide = function () {\n    var group = this.get('group');\n    group.hide();\n    this.set('visible', false);\n  };\n\n  GroupComponent.prototype.setCapture = function (capture) {\n    var group = this.get('group');\n    group.set('capture', capture);\n    this.set('capture', capture);\n  };\n\n  GroupComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.remove();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  GroupComponent.prototype.getBBox = function () {\n    return this.get('group').getCanvasBBox();\n  };\n\n  GroupComponent.prototype.getLayoutBBox = function () {\n    var group = this.get('group'); // 防止被 clear 了，offScreenBBox 不存在\n\n    var bbox = this.getInnerLayoutBBox();\n    var matrix = group.getTotalMatrix();\n\n    if (matrix) {\n      bbox = applyMatrix2BBox(matrix, bbox);\n    }\n\n    return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n  }; // 复写 on, off, emit 透传到 group\n\n\n  GroupComponent.prototype.on = function (evt, callback, once) {\n    var group = this.get('group');\n    group.on(evt, callback, once);\n    return this;\n  };\n\n  GroupComponent.prototype.off = function (evt, callback) {\n    var group = this.get('group');\n    group && group.off(evt, callback);\n    return this;\n  };\n\n  GroupComponent.prototype.emit = function (eventName, eventObject) {\n    var group = this.get('group');\n    group.emit(eventName, eventObject);\n  };\n\n  GroupComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n\n    if (!this.get('group')) {\n      this.initGroup();\n    }\n\n    this.offScreenRender(); // 绘制离屏 group\n  }; // 获取组件内部布局占的包围盒\n\n\n  GroupComponent.prototype.getInnerLayoutBBox = function () {\n    return this.get('offScreenBBox') || this.get('group').getBBox();\n  }; // 抛出委托对象\n\n\n  GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\n    var group = this.get('group');\n    eventObject.target = group;\n    group.emit(eventName, eventObject);\n    propagationDelegate(group, eventName, eventObject);\n  }; // 创建离屏的 group ,不添加在 canvas 中\n\n\n  GroupComponent.prototype.createOffScreenGroup = function () {\n    var group = this.get('group');\n    var GroupClass = group.getGroupBase(); // 获取分组的构造函数\n\n    var newGroup = new GroupClass({\n      delegateObject: this.getDelegateObject()\n    });\n    return newGroup;\n  }; // 应用 offset\n\n\n  GroupComponent.prototype.applyOffset = function () {\n    var offsetX = this.get('offsetX');\n    var offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: offsetX,\n      y: offsetY\n    });\n  };\n\n  GroupComponent.prototype.initGroup = function () {\n    var container = this.get('container');\n    this.set('group', container.addGroup({\n      id: this.get('id'),\n      name: this.get('name'),\n      capture: this.get('capture'),\n      visible: this.get('visible'),\n      isComponent: true,\n      component: this,\n      delegateObject: this.getDelegateObject()\n    }));\n  }; // 离屏渲染\n\n\n  GroupComponent.prototype.offScreenRender = function () {\n    this.clearOffScreenCache();\n    var offScreenGroup = this.createOffScreenGroup();\n    this.renderInner(offScreenGroup);\n    this.set('offScreenGroup', offScreenGroup); // 包含包围盒的 bbox\n\n    this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n    return offScreenGroup;\n  };\n  /**\r\n   * @protected\r\n   * 在组件上添加分组，主要解决 isReigeter 的问题\r\n   * @param {IGroup} parent 父元素\r\n   * @param {object} cfg    分组的配置项\r\n   */\n\n\n  GroupComponent.prototype.addGroup = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var group = parent.addGroup(cfg);\n\n    if (this.get('isRegister')) {\n      this.registerElement(group);\n    }\n\n    return group;\n  };\n  /**\r\n   * @protected\r\n   * 在组件上添加图形，主要解决 isReigeter 的问题\r\n   * @param {IGroup} parent 父元素\r\n   * @param {object} cfg    分组的配置项\r\n   */\n\n\n  GroupComponent.prototype.addShape = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var shape = parent.addShape(cfg);\n\n    if (this.get('isRegister')) {\n      this.registerElement(shape);\n    }\n\n    return shape;\n  };\n  /**\r\n   * 在组件上添加子组件\r\n   *\r\n   * @param parent 父元素\r\n   * @param cfg 子组件配置项\r\n   */\n\n\n  GroupComponent.prototype.addComponent = function (parent, cfg) {\n    var id = cfg.id,\n        Ctor = cfg.component,\n        restCfg = __rest(cfg, [\"id\", \"component\"]); // @ts-ignore\n\n\n    var inst = new Ctor(__assign(__assign({}, restCfg), {\n      id: id,\n      container: parent,\n      updateAutoRender: this.get('updateAutoRender')\n    }));\n    inst.init();\n    inst.render();\n\n    if (this.get('isRegister')) {\n      this.registerElement(inst.get('group'));\n    }\n\n    return inst;\n  };\n\n  GroupComponent.prototype.initEvent = function () {};\n\n  GroupComponent.prototype.removeEvent = function () {\n    var group = this.get('group');\n    group.off();\n  };\n\n  GroupComponent.prototype.getElementId = function (localId) {\n    var id = this.get('id'); // 组件的 Id\n\n    var name = this.get('name'); // 组件的名称\n\n    return id + \"-\" + name + \"-\" + localId;\n  };\n\n  GroupComponent.prototype.registerElement = function (element) {\n    var id = element.get('id');\n    this.get('shapesMap')[id] = element;\n  };\n\n  GroupComponent.prototype.unregisterElement = function (element) {\n    var id = element.get('id');\n    delete this.get('shapesMap')[id];\n  }; // 移动元素\n\n\n  GroupComponent.prototype.moveElementTo = function (element, point) {\n    var matrix = getMatrixByTranslate(point);\n    element.attr('matrix', matrix);\n  };\n  /**\r\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\r\n   * @protected\r\n   * @param {string} elmentName 图形元素名称\r\n   * @param {IElement} newElement  新的图形元素\r\n   * @param {object} animateCfg 动画的配置项\r\n   */\n\n\n  GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\n    // 缓存透明度\n    var originOpacity = newElement.attr('opacity');\n\n    if (isNil(originOpacity)) {\n      originOpacity = 1;\n    }\n\n    newElement.attr('opacity', 0);\n    newElement.animate({\n      opacity: originOpacity\n    }, animateCfg);\n  };\n  /**\r\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\r\n   * @protected\r\n   * @param {string} elmentName 图形元素名称\r\n   * @param {IElement} originElement 要删除的图形元素\r\n   * @param {object} animateCfg 动画的配置项\r\n   */\n\n\n  GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\n    originElement.animate({\n      opacity: 0\n    }, animateCfg);\n  };\n  /**\r\n   * 图形元素的更新动画\r\n   * @param {string} elmentName 图形元素名称\r\n   * @param {IElement} originElement 现有的图形元素\r\n   * @param {object} newAttrs  新的图形元素\r\n   * @param {object} animateCfg 动画的配置项\r\n   */\n\n\n  GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\n    originElement.animate(newAttrs, animateCfg);\n  }; // 更新组件的图形\n\n\n  GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\n    var _this = this;\n\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n\n    var preElement; // 前面已经匹配到的图形元素，用于\n\n    each(children, function (element) {\n      var elementId = element.get('id');\n\n      var originElement = _this.getElementById(elementId);\n\n      var elementName = element.get('name');\n\n      if (originElement) {\n        if (element.get('isComponent')) {\n          // 嵌套子组件更新\n          var childComponent = element.get('component');\n          var origChildComponent = originElement.get('component');\n          var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n          origChildComponent.update(newCfg);\n          originElement.set(STATUS_UPDATE, 'update');\n        } else {\n          var replaceAttrs = _this.getReplaceAttrs(originElement, element); // 更新\n\n\n          if (animate && animateOption.update) {\n            // 没有动画\n            _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n          } else {\n            // originElement.attrs = replaceAttrs; // 直接替换\n            originElement.attr(replaceAttrs);\n          } // 如果是分组，则继续执行\n\n\n          if (element.isGroup()) {\n            _this.updateElements(element, originElement);\n          } // 复制属性\n\n\n          each(COPY_PROPERTIES, function (name) {\n            originElement.set(name, element.get(name));\n          });\n          updateClip(originElement, element);\n          preElement = originElement; // 执行完更新后设置状态位为更新\n\n          originElement.set(STATUS_UPDATE, 'update');\n        }\n      } else {\n        // 没有对应的图形，则插入当前图形\n        originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n\n        var siblings = originGroup.getChildren(); // 兄弟节点\n\n        siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n\n        if (preElement) {\n          // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n          var index = siblings.indexOf(preElement);\n          siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n        } else {\n          siblings.unshift(element);\n        }\n\n        _this.registerElement(element); // 注册节点\n\n\n        element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n\n        if (element.get('isComponent')) {\n          // 直接新增子组件container属性，实例不变\n          var childComponent = element.get('component');\n          childComponent.set('container', originGroup);\n        } else if (element.isGroup()) {\n          // 如果元素是新增加的元素，则遍历注册所有的子节点\n          _this.registerNewGroup(element);\n        }\n\n        preElement = element;\n\n        if (animate) {\n          var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\n\n          if (animateCfg) {\n            _this.addAnimation(elementName, element, animateCfg);\n          }\n        }\n      }\n    });\n  };\n\n  GroupComponent.prototype.clearUpdateStatus = function (group) {\n    var children = group.getChildren();\n    each(children, function (el) {\n      el.set(STATUS_UPDATE, null); // 清理掉更新状态\n    });\n  }; // 清理离屏缓存\n\n\n  GroupComponent.prototype.clearOffScreenCache = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n\n    if (offScreenGroup) {\n      // 销毁原先的离线 Group\n      offScreenGroup.destroy();\n    }\n\n    this.set('offScreenGroup', null);\n    this.set('offScreenBBox', null);\n  }; // private updateInner() {\n  //   const group = this.get('group');\n  //   const newGroup = this.createOffScreenGroup();\n  //   this.renderInner(newGroup);\n  //   this.applyOffset();\n  //   this.updateElements(newGroup, group);\n  //   this.deleteElements();\n  //   newGroup.destroy(); // 销毁虚拟分组\n  // }\n  // 获取发生委托时的对象，在事件中抛出\n\n\n  GroupComponent.prototype.getDelegateObject = function () {\n    var _a;\n\n    var name = this.get('name');\n    var delegateObject = (_a = {}, _a[name] = this, _a.component = this, _a);\n    return delegateObject;\n  }; // 附加委托信息，用于事件\n\n\n  GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\n    var parentObject = parent.get('delegateObject');\n\n    if (!cfg.delegateObject) {\n      cfg.delegateObject = {};\n    }\n\n    mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n  }; // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n\n\n  GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\n    var originAttrs = originElement.attr();\n    var newAttrs = newElement.attr();\n    each(originAttrs, function (v, k) {\n      if (newAttrs[k] === undefined) {\n        newAttrs[k] = undefined;\n      }\n    });\n    return newAttrs;\n  };\n\n  GroupComponent.prototype.registerNewGroup = function (group) {\n    var _this = this;\n\n    var children = group.getChildren();\n    each(children, function (element) {\n      _this.registerElement(element); // 注册节点\n\n\n      element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n\n      if (element.isGroup()) {\n        _this.registerNewGroup(element);\n      }\n    });\n  }; // 移除多余的元素\n\n\n  GroupComponent.prototype.deleteElements = function () {\n    var _this = this;\n\n    var shapesMap = this.get('shapesMap');\n    var deleteArray = []; // 遍历获取需要删除的图形元素\n\n    each(shapesMap, function (element, id) {\n      if (!element.get(STATUS_UPDATE) || element.destroyed) {\n        deleteArray.push([id, element]);\n      } else {\n        element.set(STATUS_UPDATE, null); // 清理掉更新状态\n      }\n    });\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption'); // 删除图形元素\n\n    each(deleteArray, function (item) {\n      var id = item[0],\n          element = item[1];\n\n      if (!element.destroyed) {\n        var elementName = element.get('name');\n\n        if (animate && animateOption.leave) {\n          // 需要动画结束时移除图形\n          var callbackAnimCfg = mix({\n            callback: function () {\n              _this.removeElement(element);\n            }\n          }, animateOption.leave);\n\n          _this.removeAnimation(elementName, element, callbackAnimCfg);\n        } else {\n          _this.removeElement(element);\n        }\n      }\n\n      delete shapesMap[id]; // 从缓存中移除\n    });\n  };\n\n  GroupComponent.prototype.removeElement = function (element) {\n    if (element.get('isGroup')) {\n      var component = element.get('component');\n\n      if (component) {\n        component.destroy();\n      }\n    }\n\n    element.remove();\n  };\n\n  return GroupComponent;\n}(Component);\n\nexport default GroupComponent;","map":{"version":3,"sources":["../../src/abstract/group-component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\r\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\r\nimport { propagationDelegate } from '../util/event';\r\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\r\nimport { getBBoxWithClip, updateClip } from '../util/util';\r\nimport Component from './component';\r\nvar STATUS_UPDATE = 'update_status';\r\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\r\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\r\nvar GroupComponent = /** @class */ (function (_super) {\r\n    __extends(GroupComponent, _super);\r\n    function GroupComponent() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GroupComponent.prototype.getDefaultCfg = function () {\r\n        var cfg = _super.prototype.getDefaultCfg.call(this);\r\n        return __assign(__assign({}, cfg), { container: null, \r\n            /**\r\n             * @private\r\n             * 缓存图形的 Map\r\n             */\r\n            shapesMap: {}, group: null, capture: true, \r\n            /**\r\n             * @private 组件或者图形是否允许注册\r\n             * @type {false}\r\n             */\r\n            isRegister: false, \r\n            /**\r\n             * @private 是否正在更新\r\n             * @type {false}\r\n             */\r\n            isUpdating: false, \r\n            /**\r\n             * @private\r\n             * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\r\n             */\r\n            isInit: true });\r\n    };\r\n    GroupComponent.prototype.remove = function () {\r\n        this.clear();\r\n        var group = this.get('group');\r\n        group.remove();\r\n    };\r\n    GroupComponent.prototype.clear = function () {\r\n        var group = this.get('group');\r\n        group.clear();\r\n        this.set('shapesMap', {});\r\n        this.clearOffScreenCache();\r\n        this.set('isInit', true);\r\n    };\r\n    GroupComponent.prototype.getChildComponentById = function (id) {\r\n        var group = this.getElementById(id);\r\n        var inst = group && group.get('component');\r\n        return inst;\r\n    };\r\n    GroupComponent.prototype.getElementById = function (id) {\r\n        return this.get('shapesMap')[id];\r\n    };\r\n    GroupComponent.prototype.getElementByLocalId = function (localId) {\r\n        var id = this.getElementId(localId);\r\n        return this.getElementById(id);\r\n    };\r\n    GroupComponent.prototype.getElementsByName = function (name) {\r\n        var rst = [];\r\n        each(this.get('shapesMap'), function (elem) {\r\n            if (elem.get('name') === name) {\r\n                rst.push(elem);\r\n            }\r\n        });\r\n        return rst;\r\n    };\r\n    GroupComponent.prototype.getContainer = function () {\r\n        return this.get('container');\r\n    };\r\n    GroupComponent.prototype.updateInner = function (cfg) {\r\n        // this.updateInner();\r\n        // this.set('isUpdating', false);\r\n        this.offScreenRender();\r\n        if (this.get('updateAutoRender')) {\r\n            this.render();\r\n        }\r\n    };\r\n    GroupComponent.prototype.render = function () {\r\n        var offScreenGroup = this.get('offScreenGroup');\r\n        if (!offScreenGroup) {\r\n            offScreenGroup = this.offScreenRender();\r\n        }\r\n        var group = this.get('group');\r\n        this.updateElements(offScreenGroup, group);\r\n        this.deleteElements();\r\n        this.applyOffset();\r\n        if (!this.get('eventInitted')) {\r\n            this.initEvent();\r\n            this.set('eventInitted', true);\r\n        }\r\n        this.set('isInit', false);\r\n    };\r\n    GroupComponent.prototype.show = function () {\r\n        var group = this.get('group');\r\n        group.show();\r\n        this.set('visible', true);\r\n    };\r\n    GroupComponent.prototype.hide = function () {\r\n        var group = this.get('group');\r\n        group.hide();\r\n        this.set('visible', false);\r\n    };\r\n    GroupComponent.prototype.setCapture = function (capture) {\r\n        var group = this.get('group');\r\n        group.set('capture', capture);\r\n        this.set('capture', capture);\r\n    };\r\n    GroupComponent.prototype.destroy = function () {\r\n        this.removeEvent();\r\n        this.remove();\r\n        _super.prototype.destroy.call(this);\r\n    };\r\n    GroupComponent.prototype.getBBox = function () {\r\n        return this.get('group').getCanvasBBox();\r\n    };\r\n    GroupComponent.prototype.getLayoutBBox = function () {\r\n        var group = this.get('group');\r\n        // 防止被 clear 了，offScreenBBox 不存在\r\n        var bbox = this.getInnerLayoutBBox();\r\n        var matrix = group.getTotalMatrix();\r\n        if (matrix) {\r\n            bbox = applyMatrix2BBox(matrix, bbox);\r\n        }\r\n        return bbox; // 默认返回 getBBox，不同的组件内部单独实现\r\n    };\r\n    // 复写 on, off, emit 透传到 group\r\n    GroupComponent.prototype.on = function (evt, callback, once) {\r\n        var group = this.get('group');\r\n        group.on(evt, callback, once);\r\n        return this;\r\n    };\r\n    GroupComponent.prototype.off = function (evt, callback) {\r\n        var group = this.get('group');\r\n        group && group.off(evt, callback);\r\n        return this;\r\n    };\r\n    GroupComponent.prototype.emit = function (eventName, eventObject) {\r\n        var group = this.get('group');\r\n        group.emit(eventName, eventObject);\r\n    };\r\n    GroupComponent.prototype.init = function () {\r\n        _super.prototype.init.call(this);\r\n        if (!this.get('group')) {\r\n            this.initGroup();\r\n        }\r\n        this.offScreenRender(); // 绘制离屏 group\r\n    };\r\n    // 获取组件内部布局占的包围盒\r\n    GroupComponent.prototype.getInnerLayoutBBox = function () {\r\n        return this.get('offScreenBBox') || this.get('group').getBBox();\r\n    };\r\n    // 抛出委托对象\r\n    GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\r\n        var group = this.get('group');\r\n        eventObject.target = group;\r\n        group.emit(eventName, eventObject);\r\n        propagationDelegate(group, eventName, eventObject);\r\n    };\r\n    // 创建离屏的 group ,不添加在 canvas 中\r\n    GroupComponent.prototype.createOffScreenGroup = function () {\r\n        var group = this.get('group');\r\n        var GroupClass = group.getGroupBase(); // 获取分组的构造函数\r\n        var newGroup = new GroupClass({\r\n            delegateObject: this.getDelegateObject(),\r\n        });\r\n        return newGroup;\r\n    };\r\n    // 应用 offset\r\n    GroupComponent.prototype.applyOffset = function () {\r\n        var offsetX = this.get('offsetX');\r\n        var offsetY = this.get('offsetY');\r\n        this.moveElementTo(this.get('group'), {\r\n            x: offsetX,\r\n            y: offsetY,\r\n        });\r\n    };\r\n    GroupComponent.prototype.initGroup = function () {\r\n        var container = this.get('container');\r\n        this.set('group', container.addGroup({\r\n            id: this.get('id'),\r\n            name: this.get('name'),\r\n            capture: this.get('capture'),\r\n            visible: this.get('visible'),\r\n            isComponent: true,\r\n            component: this,\r\n            delegateObject: this.getDelegateObject(),\r\n        }));\r\n    };\r\n    // 离屏渲染\r\n    GroupComponent.prototype.offScreenRender = function () {\r\n        this.clearOffScreenCache();\r\n        var offScreenGroup = this.createOffScreenGroup();\r\n        this.renderInner(offScreenGroup);\r\n        this.set('offScreenGroup', offScreenGroup);\r\n        // 包含包围盒的 bbox\r\n        this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\r\n        return offScreenGroup;\r\n    };\r\n    /**\r\n     * @protected\r\n     * 在组件上添加分组，主要解决 isReigeter 的问题\r\n     * @param {IGroup} parent 父元素\r\n     * @param {object} cfg    分组的配置项\r\n     */\r\n    GroupComponent.prototype.addGroup = function (parent, cfg) {\r\n        this.appendDelegateObject(parent, cfg);\r\n        var group = parent.addGroup(cfg);\r\n        if (this.get('isRegister')) {\r\n            this.registerElement(group);\r\n        }\r\n        return group;\r\n    };\r\n    /**\r\n     * @protected\r\n     * 在组件上添加图形，主要解决 isReigeter 的问题\r\n     * @param {IGroup} parent 父元素\r\n     * @param {object} cfg    分组的配置项\r\n     */\r\n    GroupComponent.prototype.addShape = function (parent, cfg) {\r\n        this.appendDelegateObject(parent, cfg);\r\n        var shape = parent.addShape(cfg);\r\n        if (this.get('isRegister')) {\r\n            this.registerElement(shape);\r\n        }\r\n        return shape;\r\n    };\r\n    /**\r\n     * 在组件上添加子组件\r\n     *\r\n     * @param parent 父元素\r\n     * @param cfg 子组件配置项\r\n     */\r\n    GroupComponent.prototype.addComponent = function (parent, cfg) {\r\n        var id = cfg.id, Ctor = cfg.component, restCfg = __rest(cfg, [\"id\", \"component\"]);\r\n        // @ts-ignore\r\n        var inst = new Ctor(__assign(__assign({}, restCfg), { id: id, container: parent, updateAutoRender: this.get('updateAutoRender') }));\r\n        inst.init();\r\n        inst.render();\r\n        if (this.get('isRegister')) {\r\n            this.registerElement(inst.get('group'));\r\n        }\r\n        return inst;\r\n    };\r\n    GroupComponent.prototype.initEvent = function () { };\r\n    GroupComponent.prototype.removeEvent = function () {\r\n        var group = this.get('group');\r\n        group.off();\r\n    };\r\n    GroupComponent.prototype.getElementId = function (localId) {\r\n        var id = this.get('id'); // 组件的 Id\r\n        var name = this.get('name'); // 组件的名称\r\n        return id + \"-\" + name + \"-\" + localId;\r\n    };\r\n    GroupComponent.prototype.registerElement = function (element) {\r\n        var id = element.get('id');\r\n        this.get('shapesMap')[id] = element;\r\n    };\r\n    GroupComponent.prototype.unregisterElement = function (element) {\r\n        var id = element.get('id');\r\n        delete this.get('shapesMap')[id];\r\n    };\r\n    // 移动元素\r\n    GroupComponent.prototype.moveElementTo = function (element, point) {\r\n        var matrix = getMatrixByTranslate(point);\r\n        element.attr('matrix', matrix);\r\n    };\r\n    /**\r\n     * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\r\n     * @protected\r\n     * @param {string} elmentName 图形元素名称\r\n     * @param {IElement} newElement  新的图形元素\r\n     * @param {object} animateCfg 动画的配置项\r\n     */\r\n    GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\r\n        // 缓存透明度\r\n        var originOpacity = newElement.attr('opacity');\r\n        if (isNil(originOpacity)) {\r\n            originOpacity = 1;\r\n        }\r\n        newElement.attr('opacity', 0);\r\n        newElement.animate({ opacity: originOpacity }, animateCfg);\r\n    };\r\n    /**\r\n     * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\r\n     * @protected\r\n     * @param {string} elmentName 图形元素名称\r\n     * @param {IElement} originElement 要删除的图形元素\r\n     * @param {object} animateCfg 动画的配置项\r\n     */\r\n    GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\r\n        originElement.animate({ opacity: 0 }, animateCfg);\r\n    };\r\n    /**\r\n     * 图形元素的更新动画\r\n     * @param {string} elmentName 图形元素名称\r\n     * @param {IElement} originElement 现有的图形元素\r\n     * @param {object} newAttrs  新的图形元素\r\n     * @param {object} animateCfg 动画的配置项\r\n     */\r\n    GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\r\n        originElement.animate(newAttrs, animateCfg);\r\n    };\r\n    // 更新组件的图形\r\n    GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\r\n        var _this = this;\r\n        var animate = this.get('animate');\r\n        var animateOption = this.get('animateOption');\r\n        var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\r\n        var preElement; // 前面已经匹配到的图形元素，用于\r\n        each(children, function (element) {\r\n            var elementId = element.get('id');\r\n            var originElement = _this.getElementById(elementId);\r\n            var elementName = element.get('name');\r\n            if (originElement) {\r\n                if (element.get('isComponent')) {\r\n                    // 嵌套子组件更新\r\n                    var childComponent = element.get('component');\r\n                    var origChildComponent = originElement.get('component');\r\n                    var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\r\n                    origChildComponent.update(newCfg);\r\n                    originElement.set(STATUS_UPDATE, 'update');\r\n                }\r\n                else {\r\n                    var replaceAttrs = _this.getReplaceAttrs(originElement, element);\r\n                    // 更新\r\n                    if (animate && animateOption.update) {\r\n                        // 没有动画\r\n                        _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\r\n                    }\r\n                    else {\r\n                        // originElement.attrs = replaceAttrs; // 直接替换\r\n                        originElement.attr(replaceAttrs);\r\n                    }\r\n                    // 如果是分组，则继续执行\r\n                    if (element.isGroup()) {\r\n                        _this.updateElements(element, originElement);\r\n                    }\r\n                    // 复制属性\r\n                    each(COPY_PROPERTIES, function (name) {\r\n                        originElement.set(name, element.get(name));\r\n                    });\r\n                    updateClip(originElement, element);\r\n                    preElement = originElement;\r\n                    // 执行完更新后设置状态位为更新\r\n                    originElement.set(STATUS_UPDATE, 'update');\r\n                }\r\n            }\r\n            else {\r\n                // 没有对应的图形，则插入当前图形\r\n                originGroup.add(element); // 应该在 group 加个 insertAt 的方法\r\n                var siblings = originGroup.getChildren(); // 兄弟节点\r\n                siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\r\n                if (preElement) {\r\n                    // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\r\n                    var index = siblings.indexOf(preElement);\r\n                    siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\r\n                }\r\n                else {\r\n                    siblings.unshift(element);\r\n                }\r\n                _this.registerElement(element); // 注册节点\r\n                element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\r\n                if (element.get('isComponent')) {\r\n                    // 直接新增子组件container属性，实例不变\r\n                    var childComponent = element.get('component');\r\n                    childComponent.set('container', originGroup);\r\n                }\r\n                else if (element.isGroup()) {\r\n                    // 如果元素是新增加的元素，则遍历注册所有的子节点\r\n                    _this.registerNewGroup(element);\r\n                }\r\n                preElement = element;\r\n                if (animate) {\r\n                    var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\r\n                    if (animateCfg) {\r\n                        _this.addAnimation(elementName, element, animateCfg);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    GroupComponent.prototype.clearUpdateStatus = function (group) {\r\n        var children = group.getChildren();\r\n        each(children, function (el) {\r\n            el.set(STATUS_UPDATE, null); // 清理掉更新状态\r\n        });\r\n    };\r\n    // 清理离屏缓存\r\n    GroupComponent.prototype.clearOffScreenCache = function () {\r\n        var offScreenGroup = this.get('offScreenGroup');\r\n        if (offScreenGroup) {\r\n            // 销毁原先的离线 Group\r\n            offScreenGroup.destroy();\r\n        }\r\n        this.set('offScreenGroup', null);\r\n        this.set('offScreenBBox', null);\r\n    };\r\n    // private updateInner() {\r\n    //   const group = this.get('group');\r\n    //   const newGroup = this.createOffScreenGroup();\r\n    //   this.renderInner(newGroup);\r\n    //   this.applyOffset();\r\n    //   this.updateElements(newGroup, group);\r\n    //   this.deleteElements();\r\n    //   newGroup.destroy(); // 销毁虚拟分组\r\n    // }\r\n    // 获取发生委托时的对象，在事件中抛出\r\n    GroupComponent.prototype.getDelegateObject = function () {\r\n        var _a;\r\n        var name = this.get('name');\r\n        var delegateObject = (_a = {},\r\n            _a[name] = this,\r\n            _a.component = this,\r\n            _a);\r\n        return delegateObject;\r\n    };\r\n    // 附加委托信息，用于事件\r\n    GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\r\n        var parentObject = parent.get('delegateObject');\r\n        if (!cfg.delegateObject) {\r\n            cfg.delegateObject = {};\r\n        }\r\n        mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\r\n    };\r\n    // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\r\n    GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\r\n        var originAttrs = originElement.attr();\r\n        var newAttrs = newElement.attr();\r\n        each(originAttrs, function (v, k) {\r\n            if (newAttrs[k] === undefined) {\r\n                newAttrs[k] = undefined;\r\n            }\r\n        });\r\n        return newAttrs;\r\n    };\r\n    GroupComponent.prototype.registerNewGroup = function (group) {\r\n        var _this = this;\r\n        var children = group.getChildren();\r\n        each(children, function (element) {\r\n            _this.registerElement(element); // 注册节点\r\n            element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\r\n            if (element.isGroup()) {\r\n                _this.registerNewGroup(element);\r\n            }\r\n        });\r\n    };\r\n    // 移除多余的元素\r\n    GroupComponent.prototype.deleteElements = function () {\r\n        var _this = this;\r\n        var shapesMap = this.get('shapesMap');\r\n        var deleteArray = [];\r\n        // 遍历获取需要删除的图形元素\r\n        each(shapesMap, function (element, id) {\r\n            if (!element.get(STATUS_UPDATE) || element.destroyed) {\r\n                deleteArray.push([id, element]);\r\n            }\r\n            else {\r\n                element.set(STATUS_UPDATE, null); // 清理掉更新状态\r\n            }\r\n        });\r\n        var animate = this.get('animate');\r\n        var animateOption = this.get('animateOption');\r\n        // 删除图形元素\r\n        each(deleteArray, function (item) {\r\n            var id = item[0], element = item[1];\r\n            if (!element.destroyed) {\r\n                var elementName = element.get('name');\r\n                if (animate && animateOption.leave) {\r\n                    // 需要动画结束时移除图形\r\n                    var callbackAnimCfg = mix({\r\n                        callback: function () {\r\n                            _this.removeElement(element);\r\n                        },\r\n                    }, animateOption.leave);\r\n                    _this.removeAnimation(elementName, element, callbackAnimCfg);\r\n                }\r\n                else {\r\n                    _this.removeElement(element);\r\n                }\r\n            }\r\n            delete shapesMap[id]; // 从缓存中移除\r\n        });\r\n    };\r\n    GroupComponent.prototype.removeElement = function (element) {\r\n        if (element.get('isGroup')) {\r\n            var component = element.get('component');\r\n            if (component) {\r\n                component.destroy();\r\n            }\r\n        }\r\n        element.remove();\r\n    };\r\n    return GroupComponent;\r\n}(Component));\r\nexport default GroupComponent;\r\n//# sourceMappingURL=group-component.js.map"]},"metadata":{},"sourceType":"module"}