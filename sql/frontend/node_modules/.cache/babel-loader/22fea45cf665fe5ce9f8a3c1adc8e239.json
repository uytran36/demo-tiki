{"ast":null,"code":"import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\nimport { getBBoxByArray } from './util';\nexport default {\n  /**\r\n   * 计算多折线的包围盒\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @return {object} 包围盒\r\n   */\n  box: function (points) {\n    var xArr = [];\n    var yArr = [];\n\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n      xArr.push(point[0]);\n      yArr.push(point[1]);\n    }\n\n    return getBBoxByArray(xArr, yArr);\n  },\n\n  /**\r\n   * 计算多折线的长度\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @return {object} 多条边的长度\r\n   */\n  length: function (points) {\n    return lengthOfSegment(points);\n  },\n\n  /**\r\n   * 根据比例获取多折线的点\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @param {number} t 在多折线的长度上的比例\r\n   * @return {object} 根据比例值计算出来的点\r\n   */\n  pointAt: function (points, t) {\n    return pointAtSegments(points, t);\n  },\n\n  /**\r\n   * 指定点到多折线的距离\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @param {number} x 指定点的 x\r\n   * @param {number} y 指定点的 y\r\n   * @return {number} 点到多折线的距离\r\n   */\n  pointDistance: function (points, x, y) {\n    return distanceAtSegment(points, x, y);\n  },\n\n  /**\r\n   * 根据比例获取多折线的切线角度\r\n   * @param {array} points 点的集合 [x,y] 的形式\r\n   * @param {number} t 在多折线的长度上的比例\r\n   * @return {object} 根据比例值计算出来的角度\r\n   */\n  tangentAngle: function (points, t) {\n    return angleAtSegments(points, t);\n  }\n};","map":{"version":3,"sources":["../src/polyline.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,EAA0B,eAA1B,EAA2C,iBAA3C,EAA8D,eAA9D,QAAqF,YAArF;AACA,SAAS,cAAT,QAA+B,QAA/B;AAGA,eAAe;AACb;;;;AAIG;AACH,EAAA,GAAG,EAAH,UAAI,MAAJ,EAAwB;AACtB,QAAM,IAAI,GAAG,EAAb;AACA,QAAM,IAAI,GAAG,EAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAf;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAf;AACD;;AACD,WAAO,cAAc,CAAC,IAAD,EAAO,IAAP,CAArB;AACD,GAfY;;AAgBb;;;;AAIG;AACH,EAAA,MAAM,EAAN,UAAO,MAAP,EAA2B;AACzB,WAAO,eAAe,CAAC,MAAD,CAAtB;AACD,GAvBY;;AAwBb;;;;;AAKG;AACH,EAAA,OAAO,EAAP,UAAQ,MAAR,EAA8B,CAA9B,EAAuC;AACrC,WAAO,eAAe,CAAC,MAAD,EAAS,CAAT,CAAtB;AACD,GAhCY;;AAiCb;;;;;;AAMG;AACH,EAAA,aAAa,EAAb,UAAc,MAAd,EAAoC,CAApC,EAA+C,CAA/C,EAAwD;AACtD,WAAO,iBAAiB,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,CAAxB;AACD,GA1CY;;AA2Cb;;;;;AAKG;AACH,EAAA,YAAY,EAAZ,UAAa,MAAb,EAAmC,CAAnC,EAA4C;AAC1C,WAAO,eAAe,CAAC,MAAD,EAAS,CAAT,CAAtB;AACD;AAnDY,CAAf","sourceRoot":"","sourcesContent":["import { pointAtSegments, angleAtSegments, distanceAtSegment, lengthOfSegment } from './segments';\r\nimport { getBBoxByArray } from './util';\r\nexport default {\r\n    /**\r\n     * 计算多折线的包围盒\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @return {object} 包围盒\r\n     */\r\n    box: function (points) {\r\n        var xArr = [];\r\n        var yArr = [];\r\n        for (var i = 0; i < points.length; i++) {\r\n            var point = points[i];\r\n            xArr.push(point[0]);\r\n            yArr.push(point[1]);\r\n        }\r\n        return getBBoxByArray(xArr, yArr);\r\n    },\r\n    /**\r\n     * 计算多折线的长度\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @return {object} 多条边的长度\r\n     */\r\n    length: function (points) {\r\n        return lengthOfSegment(points);\r\n    },\r\n    /**\r\n     * 根据比例获取多折线的点\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @param {number} t 在多折线的长度上的比例\r\n     * @return {object} 根据比例值计算出来的点\r\n     */\r\n    pointAt: function (points, t) {\r\n        return pointAtSegments(points, t);\r\n    },\r\n    /**\r\n     * 指定点到多折线的距离\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @param {number} x 指定点的 x\r\n     * @param {number} y 指定点的 y\r\n     * @return {number} 点到多折线的距离\r\n     */\r\n    pointDistance: function (points, x, y) {\r\n        return distanceAtSegment(points, x, y);\r\n    },\r\n    /**\r\n     * 根据比例获取多折线的切线角度\r\n     * @param {array} points 点的集合 [x,y] 的形式\r\n     * @param {number} t 在多折线的长度上的比例\r\n     * @return {object} 根据比例值计算出来的角度\r\n     */\r\n    tangentAngle: function (points, t) {\r\n        return angleAtSegments(points, t);\r\n    },\r\n};\r\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"module"}