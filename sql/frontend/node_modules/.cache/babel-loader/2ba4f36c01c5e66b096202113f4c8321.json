{"ast":null,"code":"var _ = require(\"./lodash\");\n\nvar util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  cleanup: cleanup\n};\n/*\r\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\r\n * adds appropriate edges to ensure that all cluster nodes are placed between\r\n * these boundries, and ensures that the graph is connected.\r\n *\r\n * In addition we ensure, through the use of the minlen property, that nodes\r\n * and subgraph border nodes to not end up on the same rank.\r\n *\r\n * Preconditions:\r\n *\r\n *    1. Input graph is a DAG\r\n *    2. Nodes in the input graph has a minlen attribute\r\n *\r\n * Postconditions:\r\n *\r\n *    1. Input graph is connected.\r\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\r\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\r\n *       get placed on the same rank as subgraph border nodes.\r\n *\r\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\r\n * Graphs.\"\r\n */\n\nfunction run(g) {\n  var root = util.addDummyNode(g, \"root\", {}, \"_root\");\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n\n  var nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root; // Multiply minlen by nodeSep to align nodes on non-border ranks.\n\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  }); // Calculate a weight that is sufficient to keep subgraphs vertically compact\n\n\n  var weight = sumWeights(g) + 1; // Create border nodes and link them up\n\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  }); // Save the multiplier for node layers for later removal of empty border\n  // layers.\n\n\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      });\n    }\n\n    return;\n  }\n\n  var top = util.addBorderNode(g, \"_bt\");\n  var bottom = util.addBorderNode(g, \"_bb\");\n  var label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n\n  function dfs(v, depth) {\n    var children = g.children(v);\n\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n\n    depths[v] = depth;\n  }\n\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(g.edges(), function (acc, e) {\n    return acc + g.edge(e).weight;\n  }, 0);\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}","map":{"version":3,"sources":["E:/sqlindex2/sql/frontend/node_modules/dagre/lib/nesting-graph.js"],"names":["_","require","util","module","exports","run","cleanup","g","root","addDummyNode","depths","treeDepths","height","max","values","nodeSep","graph","nestingRoot","forEach","edges","e","edge","minlen","weight","sumWeights","children","child","dfs","nodeRankFactor","v","length","setEdge","top","addBorderNode","bottom","label","node","setParent","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","parent","depth","reduce","acc","graphLabel","removeNode","removeEdge"],"mappings":"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","sourcesContent":["var _ = require(\"./lodash\");\r\nvar util = require(\"./util\");\r\n\r\nmodule.exports = {\r\n  run: run,\r\n  cleanup: cleanup\r\n};\r\n\r\n/*\r\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\r\n * adds appropriate edges to ensure that all cluster nodes are placed between\r\n * these boundries, and ensures that the graph is connected.\r\n *\r\n * In addition we ensure, through the use of the minlen property, that nodes\r\n * and subgraph border nodes to not end up on the same rank.\r\n *\r\n * Preconditions:\r\n *\r\n *    1. Input graph is a DAG\r\n *    2. Nodes in the input graph has a minlen attribute\r\n *\r\n * Postconditions:\r\n *\r\n *    1. Input graph is connected.\r\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\r\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\r\n *       get placed on the same rank as subgraph border nodes.\r\n *\r\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\r\n * Graphs.\"\r\n */\r\nfunction run(g) {\r\n  var root = util.addDummyNode(g, \"root\", {}, \"_root\");\r\n  var depths = treeDepths(g);\r\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\r\n  var nodeSep = 2 * height + 1;\r\n\r\n  g.graph().nestingRoot = root;\r\n\r\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\r\n  _.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });\r\n\r\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\r\n  var weight = sumWeights(g) + 1;\r\n\r\n  // Create border nodes and link them up\r\n  _.forEach(g.children(), function(child) {\r\n    dfs(g, root, nodeSep, weight, height, depths, child);\r\n  });\r\n\r\n  // Save the multiplier for node layers for later removal of empty border\r\n  // layers.\r\n  g.graph().nodeRankFactor = nodeSep;\r\n}\r\n\r\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\r\n  var children = g.children(v);\r\n  if (!children.length) {\r\n    if (v !== root) {\r\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\r\n    }\r\n    return;\r\n  }\r\n\r\n  var top = util.addBorderNode(g, \"_bt\");\r\n  var bottom = util.addBorderNode(g, \"_bb\");\r\n  var label = g.node(v);\r\n\r\n  g.setParent(top, v);\r\n  label.borderTop = top;\r\n  g.setParent(bottom, v);\r\n  label.borderBottom = bottom;\r\n\r\n  _.forEach(children, function(child) {\r\n    dfs(g, root, nodeSep, weight, height, depths, child);\r\n\r\n    var childNode = g.node(child);\r\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\r\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\r\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\r\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\r\n\r\n    g.setEdge(top, childTop, {\r\n      weight: thisWeight,\r\n      minlen: minlen,\r\n      nestingEdge: true\r\n    });\r\n\r\n    g.setEdge(childBottom, bottom, {\r\n      weight: thisWeight,\r\n      minlen: minlen,\r\n      nestingEdge: true\r\n    });\r\n  });\r\n\r\n  if (!g.parent(v)) {\r\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\r\n  }\r\n}\r\n\r\nfunction treeDepths(g) {\r\n  var depths = {};\r\n  function dfs(v, depth) {\r\n    var children = g.children(v);\r\n    if (children && children.length) {\r\n      _.forEach(children, function(child) {\r\n        dfs(child, depth + 1);\r\n      });\r\n    }\r\n    depths[v] = depth;\r\n  }\r\n  _.forEach(g.children(), function(v) { dfs(v, 1); });\r\n  return depths;\r\n}\r\n\r\nfunction sumWeights(g) {\r\n  return _.reduce(g.edges(), function(acc, e) {\r\n    return acc + g.edge(e).weight;\r\n  }, 0);\r\n}\r\n\r\nfunction cleanup(g) {\r\n  var graphLabel = g.graph();\r\n  g.removeNode(graphLabel.nestingRoot);\r\n  delete graphLabel.nestingRoot;\r\n  _.forEach(g.edges(), function(e) {\r\n    var edge = g.edge(e);\r\n    if (edge.nestingEdge) {\r\n      g.removeEdge(e);\r\n    }\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}