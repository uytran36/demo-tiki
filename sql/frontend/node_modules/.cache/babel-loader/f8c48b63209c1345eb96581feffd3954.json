{"ast":null,"code":"import LinkedList from './linked-list';\n\nvar Queue =\n/** @class */\nfunction () {\n  function Queue() {\n    this.linkedList = new LinkedList();\n  }\n  /**\r\n   * 队列是否为空\r\n   */\n\n\n  Queue.prototype.isEmpty = function () {\n    return !this.linkedList.head;\n  };\n  /**\r\n   * 读取队列头部的元素， 不删除队列中的元素\r\n   */\n\n\n  Queue.prototype.peek = function () {\n    if (!this.linkedList.head) {\n      return null;\n    }\n\n    return this.linkedList.head.value;\n  };\n  /**\r\n   * 在队列的尾部新增一个元素\r\n   * @param value\r\n   */\n\n\n  Queue.prototype.enqueue = function (value) {\n    this.linkedList.append(value);\n  };\n  /**\r\n   * 删除队列中的头部元素，如果队列为空，则返回 null\r\n   */\n\n\n  Queue.prototype.dequeue = function () {\n    var removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  };\n\n  Queue.prototype.toString = function (callback) {\n    return this.linkedList.toString(callback);\n  };\n\n  return Queue;\n}();\n\nexport default Queue;","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/@antv/algorithm/es/structs/queue.js"],"names":["LinkedList","Queue","linkedList","prototype","isEmpty","head","peek","value","enqueue","append","dequeue","removeHead","deleteHead","toString","callback"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,eAAvB;;AAEA,IAAIC,KAAK;AACT;AACA,YAAY;AACV,WAASA,KAAT,GAAiB;AACf,SAAKC,UAAL,GAAkB,IAAIF,UAAJ,EAAlB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,CAACE,SAAN,CAAgBC,OAAhB,GAA0B,YAAY;AACpC,WAAO,CAAC,KAAKF,UAAL,CAAgBG,IAAxB;AACD,GAFD;AAGA;AACF;AACA;;;AAGEJ,EAAAA,KAAK,CAACE,SAAN,CAAgBG,IAAhB,GAAuB,YAAY;AACjC,QAAI,CAAC,KAAKJ,UAAL,CAAgBG,IAArB,EAA2B;AACzB,aAAO,IAAP;AACD;;AAED,WAAO,KAAKH,UAAL,CAAgBG,IAAhB,CAAqBE,KAA5B;AACD,GAND;AAOA;AACF;AACA;AACA;;;AAGEN,EAAAA,KAAK,CAACE,SAAN,CAAgBK,OAAhB,GAA0B,UAAUD,KAAV,EAAiB;AACzC,SAAKL,UAAL,CAAgBO,MAAhB,CAAuBF,KAAvB;AACD,GAFD;AAGA;AACF;AACA;;;AAGEN,EAAAA,KAAK,CAACE,SAAN,CAAgBO,OAAhB,GAA0B,YAAY;AACpC,QAAIC,UAAU,GAAG,KAAKT,UAAL,CAAgBU,UAAhB,EAAjB;AACA,WAAOD,UAAU,GAAGA,UAAU,CAACJ,KAAd,GAAsB,IAAvC;AACD,GAHD;;AAKAN,EAAAA,KAAK,CAACE,SAAN,CAAgBU,QAAhB,GAA2B,UAAUC,QAAV,EAAoB;AAC7C,WAAO,KAAKZ,UAAL,CAAgBW,QAAhB,CAAyBC,QAAzB,CAAP;AACD,GAFD;;AAIA,SAAOb,KAAP;AACD,CAhDD,EAFA;;AAoDA,eAAeA,KAAf","sourcesContent":["import LinkedList from './linked-list';\r\n\r\nvar Queue =\r\n/** @class */\r\nfunction () {\r\n  function Queue() {\r\n    this.linkedList = new LinkedList();\r\n  }\r\n  /**\r\n   * 队列是否为空\r\n   */\r\n\r\n\r\n  Queue.prototype.isEmpty = function () {\r\n    return !this.linkedList.head;\r\n  };\r\n  /**\r\n   * 读取队列头部的元素， 不删除队列中的元素\r\n   */\r\n\r\n\r\n  Queue.prototype.peek = function () {\r\n    if (!this.linkedList.head) {\r\n      return null;\r\n    }\r\n\r\n    return this.linkedList.head.value;\r\n  };\r\n  /**\r\n   * 在队列的尾部新增一个元素\r\n   * @param value\r\n   */\r\n\r\n\r\n  Queue.prototype.enqueue = function (value) {\r\n    this.linkedList.append(value);\r\n  };\r\n  /**\r\n   * 删除队列中的头部元素，如果队列为空，则返回 null\r\n   */\r\n\r\n\r\n  Queue.prototype.dequeue = function () {\r\n    var removeHead = this.linkedList.deleteHead();\r\n    return removeHead ? removeHead.value : null;\r\n  };\r\n\r\n  Queue.prototype.toString = function (callback) {\r\n    return this.linkedList.toString(callback);\r\n  };\r\n\r\n  return Queue;\r\n}();\r\n\r\nexport default Queue;"]},"metadata":{},"sourceType":"module"}