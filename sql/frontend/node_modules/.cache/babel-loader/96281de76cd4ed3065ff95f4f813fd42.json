{"ast":null,"code":"import { newArray } from './util';\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function sumAll(matrix) {\n  let v = 0;\n\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n\n  return v;\n}\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function productAll(matrix) {\n  let v = 1;\n\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n\n  return v;\n}\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / cols) / cols);\n    }\n  }\n\n  return variance;\n}\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / rows) / rows);\n    }\n  }\n\n  return variance;\n}\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n\n  if (unbiased) {\n    return (sum2 - sum1 * sum1 / size) / (size - 1);\n  } else {\n    return (sum2 - sum1 * sum1 / size) / size;\n  }\n}\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\nexport function getScaleByRow(matrix) {\n  const scale = [];\n\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n\n    scale.push(Math.sqrt(sum));\n  }\n\n  return scale;\n}\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n\n    scale.push(Math.sqrt(sum));\n  }\n\n  return scale;\n}\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n\n  return Math.sqrt(sum);\n}\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/ml-matrix/src/stat.js"],"names":["newArray","sumByRow","matrix","sum","rows","i","j","columns","get","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","push","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","Math","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AAEA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAC/B,MAAIC,GAAG,GAAGH,QAAQ,CAACE,MAAM,CAACE,IAAR,CAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoC,EAAED,CAAtC,EAAyC;AACvCH,MAAAA,GAAG,CAACE,CAAD,CAAH,IAAUH,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAV;AACD;AACF;;AACD,SAAOH,GAAP;AACD;AAED,OAAO,SAASM,WAAT,CAAqBP,MAArB,EAA6B;AAClC,MAAIC,GAAG,GAAGH,QAAQ,CAACE,MAAM,CAACK,OAAR,CAAlB;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoC,EAAED,CAAtC,EAAyC;AACvCH,MAAAA,GAAG,CAACG,CAAD,CAAH,IAAUJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAV;AACD;AACF;;AACD,SAAOH,GAAP;AACD;AAED,OAAO,SAASO,MAAT,CAAgBR,MAAhB,EAAwB;AAC7B,MAAIS,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCK,MAAAA,CAAC,IAAIT,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAL;AACD;AACF;;AACD,SAAOK,CAAP;AACD;AAED,OAAO,SAASC,YAAT,CAAsBV,MAAtB,EAA8B;AACnC,MAAIC,GAAG,GAAGH,QAAQ,CAACE,MAAM,CAACE,IAAR,EAAc,CAAd,CAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoC,EAAED,CAAtC,EAAyC;AACvCH,MAAAA,GAAG,CAACE,CAAD,CAAH,IAAUH,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAV;AACD;AACF;;AACD,SAAOH,GAAP;AACD;AAED,OAAO,SAASU,eAAT,CAAyBX,MAAzB,EAAiC;AACtC,MAAIC,GAAG,GAAGH,QAAQ,CAACE,MAAM,CAACK,OAAR,EAAiB,CAAjB,CAAlB;;AACA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiC,EAAEC,CAAnC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoC,EAAED,CAAtC,EAAyC;AACvCH,MAAAA,GAAG,CAACG,CAAD,CAAH,IAAUJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAV;AACD;AACF;;AACD,SAAOH,GAAP;AACD;AAED,OAAO,SAASW,UAAT,CAAoBZ,MAApB,EAA4B;AACjC,MAAIS,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCK,MAAAA,CAAC,IAAIT,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAL;AACD;AACF;;AACD,SAAOK,CAAP;AACD;AAED,OAAO,SAASI,aAAT,CAAuBb,MAAvB,EAA+Bc,QAA/B,EAAyCC,IAAzC,EAA+C;AACpD,QAAMb,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAMc,IAAI,GAAGhB,MAAM,CAACK,OAApB;AACA,QAAMY,QAAQ,GAAG,EAAjB;;AAEA,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7B,QAAIe,IAAI,GAAG,CAAX;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,IAApB,EAA0BZ,CAAC,EAA3B,EAA+B;AAC7BgB,MAAAA,CAAC,GAAGpB,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmBW,IAAI,CAACZ,CAAD,CAA3B;AACAe,MAAAA,IAAI,IAAIE,CAAR;AACAD,MAAAA,IAAI,IAAIC,CAAC,GAAGA,CAAZ;AACD;;AACD,QAAIN,QAAJ,EAAc;AACZG,MAAAA,QAAQ,CAACI,IAAT,CAAc,CAACF,IAAI,GAAID,IAAI,GAAGA,IAAR,GAAgBF,IAAxB,KAAiCA,IAAI,GAAG,CAAxC,CAAd;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,CAACI,IAAT,CAAc,CAACF,IAAI,GAAID,IAAI,GAAGA,IAAR,GAAgBF,IAAxB,IAAgCA,IAA9C;AACD;AACF;;AACD,SAAOC,QAAP;AACD;AAED,OAAO,SAASK,gBAAT,CAA0BtB,MAA1B,EAAkCc,QAAlC,EAA4CC,IAA5C,EAAkD;AACvD,QAAMb,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAMc,IAAI,GAAGhB,MAAM,CAACK,OAApB;AACA,QAAMY,QAAQ,GAAG,EAAjB;;AAEA,OAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,IAApB,EAA0BZ,CAAC,EAA3B,EAA+B;AAC7B,QAAIc,IAAI,GAAG,CAAX;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7BiB,MAAAA,CAAC,GAAGpB,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmBW,IAAI,CAACX,CAAD,CAA3B;AACAc,MAAAA,IAAI,IAAIE,CAAR;AACAD,MAAAA,IAAI,IAAIC,CAAC,GAAGA,CAAZ;AACD;;AACD,QAAIN,QAAJ,EAAc;AACZG,MAAAA,QAAQ,CAACI,IAAT,CAAc,CAACF,IAAI,GAAID,IAAI,GAAGA,IAAR,GAAgBhB,IAAxB,KAAiCA,IAAI,GAAG,CAAxC,CAAd;AACD,KAFD,MAEO;AACLe,MAAAA,QAAQ,CAACI,IAAT,CAAc,CAACF,IAAI,GAAID,IAAI,GAAGA,IAAR,GAAgBhB,IAAxB,IAAgCA,IAA9C;AACD;AACF;;AACD,SAAOe,QAAP;AACD;AAED,OAAO,SAASM,WAAT,CAAqBvB,MAArB,EAA6Bc,QAA7B,EAAuCC,IAAvC,EAA6C;AAClD,QAAMb,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,QAAMc,IAAI,GAAGhB,MAAM,CAACK,OAApB;AACA,QAAMmB,IAAI,GAAGtB,IAAI,GAAGc,IAApB;AAEA,MAAIE,IAAI,GAAG,CAAX;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,IAApB,EAA0BZ,CAAC,EAA3B,EAA+B;AAC7BgB,MAAAA,CAAC,GAAGpB,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmBW,IAAvB;AACAG,MAAAA,IAAI,IAAIE,CAAR;AACAD,MAAAA,IAAI,IAAIC,CAAC,GAAGA,CAAZ;AACD;AACF;;AACD,MAAIN,QAAJ,EAAc;AACZ,WAAO,CAACK,IAAI,GAAID,IAAI,GAAGA,IAAR,GAAgBM,IAAxB,KAAiCA,IAAI,GAAG,CAAxC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,CAACL,IAAI,GAAID,IAAI,GAAGA,IAAR,GAAgBM,IAAxB,IAAgCA,IAAvC;AACD;AACF;AAED,OAAO,SAASC,WAAT,CAAqBzB,MAArB,EAA6Be,IAA7B,EAAmC;AACxC,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCJ,MAAAA,MAAM,CAAC0B,GAAP,CAAWvB,CAAX,EAAcC,CAAd,EAAiBJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmBW,IAAI,CAACZ,CAAD,CAAxC;AACD;AACF;AACF;AAED,OAAO,SAASwB,cAAT,CAAwB3B,MAAxB,EAAgCe,IAAhC,EAAsC;AAC3C,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCJ,MAAAA,MAAM,CAAC0B,GAAP,CAAWvB,CAAX,EAAcC,CAAd,EAAiBJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmBW,IAAI,CAACX,CAAD,CAAxC;AACD;AACF;AACF;AAED,OAAO,SAASwB,SAAT,CAAmB5B,MAAnB,EAA2Be,IAA3B,EAAiC;AACtC,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCJ,MAAAA,MAAM,CAAC0B,GAAP,CAAWvB,CAAX,EAAcC,CAAd,EAAiBJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmBW,IAApC;AACD;AACF;AACF;AAED,OAAO,SAASc,aAAT,CAAuB7B,MAAvB,EAA+B;AACpC,QAAM8B,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,QAAIF,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCH,MAAAA,GAAG,IAAI8B,IAAI,CAACC,GAAL,CAAShC,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAT,EAA2B,CAA3B,KAAiCJ,MAAM,CAACK,OAAP,GAAiB,CAAlD,CAAP;AACD;;AACDyB,IAAAA,KAAK,CAACT,IAAN,CAAWU,IAAI,CAACE,IAAL,CAAUhC,GAAV,CAAX;AACD;;AACD,SAAO6B,KAAP;AACD;AAED,OAAO,SAASI,UAAT,CAAoBlC,MAApB,EAA4B8B,KAA5B,EAAmC;AACxC,OAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCJ,MAAAA,MAAM,CAAC0B,GAAP,CAAWvB,CAAX,EAAcC,CAAd,EAAiBJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmB0B,KAAK,CAAC3B,CAAD,CAAzC;AACD;AACF;AACF;AAED,OAAO,SAASgC,gBAAT,CAA0BnC,MAA1B,EAAkC;AACvC,QAAM8B,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIH,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpCF,MAAAA,GAAG,IAAI8B,IAAI,CAACC,GAAL,CAAShC,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAT,EAA2B,CAA3B,KAAiCJ,MAAM,CAACE,IAAP,GAAc,CAA/C,CAAP;AACD;;AACD4B,IAAAA,KAAK,CAACT,IAAN,CAAWU,IAAI,CAACE,IAAL,CAAUhC,GAAV,CAAX;AACD;;AACD,SAAO6B,KAAP;AACD;AAED,OAAO,SAASM,aAAT,CAAuBpC,MAAvB,EAA+B8B,KAA/B,EAAsC;AAC3C,OAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCJ,MAAAA,MAAM,CAAC0B,GAAP,CAAWvB,CAAX,EAAcC,CAAd,EAAiBJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmB0B,KAAK,CAAC1B,CAAD,CAAzC;AACD;AACF;AACF;AAED,OAAO,SAASiC,WAAT,CAAqBrC,MAArB,EAA6B;AAClC,QAAMsC,OAAO,GAAGtC,MAAM,CAACwB,IAAP,GAAc,CAA9B;AACA,MAAIvB,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpCF,MAAAA,GAAG,IAAI8B,IAAI,CAACC,GAAL,CAAShC,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,CAAT,EAA2B,CAA3B,IAAgCkC,OAAvC;AACD;AACF;;AACD,SAAOP,IAAI,CAACE,IAAL,CAAUhC,GAAV,CAAP;AACD;AAED,OAAO,SAASsC,QAAT,CAAkBvC,MAAlB,EAA0B8B,KAA1B,EAAiC;AACtC,OAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,IAA3B,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,OAA3B,EAAoCD,CAAC,EAArC,EAAyC;AACvCJ,MAAAA,MAAM,CAAC0B,GAAP,CAAWvB,CAAX,EAAcC,CAAd,EAAiBJ,MAAM,CAACM,GAAP,CAAWH,CAAX,EAAcC,CAAd,IAAmB0B,KAApC;AACD;AACF;AACF","sourcesContent":["import { newArray } from './util';\r\n\r\nexport function sumByRow(matrix) {\r\n  let sum = newArray(matrix.rows);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[i] += matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function sumByColumn(matrix) {\r\n  let sum = newArray(matrix.columns);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[j] += matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function sumAll(matrix) {\r\n  let v = 0;\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      v += matrix.get(i, j);\r\n    }\r\n  }\r\n  return v;\r\n}\r\n\r\nexport function productByRow(matrix) {\r\n  let sum = newArray(matrix.rows, 1);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[i] *= matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function productByColumn(matrix) {\r\n  let sum = newArray(matrix.columns, 1);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[j] *= matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function productAll(matrix) {\r\n  let v = 1;\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      v *= matrix.get(i, j);\r\n    }\r\n  }\r\n  return v;\r\n}\r\n\r\nexport function varianceByRow(matrix, unbiased, mean) {\r\n  const rows = matrix.rows;\r\n  const cols = matrix.columns;\r\n  const variance = [];\r\n\r\n  for (let i = 0; i < rows; i++) {\r\n    let sum1 = 0;\r\n    let sum2 = 0;\r\n    let x = 0;\r\n    for (let j = 0; j < cols; j++) {\r\n      x = matrix.get(i, j) - mean[i];\r\n      sum1 += x;\r\n      sum2 += x * x;\r\n    }\r\n    if (unbiased) {\r\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\r\n    } else {\r\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\r\n    }\r\n  }\r\n  return variance;\r\n}\r\n\r\nexport function varianceByColumn(matrix, unbiased, mean) {\r\n  const rows = matrix.rows;\r\n  const cols = matrix.columns;\r\n  const variance = [];\r\n\r\n  for (let j = 0; j < cols; j++) {\r\n    let sum1 = 0;\r\n    let sum2 = 0;\r\n    let x = 0;\r\n    for (let i = 0; i < rows; i++) {\r\n      x = matrix.get(i, j) - mean[j];\r\n      sum1 += x;\r\n      sum2 += x * x;\r\n    }\r\n    if (unbiased) {\r\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\r\n    } else {\r\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\r\n    }\r\n  }\r\n  return variance;\r\n}\r\n\r\nexport function varianceAll(matrix, unbiased, mean) {\r\n  const rows = matrix.rows;\r\n  const cols = matrix.columns;\r\n  const size = rows * cols;\r\n\r\n  let sum1 = 0;\r\n  let sum2 = 0;\r\n  let x = 0;\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < cols; j++) {\r\n      x = matrix.get(i, j) - mean;\r\n      sum1 += x;\r\n      sum2 += x * x;\r\n    }\r\n  }\r\n  if (unbiased) {\r\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\r\n  } else {\r\n    return (sum2 - (sum1 * sum1) / size) / size;\r\n  }\r\n}\r\n\r\nexport function centerByRow(matrix, mean) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function centerByColumn(matrix, mean) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function centerAll(matrix, mean) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) - mean);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getScaleByRow(matrix) {\r\n  const scale = [];\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    let sum = 0;\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\r\n    }\r\n    scale.push(Math.sqrt(sum));\r\n  }\r\n  return scale;\r\n}\r\n\r\nexport function scaleByRow(matrix, scale) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getScaleByColumn(matrix) {\r\n  const scale = [];\r\n  for (let j = 0; j < matrix.columns; j++) {\r\n    let sum = 0;\r\n    for (let i = 0; i < matrix.rows; i++) {\r\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\r\n    }\r\n    scale.push(Math.sqrt(sum));\r\n  }\r\n  return scale;\r\n}\r\n\r\nexport function scaleByColumn(matrix, scale) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getScaleAll(matrix) {\r\n  const divider = matrix.size - 1;\r\n  let sum = 0;\r\n  for (let j = 0; j < matrix.columns; j++) {\r\n    for (let i = 0; i < matrix.rows; i++) {\r\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\r\n    }\r\n  }\r\n  return Math.sqrt(sum);\r\n}\r\n\r\nexport function scaleAll(matrix, scale) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) / scale);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}