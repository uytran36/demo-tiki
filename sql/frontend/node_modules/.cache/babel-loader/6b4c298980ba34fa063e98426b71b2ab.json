{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport GridBase from './base';\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n\n  function Line() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Line.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      type: 'line'\n    });\n  };\n\n  Line.prototype.getGridPath = function (points) {\n    var path = [];\n    each(points, function (point, index) {\n      if (index === 0) {\n        path.push(['M', point.x, point.y]);\n      } else {\n        path.push(['L', point.x, point.y]);\n      }\n    });\n    return path;\n  };\n\n  return Line;\n}(GridBase);\n\nexport default Line;","map":{"version":3,"sources":["../../src/grid/line.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,YAArB;AAEA,OAAO,QAAP,MAAqB,QAArB;;AAEA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmB,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAAnB,WAAA,IAAA,GAAA;;AAoBC;;AAnBQ,EAAA,IAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACE,QAAM,GAAG,GAAG,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,CAAZ;;AACA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,GADL,CAAA,EACQ;AACN,MAAA,IAAI,EAAE;AADA,KADR,CAAA;AAID,GANM;;AAQG,EAAA,IAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,MAAtB,EAAqC;AACnC,QAAM,IAAI,GAAG,EAAb;AACA,IAAA,IAAI,CAAC,MAAD,EAAS,UAAC,KAAD,EAAQ,KAAR,EAAa;AACxB,UAAI,KAAK,KAAK,CAAd,EAAiB;AACf,QAAA,IAAI,CAAC,IAAL,CAAU,CAAC,GAAD,EAAM,KAAK,CAAC,CAAZ,EAAe,KAAK,CAAC,CAArB,CAAV;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,IAAL,CAAU,CAAC,GAAD,EAAM,KAAK,CAAC,CAAZ,EAAe,KAAK,CAAC,CAArB,CAAV;AACD;AACF,KANG,CAAJ;AAOA,WAAO,IAAP;AACD,GAVS;;AAWZ,SAAA,IAAA;AAAC,CApBD,CAAmB,QAAnB,CAAA;;AAsBA,eAAe,IAAf","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport { each } from '@antv/util';\r\nimport GridBase from './base';\r\nvar Line = /** @class */ (function (_super) {\r\n    __extends(Line, _super);\r\n    function Line() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Line.prototype.getDefaultCfg = function () {\r\n        var cfg = _super.prototype.getDefaultCfg.call(this);\r\n        return __assign(__assign({}, cfg), { type: 'line' });\r\n    };\r\n    Line.prototype.getGridPath = function (points) {\r\n        var path = [];\r\n        each(points, function (point, index) {\r\n            if (index === 0) {\r\n                path.push(['M', point.x, point.y]);\r\n            }\r\n            else {\r\n                path.push(['L', point.x, point.y]);\r\n            }\r\n        });\r\n        return path;\r\n    };\r\n    return Line;\r\n}(GridBase));\r\nexport default Line;\r\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}