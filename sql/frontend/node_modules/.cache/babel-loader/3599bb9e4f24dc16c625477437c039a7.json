{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\n\nvar Dodge =\n/** @class */\nfunction (_super) {\n  __extends(Dodge, _super);\n\n  function Dodge(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.cacheMap = {};\n    _this.adjustDataArray = [];\n    _this.mergeData = [];\n    var _a = cfg.marginRatio,\n        marginRatio = _a === void 0 ? MARGIN_RATIO : _a,\n        _b = cfg.dodgeRatio,\n        dodgeRatio = _b === void 0 ? DODGE_RATIO : _b,\n        dodgeBy = cfg.dodgeBy,\n        intervalPadding = cfg.intervalPadding,\n        dodgePadding = cfg.dodgePadding,\n        xDimensionLength = cfg.xDimensionLength,\n        groupNum = cfg.groupNum,\n        defaultSize = cfg.defaultSize,\n        maxColumnWidth = cfg.maxColumnWidth,\n        minColumnWidth = cfg.minColumnWidth,\n        columnWidthRatio = cfg.columnWidthRatio;\n    _this.marginRatio = marginRatio;\n    _this.dodgeRatio = dodgeRatio;\n    _this.dodgeBy = dodgeBy;\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.xDimensionLegenth = xDimensionLength;\n    _this.groupNum = groupNum;\n    _this.defaultSize = defaultSize;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    return _this;\n  }\n\n  Dodge.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray); // 将数据数组展开一层\n\n\n    var mergeData = _.flatten(groupedDataArray);\n\n    var dodgeBy = this.dodgeBy; // 如果指定了分组 dim 的字段\n\n    var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n    this.cacheMap = {};\n    this.adjustDataArray = adjustDataArray;\n    this.mergeData = mergeData;\n    this.adjustData(adjustDataArray, mergeData);\n    this.adjustDataArray = [];\n    this.mergeData = [];\n    return groupedDataArray;\n  };\n\n  Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n    var _this = this;\n\n    var map = this.getDistribution(dim);\n    var groupData = this.groupData(data, dim); // 根据值分组\n\n    _.each(groupData, function (group, key) {\n      var range; // xField 中只有一个值，不需要做 dodge\n\n      if (values.length === 1) {\n        range = {\n          pre: values[0] - 1,\n          next: values[0] + 1\n        };\n      } else {\n        // 如果有多个，则需要获取调整的范围\n        range = _this.getAdjustRange(dim, parseFloat(key), values);\n      }\n\n      _.each(group, function (d) {\n        var value = d[dim];\n        var valueArr = map[value];\n        var valIndex = valueArr.indexOf(frameIndex);\n        d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n      });\n    });\n\n    return [];\n  };\n\n  Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n    var _a = this,\n        dodgeRatio = _a.dodgeRatio,\n        marginRatio = _a.marginRatio,\n        intervalPadding = _a.intervalPadding,\n        dodgePadding = _a.dodgePadding;\n\n    var pre = range.pre,\n        next = range.next;\n    var tickLength = next - pre;\n    var position; // 分多种输入情况\n\n    if (!_.isNil(intervalPadding) && _.isNil(dodgePadding) && intervalPadding >= 0) {\n      // 仅配置intervalPadding\n      var offset = this.getIntervalOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(dodgePadding) && _.isNil(intervalPadding) && dodgePadding >= 0) {\n      // 仅配置dodgePadding\n      var offset = this.getDodgeOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(intervalPadding) && !_.isNil(dodgePadding) && intervalPadding >= 0 && dodgePadding >= 0) {\n      // 同时配置intervalPadding和dodgePadding\n      var offset = this.getIntervalAndDodgeOffset(len, idx);\n      position = pre + offset;\n    } else {\n      // 默认情况\n      var width = tickLength * dodgeRatio / len;\n      var margin = marginRatio * width;\n      var offset = 1 / 2 * (tickLength - len * width - (len - 1) * margin) + ((idx + 1) * width + idx * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n      position = (pre + next) / 2 + offset;\n    }\n\n    return position;\n  };\n\n  Dodge.prototype.getIntervalOnlyOffset = function (len, idx) {\n    var _a = this,\n        defaultSize = _a.defaultSize,\n        intervalPadding = _a.intervalPadding,\n        xDimensionLegenth = _a.xDimensionLegenth,\n        groupNum = _a.groupNum,\n        dodgeRatio = _a.dodgeRatio,\n        maxColumnWidth = _a.maxColumnWidth,\n        minColumnWidth = _a.minColumnWidth,\n        columnWidthRatio = _a.columnWidthRatio;\n\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = (1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum * dodgeRatio / (len - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len; // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n\n    geomWidth = !_.isNil(columnWidthRatio) ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth; // 调整组内间隔\n\n    normalizedDodgePadding = ((1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum - len * geomWidth) / (len - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n\n  Dodge.prototype.getDodgeOnlyOffset = function (len, idx) {\n    var _a = this,\n        defaultSize = _a.defaultSize,\n        dodgePadding = _a.dodgePadding,\n        xDimensionLegenth = _a.xDimensionLegenth,\n        groupNum = _a.groupNum,\n        marginRatio = _a.marginRatio,\n        maxColumnWidth = _a.maxColumnWidth,\n        minColumnWidth = _a.minColumnWidth,\n        columnWidthRatio = _a.columnWidthRatio;\n\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var normalizedIntervalPadding = 1 * marginRatio / (groupNum - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len; // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n\n    geomWidth = columnWidthRatio ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth; // 调整组间距\n\n    normalizedIntervalPadding = (1 - (geomWidth * len + normalizedDodgePadding * (len - 1)) * groupNum) / (groupNum - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n\n  Dodge.prototype.getIntervalAndDodgeOffset = function (len, idx) {\n    var _a = this,\n        intervalPadding = _a.intervalPadding,\n        dodgePadding = _a.dodgePadding,\n        xDimensionLegenth = _a.xDimensionLegenth,\n        groupNum = _a.groupNum;\n\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n\n  Dodge.prototype.getDistribution = function (dim) {\n    var groupedDataArray = this.adjustDataArray;\n    var cacheMap = this.cacheMap;\n    var map = cacheMap[dim];\n\n    if (!map) {\n      map = {};\n\n      _.each(groupedDataArray, function (data, index) {\n        var values = _.valuesOfKey(data, dim);\n\n        if (!values.length) {\n          values.push(0);\n        }\n\n        _.each(values, function (val) {\n          if (!map[val]) {\n            map[val] = [];\n          }\n\n          map[val].push(index);\n        });\n      });\n\n      cacheMap[dim] = map;\n    }\n\n    return map;\n  };\n\n  return Dodge;\n}(Adjust);\n\nexport default Dodge;","map":{"version":3,"sources":["../../src/adjusts/dodge.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\r\nimport * as _ from '@antv/util';\r\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\r\nimport Adjust from './adjust';\r\nvar Dodge = /** @class */ (function (_super) {\r\n    __extends(Dodge, _super);\r\n    function Dodge(cfg) {\r\n        var _this = _super.call(this, cfg) || this;\r\n        _this.cacheMap = {};\r\n        _this.adjustDataArray = [];\r\n        _this.mergeData = [];\r\n        var _a = cfg.marginRatio, marginRatio = _a === void 0 ? MARGIN_RATIO : _a, _b = cfg.dodgeRatio, dodgeRatio = _b === void 0 ? DODGE_RATIO : _b, dodgeBy = cfg.dodgeBy, intervalPadding = cfg.intervalPadding, dodgePadding = cfg.dodgePadding, xDimensionLength = cfg.xDimensionLength, groupNum = cfg.groupNum, defaultSize = cfg.defaultSize, maxColumnWidth = cfg.maxColumnWidth, minColumnWidth = cfg.minColumnWidth, columnWidthRatio = cfg.columnWidthRatio;\r\n        _this.marginRatio = marginRatio;\r\n        _this.dodgeRatio = dodgeRatio;\r\n        _this.dodgeBy = dodgeBy;\r\n        _this.intervalPadding = intervalPadding;\r\n        _this.dodgePadding = dodgePadding;\r\n        _this.xDimensionLegenth = xDimensionLength;\r\n        _this.groupNum = groupNum;\r\n        _this.defaultSize = defaultSize;\r\n        _this.maxColumnWidth = maxColumnWidth;\r\n        _this.minColumnWidth = minColumnWidth;\r\n        _this.columnWidthRatio = columnWidthRatio;\r\n        return _this;\r\n    }\r\n    Dodge.prototype.process = function (groupDataArray) {\r\n        var groupedDataArray = _.clone(groupDataArray);\r\n        // 将数据数组展开一层\r\n        var mergeData = _.flatten(groupedDataArray);\r\n        var dodgeBy = this.dodgeBy;\r\n        // 如果指定了分组 dim 的字段\r\n        var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\r\n        this.cacheMap = {};\r\n        this.adjustDataArray = adjustDataArray;\r\n        this.mergeData = mergeData;\r\n        this.adjustData(adjustDataArray, mergeData);\r\n        this.adjustDataArray = [];\r\n        this.mergeData = [];\r\n        return groupedDataArray;\r\n    };\r\n    Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\r\n        var _this = this;\r\n        var map = this.getDistribution(dim);\r\n        var groupData = this.groupData(data, dim); // 根据值分组\r\n        _.each(groupData, function (group, key) {\r\n            var range;\r\n            // xField 中只有一个值，不需要做 dodge\r\n            if (values.length === 1) {\r\n                range = {\r\n                    pre: values[0] - 1,\r\n                    next: values[0] + 1,\r\n                };\r\n            }\r\n            else {\r\n                // 如果有多个，则需要获取调整的范围\r\n                range = _this.getAdjustRange(dim, parseFloat(key), values);\r\n            }\r\n            _.each(group, function (d) {\r\n                var value = d[dim];\r\n                var valueArr = map[value];\r\n                var valIndex = valueArr.indexOf(frameIndex);\r\n                d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\r\n            });\r\n        });\r\n        return [];\r\n    };\r\n    Dodge.prototype.getDodgeOffset = function (range, idx, len) {\r\n        var _a = this, dodgeRatio = _a.dodgeRatio, marginRatio = _a.marginRatio, intervalPadding = _a.intervalPadding, dodgePadding = _a.dodgePadding;\r\n        var pre = range.pre, next = range.next;\r\n        var tickLength = next - pre;\r\n        var position;\r\n        // 分多种输入情况\r\n        if (!_.isNil(intervalPadding) && _.isNil(dodgePadding) && intervalPadding >= 0) {\r\n            // 仅配置intervalPadding\r\n            var offset = this.getIntervalOnlyOffset(len, idx);\r\n            position = pre + offset;\r\n        }\r\n        else if (!_.isNil(dodgePadding) && _.isNil(intervalPadding) && dodgePadding >= 0) {\r\n            // 仅配置dodgePadding\r\n            var offset = this.getDodgeOnlyOffset(len, idx);\r\n            position = pre + offset;\r\n        }\r\n        else if (!_.isNil(intervalPadding) &&\r\n            !_.isNil(dodgePadding) &&\r\n            intervalPadding >= 0 &&\r\n            dodgePadding >= 0) {\r\n            // 同时配置intervalPadding和dodgePadding\r\n            var offset = this.getIntervalAndDodgeOffset(len, idx);\r\n            position = pre + offset;\r\n        }\r\n        else {\r\n            // 默认情况\r\n            var width = (tickLength * dodgeRatio) / len;\r\n            var margin = marginRatio * width;\r\n            var offset = (1 / 2) * (tickLength - len * width - (len - 1) * margin) +\r\n                ((idx + 1) * width + idx * margin) -\r\n                (1 / 2) * width -\r\n                (1 / 2) * tickLength;\r\n            position = (pre + next) / 2 + offset;\r\n        }\r\n        return position;\r\n    };\r\n    Dodge.prototype.getIntervalOnlyOffset = function (len, idx) {\r\n        var _a = this, defaultSize = _a.defaultSize, intervalPadding = _a.intervalPadding, xDimensionLegenth = _a.xDimensionLegenth, groupNum = _a.groupNum, dodgeRatio = _a.dodgeRatio, maxColumnWidth = _a.maxColumnWidth, minColumnWidth = _a.minColumnWidth, columnWidthRatio = _a.columnWidthRatio;\r\n        var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\r\n        var normalizedDodgePadding = (1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum * dodgeRatio / (len - 1);\r\n        var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\r\n        // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\r\n        geomWidth = (!_.isNil(columnWidthRatio)) ? 1 / groupNum / len * columnWidthRatio : geomWidth;\r\n        if (!_.isNil(maxColumnWidth)) {\r\n            var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\r\n            geomWidth = Math.min(geomWidth, normalizedMaxWidht);\r\n        }\r\n        if (!_.isNil(minColumnWidth)) {\r\n            var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\r\n            geomWidth = Math.max(geomWidth, normalizedMinWidht);\r\n        }\r\n        geomWidth = defaultSize ? (defaultSize / xDimensionLegenth) : geomWidth;\r\n        // 调整组内间隔\r\n        normalizedDodgePadding = ((1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum - len * geomWidth) / (len - 1);\r\n        var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding +\r\n            (1 / 2) * normalizedIntervalPadding) * groupNum -\r\n            normalizedIntervalPadding / 2;\r\n        return offset;\r\n    };\r\n    Dodge.prototype.getDodgeOnlyOffset = function (len, idx) {\r\n        var _a = this, defaultSize = _a.defaultSize, dodgePadding = _a.dodgePadding, xDimensionLegenth = _a.xDimensionLegenth, groupNum = _a.groupNum, marginRatio = _a.marginRatio, maxColumnWidth = _a.maxColumnWidth, minColumnWidth = _a.minColumnWidth, columnWidthRatio = _a.columnWidthRatio;\r\n        var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\r\n        var normalizedIntervalPadding = 1 * marginRatio / (groupNum - 1);\r\n        var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\r\n        // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\r\n        geomWidth = columnWidthRatio ? 1 / groupNum / len * columnWidthRatio : geomWidth;\r\n        if (!_.isNil(maxColumnWidth)) {\r\n            var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\r\n            geomWidth = Math.min(geomWidth, normalizedMaxWidht);\r\n        }\r\n        if (!_.isNil(minColumnWidth)) {\r\n            var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\r\n            geomWidth = Math.max(geomWidth, normalizedMinWidht);\r\n        }\r\n        geomWidth = defaultSize ? (defaultSize / xDimensionLegenth) : geomWidth;\r\n        // 调整组间距\r\n        normalizedIntervalPadding = (1 - (geomWidth * len + normalizedDodgePadding * (len - 1)) * groupNum) / (groupNum - 1);\r\n        var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding +\r\n            (1 / 2) * normalizedIntervalPadding) * groupNum -\r\n            normalizedIntervalPadding / 2;\r\n        return offset;\r\n    };\r\n    Dodge.prototype.getIntervalAndDodgeOffset = function (len, idx) {\r\n        var _a = this, intervalPadding = _a.intervalPadding, dodgePadding = _a.dodgePadding, xDimensionLegenth = _a.xDimensionLegenth, groupNum = _a.groupNum;\r\n        var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\r\n        var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\r\n        var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\r\n        var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding +\r\n            (1 / 2) * normalizedIntervalPadding) * groupNum -\r\n            normalizedIntervalPadding / 2;\r\n        return offset;\r\n    };\r\n    Dodge.prototype.getDistribution = function (dim) {\r\n        var groupedDataArray = this.adjustDataArray;\r\n        var cacheMap = this.cacheMap;\r\n        var map = cacheMap[dim];\r\n        if (!map) {\r\n            map = {};\r\n            _.each(groupedDataArray, function (data, index) {\r\n                var values = _.valuesOfKey(data, dim);\r\n                if (!values.length) {\r\n                    values.push(0);\r\n                }\r\n                _.each(values, function (val) {\r\n                    if (!map[val]) {\r\n                        map[val] = [];\r\n                    }\r\n                    map[val].push(index);\r\n                });\r\n            });\r\n            cacheMap[dim] = map;\r\n        }\r\n        return map;\r\n    };\r\n    return Dodge;\r\n}(Adjust));\r\nexport default Dodge;\r\n//# sourceMappingURL=dodge.js.map"]},"metadata":{},"sourceType":"module"}