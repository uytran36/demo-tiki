{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nvar Graph = require(\"../graphlib\").Graph;\n\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n/*\r\n * Constructs a spanning tree with tight edges and adjusted the input node's\r\n * ranks to achieve this. A tight edge is one that is has a length that matches\r\n * its \"minlen\" attribute.\r\n *\r\n * The basic structure for this function is derived from Gansner, et al., \"A\r\n * Technique for Drawing Directed Graphs.\"\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Graph must be a DAG.\r\n *    2. Graph must be connected.\r\n *    3. Graph must have at least one node.\r\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\r\n *       respects the \"minlen\" property of incident edges.\r\n *    6. Graph edges must have a \"minlen\" property.\r\n *\r\n * Post-conditions:\r\n *\r\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\r\n *      tight.\r\n *\r\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\r\n * edges.\r\n */\n\nfunction feasibleTree(g) {\n  var t = new Graph({\n    directed: false\n  }); // Choose arbitrary node from which to start our tree\n\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n  var edge, delta;\n\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n/*\r\n * Finds a maximal tree of tight edges and returns the number of nodes in the\r\n * tree.\r\n */\n\n\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n          w = v === edgeV ? e.w : edgeV;\n\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n\n  return t.nodeCount();\n}\n/*\r\n * Finds the edge with the smallest slack that is incident on tree and returns\r\n * it.\r\n */\n\n\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/dagre/lib/rank/feasible-tree.js"],"names":["_","require","Graph","slack","module","exports","feasibleTree","g","t","directed","start","nodes","size","nodeCount","setNode","edge","delta","tightTree","findMinSlackEdge","hasNode","v","shiftRanks","dfs","forEach","nodeEdges","e","edgeV","w","setEdge","minBy","edges","node","rank"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _ = require(\"../lodash\");\r\nvar Graph = require(\"../graphlib\").Graph;\r\nvar slack = require(\"./util\").slack;\r\n\r\nmodule.exports = feasibleTree;\r\n\r\n/*\r\n * Constructs a spanning tree with tight edges and adjusted the input node's\r\n * ranks to achieve this. A tight edge is one that is has a length that matches\r\n * its \"minlen\" attribute.\r\n *\r\n * The basic structure for this function is derived from Gansner, et al., \"A\r\n * Technique for Drawing Directed Graphs.\"\r\n *\r\n * Pre-conditions:\r\n *\r\n *    1. Graph must be a DAG.\r\n *    2. Graph must be connected.\r\n *    3. Graph must have at least one node.\r\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\r\n *       respects the \"minlen\" property of incident edges.\r\n *    6. Graph edges must have a \"minlen\" property.\r\n *\r\n * Post-conditions:\r\n *\r\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\r\n *      tight.\r\n *\r\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\r\n * edges.\r\n */\r\nfunction feasibleTree(g) {\r\n  var t = new Graph({ directed: false });\r\n\r\n  // Choose arbitrary node from which to start our tree\r\n  var start = g.nodes()[0];\r\n  var size = g.nodeCount();\r\n  t.setNode(start, {});\r\n\r\n  var edge, delta;\r\n  while (tightTree(t, g) < size) {\r\n    edge = findMinSlackEdge(t, g);\r\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\r\n    shiftRanks(t, g, delta);\r\n  }\r\n\r\n  return t;\r\n}\r\n\r\n/*\r\n * Finds a maximal tree of tight edges and returns the number of nodes in the\r\n * tree.\r\n */\r\nfunction tightTree(t, g) {\r\n  function dfs(v) {\r\n    _.forEach(g.nodeEdges(v), function(e) {\r\n      var edgeV = e.v,\r\n        w = (v === edgeV) ? e.w : edgeV;\r\n      if (!t.hasNode(w) && !slack(g, e)) {\r\n        t.setNode(w, {});\r\n        t.setEdge(v, w, {});\r\n        dfs(w);\r\n      }\r\n    });\r\n  }\r\n\r\n  _.forEach(t.nodes(), dfs);\r\n  return t.nodeCount();\r\n}\r\n\r\n/*\r\n * Finds the edge with the smallest slack that is incident on tree and returns\r\n * it.\r\n */\r\nfunction findMinSlackEdge(t, g) {\r\n  return _.minBy(g.edges(), function(e) {\r\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\r\n      return slack(g, e);\r\n    }\r\n  });\r\n}\r\n\r\nfunction shiftRanks(t, g, delta) {\r\n  _.forEach(t.nodes(), function(v) {\r\n    g.node(v).rank += delta;\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}