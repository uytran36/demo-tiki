{"ast":null,"code":"import * as d3Force from 'd3-force';\nimport { getEdgeTerminal } from '../../util'; // https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\n\nexport default function forceInABox() {\n  function constant(_) {\n    return () => _;\n  }\n\n  let groupBy = d => {\n    return d.cluster;\n  };\n\n  let forceNodeSize = constant(1);\n  let forceCharge = constant(-1);\n  let forceLinkDistance = constant(100);\n  let forceLinkStrength = constant(0.1);\n  let offset = [0, 0];\n  let nodes = [];\n  let nodesMap = {};\n  let links = [];\n  let centerX = 100;\n  let centerY = 100;\n  let foci = {\n    none: {\n      x: 0,\n      y: 0\n    }\n  };\n  let templateNodes = [];\n  let templateForce;\n  let template = 'force';\n  let enableGrouping = true;\n  let strength = 0.1;\n\n  function force(alpha) {\n    if (!enableGrouping) {\n      return force;\n    }\n\n    templateForce.tick();\n    getFocisFromTemplate();\n\n    for (let i = 0, n = nodes.length, node, k = alpha * strength; i < n; ++i) {\n      node = nodes[i];\n      node.vx += (foci[groupBy(node)].x - node.x) * k;\n      node.vy += (foci[groupBy(node)].y - node.y) * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    initializeWithForce();\n  }\n\n  function initializeWithForce() {\n    if (!nodes || !nodes.length) {\n      return;\n    }\n\n    if (groupBy(nodes[0]) === undefined) {\n      throw Error(\"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\");\n    } // checkLinksAsObjects();\n\n\n    const net = getGroupsGraph();\n    templateForce = d3Force.forceSimulation(net.nodes).force('x', d3Force.forceX(centerX).strength(0.1)).force('y', d3Force.forceY(centerY).strength(0.1)).force('collide', d3Force.forceCollide(d => d.r).iterations(4)).force('charge', d3Force.forceManyBody().strength(forceCharge)).force('links', d3Force.forceLink(net.nodes.length ? net.links : []).distance(forceLinkDistance).strength(forceLinkStrength));\n    templateNodes = templateForce.nodes();\n    getFocisFromTemplate();\n  }\n\n  function getGroupsGraph() {\n    const gnodes = [];\n    const glinks = [];\n    const dNodes = {};\n    let clustersList = [];\n    let clustersCounts = {};\n    let clustersLinks = [];\n    clustersCounts = computeClustersNodeCounts(nodes);\n    clustersLinks = computeClustersLinkCounts(links);\n    clustersList = Object.keys(clustersCounts);\n    clustersList.forEach((key, index) => {\n      const val = clustersCounts[key]; // Uses approx meta-node size\n\n      gnodes.push({\n        id: key,\n        size: val.count,\n        r: Math.sqrt(val.sumforceNodeSize / Math.PI)\n      });\n      dNodes[key] = index;\n    });\n    clustersLinks.forEach(l => {\n      const sourceTerminal = getEdgeTerminal(l, 'source');\n      const targetTerminal = getEdgeTerminal(l, 'target');\n      const source = dNodes[sourceTerminal];\n      const target = dNodes[targetTerminal];\n\n      if (source !== undefined && target !== undefined) {\n        glinks.push({\n          source,\n          target,\n          count: l.count\n        });\n      }\n    });\n    return {\n      nodes: gnodes,\n      links: glinks\n    };\n  }\n\n  function computeClustersNodeCounts(nodes) {\n    const clustersCounts = {};\n    nodes.forEach(d => {\n      const key = groupBy(d);\n\n      if (!clustersCounts[key]) {\n        clustersCounts[key] = {\n          count: 0,\n          sumforceNodeSize: 0\n        };\n      }\n    });\n    nodes.forEach(d => {\n      const key = groupBy(d);\n      const nodeSize = forceNodeSize(d);\n      const tmpCount = clustersCounts[key];\n      tmpCount.count = tmpCount.count + 1;\n      tmpCount.sumforceNodeSize = tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\n      clustersCounts[key] = tmpCount;\n    });\n    return clustersCounts;\n  }\n\n  function computeClustersLinkCounts(links) {\n    const dClusterLinks = {};\n    const clusterLinks = [];\n    links.forEach(l => {\n      const key = getLinkKey(l);\n      let count = 0;\n\n      if (dClusterLinks[key] !== undefined) {\n        count = dClusterLinks[key];\n      }\n\n      count += 1;\n      dClusterLinks[key] = count;\n    });\n    const entries = Object.entries(dClusterLinks);\n    entries.forEach(([key, count]) => {\n      const source = key.split('~')[0];\n      const target = key.split('~')[1];\n\n      if (source !== undefined && target !== undefined) {\n        clusterLinks.push({\n          source,\n          target,\n          count\n        });\n      }\n    });\n    return clusterLinks;\n  }\n\n  function getFocisFromTemplate() {\n    foci = {\n      none: {\n        x: 0,\n        y: 0\n      }\n    };\n    templateNodes.forEach(d => {\n      foci[d.id] = {\n        x: d.x - offset[0],\n        y: d.y - offset[1]\n      };\n    });\n    return foci;\n  }\n\n  function getLinkKey(l) {\n    const source = getEdgeTerminal(l, 'source');\n    const target = getEdgeTerminal(l, 'target');\n    const sourceID = groupBy(nodesMap[source]);\n    const targetID = groupBy(nodesMap[target]);\n    return sourceID <= targetID ? `${sourceID}~${targetID}` : `${targetID}~${sourceID}`;\n  }\n\n  function genNodesMap(nodes) {\n    nodesMap = {};\n    nodes.forEach(node => {\n      nodesMap[node.id] = node;\n    });\n  }\n\n  function setTemplate(x) {\n    if (!arguments.length) return template;\n    template = x;\n    initialize();\n    return force;\n  }\n\n  function setGroupBy(x) {\n    if (!arguments.length) return groupBy;\n\n    if (typeof x === 'string') {\n      groupBy = d => {\n        return d[x];\n      };\n\n      return force;\n    }\n\n    groupBy = x;\n    return force;\n  }\n\n  function setEnableGrouping(x) {\n    if (!arguments.length) return enableGrouping;\n    enableGrouping = x;\n    return force;\n  }\n\n  function setStrength(x) {\n    if (!arguments.length) return strength;\n    strength = x;\n    return force;\n  }\n\n  function setCenterX(_) {\n    if (arguments.length) {\n      centerX = _;\n      return force;\n    }\n\n    return centerX;\n  }\n\n  function setCenterY(_) {\n    if (arguments.length) {\n      centerY = _;\n      return force;\n    }\n\n    return centerY;\n  }\n\n  function setNodes(_) {\n    if (arguments.length) {\n      genNodesMap(_ || []);\n      nodes = _ || [];\n      return force;\n    }\n\n    return nodes;\n  }\n\n  function setLinks(_) {\n    if (arguments.length) {\n      links = _ || [];\n      initialize();\n      return force;\n    }\n\n    return links;\n  }\n\n  function setForceNodeSize(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceNodeSize = _;\n      } else {\n        forceNodeSize = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceNodeSize;\n  }\n\n  function setForceCharge(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceCharge = _;\n      } else {\n        forceCharge = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceCharge;\n  }\n\n  function setForceLinkDistance(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkDistance = _;\n      } else {\n        forceLinkDistance = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkDistance;\n  }\n\n  function setForceLinkStrength(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkStrength = _;\n      } else {\n        forceLinkStrength = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkStrength;\n  }\n\n  function setOffset(_) {\n    if (arguments.length) {\n      offset = _;\n      return force;\n    }\n\n    return offset;\n  }\n\n  force.initialize = _ => {\n    nodes = _;\n    initialize();\n  };\n\n  force.template = setTemplate;\n  force.groupBy = setGroupBy;\n  force.enableGrouping = setEnableGrouping;\n  force.strength = setStrength;\n  force.centerX = setCenterX;\n  force.centerY = setCenterY;\n  force.nodes = setNodes;\n  force.links = setLinks;\n  force.forceNodeSize = setForceNodeSize; // Legacy support\n\n  force.nodeSize = force.forceNodeSize;\n  force.forceCharge = setForceCharge;\n  force.forceLinkDistance = setForceLinkDistance;\n  force.forceLinkStrength = setForceLinkStrength;\n  force.offset = setOffset;\n  force.getFocis = getFocisFromTemplate;\n  return force;\n}","map":{"version":3,"sources":["../../../src/layout/force/force-in-a-box.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as d3Force from 'd3-force';\r\nimport { getEdgeTerminal } from '../../util';\r\n// https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\r\nexport default function forceInABox() {\r\n    function constant(_) {\r\n        return () => _;\r\n    }\r\n    let groupBy = (d) => {\r\n        return d.cluster;\r\n    };\r\n    let forceNodeSize = constant(1);\r\n    let forceCharge = constant(-1);\r\n    let forceLinkDistance = constant(100);\r\n    let forceLinkStrength = constant(0.1);\r\n    let offset = [0, 0];\r\n    let nodes = [];\r\n    let nodesMap = {};\r\n    let links = [];\r\n    let centerX = 100;\r\n    let centerY = 100;\r\n    let foci = {\r\n        none: {\r\n            x: 0,\r\n            y: 0,\r\n        },\r\n    };\r\n    let templateNodes = [];\r\n    let templateForce;\r\n    let template = 'force';\r\n    let enableGrouping = true;\r\n    let strength = 0.1;\r\n    function force(alpha) {\r\n        if (!enableGrouping) {\r\n            return force;\r\n        }\r\n        templateForce.tick();\r\n        getFocisFromTemplate();\r\n        for (let i = 0, n = nodes.length, node, k = alpha * strength; i < n; ++i) {\r\n            node = nodes[i];\r\n            node.vx += (foci[groupBy(node)].x - node.x) * k;\r\n            node.vy += (foci[groupBy(node)].y - node.y) * k;\r\n        }\r\n    }\r\n    function initialize() {\r\n        if (!nodes)\r\n            return;\r\n        initializeWithForce();\r\n    }\r\n    function initializeWithForce() {\r\n        if (!nodes || !nodes.length) {\r\n            return;\r\n        }\r\n        if (groupBy(nodes[0]) === undefined) {\r\n            throw Error(\"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\");\r\n        }\r\n        // checkLinksAsObjects();\r\n        const net = getGroupsGraph();\r\n        templateForce = d3Force\r\n            .forceSimulation(net.nodes)\r\n            .force('x', d3Force.forceX(centerX).strength(0.1))\r\n            .force('y', d3Force.forceY(centerY).strength(0.1))\r\n            .force('collide', d3Force.forceCollide((d) => d.r).iterations(4))\r\n            .force('charge', d3Force.forceManyBody().strength(forceCharge))\r\n            .force('links', d3Force\r\n            .forceLink(net.nodes.length ? net.links : [])\r\n            .distance(forceLinkDistance)\r\n            .strength(forceLinkStrength));\r\n        templateNodes = templateForce.nodes();\r\n        getFocisFromTemplate();\r\n    }\r\n    function getGroupsGraph() {\r\n        const gnodes = [];\r\n        const glinks = [];\r\n        const dNodes = {};\r\n        let clustersList = [];\r\n        let clustersCounts = {};\r\n        let clustersLinks = [];\r\n        clustersCounts = computeClustersNodeCounts(nodes);\r\n        clustersLinks = computeClustersLinkCounts(links);\r\n        clustersList = Object.keys(clustersCounts);\r\n        clustersList.forEach((key, index) => {\r\n            const val = clustersCounts[key];\r\n            // Uses approx meta-node size\r\n            gnodes.push({\r\n                id: key,\r\n                size: val.count,\r\n                r: Math.sqrt(val.sumforceNodeSize / Math.PI),\r\n            });\r\n            dNodes[key] = index;\r\n        });\r\n        clustersLinks.forEach((l) => {\r\n            const sourceTerminal = getEdgeTerminal(l, 'source');\r\n            const targetTerminal = getEdgeTerminal(l, 'target');\r\n            const source = dNodes[sourceTerminal];\r\n            const target = dNodes[targetTerminal];\r\n            if (source !== undefined && target !== undefined) {\r\n                glinks.push({\r\n                    source,\r\n                    target,\r\n                    count: l.count,\r\n                });\r\n            }\r\n        });\r\n        return {\r\n            nodes: gnodes,\r\n            links: glinks,\r\n        };\r\n    }\r\n    function computeClustersNodeCounts(nodes) {\r\n        const clustersCounts = {};\r\n        nodes.forEach((d) => {\r\n            const key = groupBy(d);\r\n            if (!clustersCounts[key]) {\r\n                clustersCounts[key] = {\r\n                    count: 0,\r\n                    sumforceNodeSize: 0,\r\n                };\r\n            }\r\n        });\r\n        nodes.forEach((d) => {\r\n            const key = groupBy(d);\r\n            const nodeSize = forceNodeSize(d);\r\n            const tmpCount = clustersCounts[key];\r\n            tmpCount.count = tmpCount.count + 1;\r\n            tmpCount.sumforceNodeSize =\r\n                tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\r\n            clustersCounts[key] = tmpCount;\r\n        });\r\n        return clustersCounts;\r\n    }\r\n    function computeClustersLinkCounts(links) {\r\n        const dClusterLinks = {};\r\n        const clusterLinks = [];\r\n        links.forEach((l) => {\r\n            const key = getLinkKey(l);\r\n            let count = 0;\r\n            if (dClusterLinks[key] !== undefined) {\r\n                count = dClusterLinks[key];\r\n            }\r\n            count += 1;\r\n            dClusterLinks[key] = count;\r\n        });\r\n        const entries = Object.entries(dClusterLinks);\r\n        entries.forEach(([key, count]) => {\r\n            const source = key.split('~')[0];\r\n            const target = key.split('~')[1];\r\n            if (source !== undefined && target !== undefined) {\r\n                clusterLinks.push({\r\n                    source,\r\n                    target,\r\n                    count,\r\n                });\r\n            }\r\n        });\r\n        return clusterLinks;\r\n    }\r\n    function getFocisFromTemplate() {\r\n        foci = {\r\n            none: {\r\n                x: 0,\r\n                y: 0,\r\n            },\r\n        };\r\n        templateNodes.forEach((d) => {\r\n            foci[d.id] = {\r\n                x: d.x - offset[0],\r\n                y: d.y - offset[1],\r\n            };\r\n        });\r\n        return foci;\r\n    }\r\n    function getLinkKey(l) {\r\n        const source = getEdgeTerminal(l, 'source');\r\n        const target = getEdgeTerminal(l, 'target');\r\n        const sourceID = groupBy(nodesMap[source]);\r\n        const targetID = groupBy(nodesMap[target]);\r\n        return sourceID <= targetID\r\n            ? `${sourceID}~${targetID}`\r\n            : `${targetID}~${sourceID}`;\r\n    }\r\n    function genNodesMap(nodes) {\r\n        nodesMap = {};\r\n        nodes.forEach((node) => {\r\n            nodesMap[node.id] = node;\r\n        });\r\n    }\r\n    function setTemplate(x) {\r\n        if (!arguments.length)\r\n            return template;\r\n        template = x;\r\n        initialize();\r\n        return force;\r\n    }\r\n    function setGroupBy(x) {\r\n        if (!arguments.length)\r\n            return groupBy;\r\n        if (typeof x === 'string') {\r\n            groupBy = (d) => {\r\n                return d[x];\r\n            };\r\n            return force;\r\n        }\r\n        groupBy = x;\r\n        return force;\r\n    }\r\n    function setEnableGrouping(x) {\r\n        if (!arguments.length)\r\n            return enableGrouping;\r\n        enableGrouping = x;\r\n        return force;\r\n    }\r\n    function setStrength(x) {\r\n        if (!arguments.length)\r\n            return strength;\r\n        strength = x;\r\n        return force;\r\n    }\r\n    function setCenterX(_) {\r\n        if (arguments.length) {\r\n            centerX = _;\r\n            return force;\r\n        }\r\n        return centerX;\r\n    }\r\n    function setCenterY(_) {\r\n        if (arguments.length) {\r\n            centerY = _;\r\n            return force;\r\n        }\r\n        return centerY;\r\n    }\r\n    function setNodes(_) {\r\n        if (arguments.length) {\r\n            genNodesMap(_ || []);\r\n            nodes = _ || [];\r\n            return force;\r\n        }\r\n        return nodes;\r\n    }\r\n    function setLinks(_) {\r\n        if (arguments.length) {\r\n            links = _ || [];\r\n            initialize();\r\n            return force;\r\n        }\r\n        return links;\r\n    }\r\n    function setForceNodeSize(_) {\r\n        if (arguments.length) {\r\n            if (typeof _ === 'function') {\r\n                forceNodeSize = _;\r\n            }\r\n            else {\r\n                forceNodeSize = constant(+_);\r\n            }\r\n            initialize();\r\n            return force;\r\n        }\r\n        return forceNodeSize;\r\n    }\r\n    function setForceCharge(_) {\r\n        if (arguments.length) {\r\n            if (typeof _ === 'function') {\r\n                forceCharge = _;\r\n            }\r\n            else {\r\n                forceCharge = constant(+_);\r\n            }\r\n            initialize();\r\n            return force;\r\n        }\r\n        return forceCharge;\r\n    }\r\n    function setForceLinkDistance(_) {\r\n        if (arguments.length) {\r\n            if (typeof _ === 'function') {\r\n                forceLinkDistance = _;\r\n            }\r\n            else {\r\n                forceLinkDistance = constant(+_);\r\n            }\r\n            initialize();\r\n            return force;\r\n        }\r\n        return forceLinkDistance;\r\n    }\r\n    function setForceLinkStrength(_) {\r\n        if (arguments.length) {\r\n            if (typeof _ === 'function') {\r\n                forceLinkStrength = _;\r\n            }\r\n            else {\r\n                forceLinkStrength = constant(+_);\r\n            }\r\n            initialize();\r\n            return force;\r\n        }\r\n        return forceLinkStrength;\r\n    }\r\n    function setOffset(_) {\r\n        if (arguments.length) {\r\n            offset = _;\r\n            return force;\r\n        }\r\n        return offset;\r\n    }\r\n    force.initialize = (_) => {\r\n        nodes = _;\r\n        initialize();\r\n    };\r\n    force.template = setTemplate;\r\n    force.groupBy = setGroupBy;\r\n    force.enableGrouping = setEnableGrouping;\r\n    force.strength = setStrength;\r\n    force.centerX = setCenterX;\r\n    force.centerY = setCenterY;\r\n    force.nodes = setNodes;\r\n    force.links = setLinks;\r\n    force.forceNodeSize = setForceNodeSize;\r\n    // Legacy support\r\n    force.nodeSize = force.forceNodeSize;\r\n    force.forceCharge = setForceCharge;\r\n    force.forceLinkDistance = setForceLinkDistance;\r\n    force.forceLinkStrength = setForceLinkStrength;\r\n    force.offset = setOffset;\r\n    force.getFocis = getFocisFromTemplate;\r\n    return force;\r\n}\r\n//# sourceMappingURL=force-in-a-box.js.map"]},"metadata":{},"sourceType":"module"}