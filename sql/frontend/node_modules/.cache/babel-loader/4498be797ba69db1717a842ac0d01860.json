{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, filter, isMatch } from '@antv/util';\nimport { slider, interaction, animation, theme, scale, annotation, scrollbar, limitInPlot, state } from '../../adaptor/common';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { interval } from '../../adaptor/geometries';\nimport { flow, transformLabel, deepAssign, findGeometry, adjustYMetaByZero, pick } from '../../utils';\nimport { getDataWhetherPecentage, getDeepPercent } from '../../utils/transform/percent';\nimport { brushInteraction } from '../../adaptor/brush';\n/**\r\n * defaultOptions\r\n * @param params\r\n */\n\nfunction defaultOptions(params) {\n  var options = params.options; // 默认 legend 位置\n\n  var legend = options.legend;\n  var seriesField = options.seriesField,\n      isStack = options.isStack;\n\n  if (seriesField) {\n    if (legend !== false) {\n      legend = __assign({\n        position: isStack ? 'right-top' : 'top-left'\n      }, legend);\n    }\n  } else {\n    legend = false;\n  } // @ts-ignore 直接改值\n\n\n  params.options.legend = legend;\n  return params;\n}\n/**\r\n * 字段\r\n * @param params\r\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      columnStyle = options.columnStyle,\n      color = options.color,\n      columnWidthRatio = options.columnWidthRatio,\n      isPercent = options.isPercent,\n      isGroup = options.isGroup,\n      isStack = options.isStack,\n      xField = options.xField,\n      yField = options.yField,\n      seriesField = options.seriesField,\n      groupField = options.groupField,\n      tooltip = options.tooltip;\n  var percentData = isPercent && isGroup && isStack ? getDeepPercent(data, yField, [xField, groupField], yField) : getDataWhetherPecentage(data, yField, xField, yField, isPercent);\n  var chartData = []; // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach(function (item) {\n      var stackedItem = chartData.find(function (v) {\n        return v[xField] === item[xField] && v[seriesField] === item[seriesField];\n      });\n\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push(__assign({}, item));\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n\n  chart.data(chartData); // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function (datum) {\n      return {\n        name: isGroup && isStack ? datum[seriesField] + \" - \" + datum[groupField] : datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        style: columnStyle,\n        color: color\n      }\n    }\n  });\n  interval(p);\n  return p;\n}\n/**\r\n * meta 配置\r\n * @param params\r\n */\n\n\nexport function meta(params) {\n  var _a, _b;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField,\n      data = options.data,\n      isPercent = options.isPercent;\n  var percentYMeta = isPercent ? {\n    max: 1,\n    min: 0,\n    minLimit: 0,\n    maxLimit: 1\n  } : {};\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a), (_b = {}, _b[xField] = {\n    type: 'cat'\n  }, _b[yField] = __assign(__assign({}, adjustYMetaByZero(data, yField)), percentYMeta), _b)))(params);\n}\n/**\r\n * axis 配置\r\n * @param params\r\n */\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n/**\r\n * legend 配置\r\n * @param params\r\n */\n\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      seriesField = options.seriesField;\n\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\r\n * 数据标签\r\n * @param params\r\n */\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField,\n      isRange = options.isRange;\n  var geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: (cfg === null || cfg === void 0 ? void 0 : cfg.position) ? undefined : [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(isRange ? __assign({\n        content: function (item) {\n          var _a;\n\n          return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n        }\n      }, cfg) : cfg))\n    });\n  }\n\n  return params;\n}\n/**\r\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\r\n * @param params\r\n */\n\n\nfunction columnTooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip,\n      isGroup = options.isGroup,\n      isStack = options.isStack,\n      groupField = options.groupField,\n      data = options.data,\n      xField = options.xField,\n      yField = options.yField,\n      seriesField = options.seriesField;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip; // fix: https://github.com/antvis/G2Plot/issues/2572\n\n    if (isGroup && isStack) {\n      var tooltipFormatter_1 = (tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.formatter) || function (datum) {\n        return {\n          name: datum[seriesField] + \" - \" + datum[groupField],\n          value: datum[yField]\n        };\n      };\n\n      tooltipOptions = __assign(__assign({}, tooltipOptions), {\n        customItems: function (originalItems) {\n          var items = [];\n          each(originalItems, function (item) {\n            // Find datas in same cluster\n            var datas = filter(data, function (d) {\n              return isMatch(d, pick(item.data, [xField, seriesField]));\n            });\n            datas.forEach(function (datum) {\n              items.push(__assign(__assign(__assign({}, item), {\n                value: datum[yField],\n                data: datum,\n                mappingData: {\n                  _origin: datum\n                }\n              }), tooltipFormatter_1(datum)));\n            });\n          });\n          return items;\n        }\n      });\n    }\n\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n/**\r\n * 柱形图适配器\r\n * @param params\r\n */\n\n\nexport function adaptor(params, isBar) {\n  if (isBar === void 0) {\n    isBar = false;\n  }\n\n  var options = params.options;\n  var seriesField = options.seriesField;\n  return flow(defaultOptions, // 处理默认配置\n  theme, // theme 需要在 geometry 之前\n  state, geometry, meta, axis, legend, columnTooltip, slider, scrollbar, label, brushInteraction, interaction, animation, annotation(), conversionTag(options.yField, !isBar, !!seriesField), // 有拆分的时候禁用转化率\n  connectedArea(!options.isStack), limitInPlot)(params);\n}","map":{"version":3,"sources":["../../../src/plots/column/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Types } from '@antv/g2';\nimport { each, filter, isMatch } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport {\n  slider,\n  interaction,\n  animation,\n  theme,\n  scale,\n  annotation,\n  scrollbar,\n  limitInPlot,\n  state,\n} from '../../adaptor/common';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { interval } from '../../adaptor/geometries';\nimport { flow, transformLabel, deepAssign, findGeometry, adjustYMetaByZero, pick } from '../../utils';\nimport { getDataWhetherPecentage, getDeepPercent } from '../../utils/transform/percent';\nimport { Datum } from '../../types';\nimport { ColumnOptions } from './types';\n\n/**\n * defaultOptions\n * @param params\n */\nfunction defaultOptions(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { options } = params;\n  // 默认 legend 位置\n  let { legend } = options;\n  const { seriesField, isStack } = options;\n\n  if (seriesField) {\n    if (legend !== false) {\n      legend = {\n        position: isStack ? 'right-top' : 'top-left',\n        ...legend,\n      };\n    }\n  } else {\n    legend = false;\n  }\n\n  // @ts-ignore 直接改值\n  params.options.legend = legend;\n  return params;\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    columnStyle,\n    color,\n    columnWidthRatio,\n    isPercent,\n    isGroup,\n    isStack,\n    xField,\n    yField,\n    seriesField,\n    groupField,\n    tooltip,\n  } = options;\n\n  const percentData =\n    isPercent && isGroup && isStack\n      ? getDeepPercent(data, yField, [xField, groupField], yField)\n      : getDataWhetherPecentage(data, yField, xField, yField, isPercent);\n\n  let chartData = [];\n\n  // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach((item) => {\n      const stackedItem = chartData.find((v) => v[xField] === item[xField] && v[seriesField] === item[seriesField]);\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push({ ...item });\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n\n  chart.data(chartData);\n\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  const tooltipOptions = isPercent\n    ? {\n        formatter: (datum: Datum) => ({\n          name:\n            isGroup && isStack ? `${datum[seriesField]} - ${datum[groupField]}` : datum[seriesField] || datum[xField],\n          value: (Number(datum[yField]) * 100).toFixed(2) + '%',\n        }),\n        ...tooltip,\n      }\n    : tooltip;\n\n  const p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        style: columnStyle,\n        color,\n      },\n    },\n  });\n  interval(p);\n\n  return p;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField, data, isPercent } = options;\n\n  const percentYMeta = isPercent ? { max: 1, min: 0, minLimit: 0, maxLimit: 1 } : {};\n\n  return flow(\n    scale(\n      {\n        [xField]: xAxis,\n        [yField]: yAxis,\n      },\n      {\n        [xField]: {\n          type: 'cat',\n        },\n        [yField]: {\n          ...adjustYMetaByZero(data, yField),\n          ...percentYMeta,\n        },\n      }\n    )\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { legend, seriesField } = options;\n\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { label, yField, isRange } = options;\n\n  const geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: cfg?.position\n          ? undefined\n          : [\n              { type: 'interval-adjust-position' },\n              { type: 'interval-hide-overlap' },\n              { type: 'adjust-color' },\n              { type: 'limit-in-plot', cfg: { action: 'hide' } },\n            ],\n        ...transformLabel(\n          isRange\n            ? {\n                content: (item: object) => {\n                  return item[yField]?.join('-');\n                },\n                ...cfg,\n              }\n            : cfg\n        ),\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\n * @param params\n */\nfunction columnTooltip(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { tooltip, isGroup, isStack, groupField, data, xField, yField, seriesField } = options;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    let tooltipOptions = tooltip;\n    // fix: https://github.com/antvis/G2Plot/issues/2572\n    if (isGroup && isStack) {\n      const tooltipFormatter =\n        tooltipOptions?.formatter ||\n        ((datum: Datum) => ({ name: `${datum[seriesField]} - ${datum[groupField]}`, value: datum[yField] }));\n      tooltipOptions = {\n        ...tooltipOptions,\n        customItems: (originalItems: Types.TooltipItem[]) => {\n          const items: Types.TooltipItem[] = [];\n          each(originalItems, (item: Types.TooltipItem) => {\n            // Find datas in same cluster\n            const datas = filter(data, (d) => isMatch(d, pick(item.data, [xField, seriesField])));\n            datas.forEach((datum) => {\n              items.push({\n                ...item,\n                value: datum[yField],\n                data: datum,\n                mappingData: { _origin: datum },\n                ...tooltipFormatter(datum),\n              });\n            });\n          });\n          return items;\n        },\n      };\n    }\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n\n/**\n * 柱形图适配器\n * @param params\n */\nexport function adaptor(params: Params<ColumnOptions>, isBar = false) {\n  const { options } = params;\n  const { seriesField } = options;\n  return flow(\n    defaultOptions, // 处理默认配置\n    theme, // theme 需要在 geometry 之前\n    state,\n    geometry,\n    meta,\n    axis,\n    legend,\n    columnTooltip,\n    slider,\n    scrollbar,\n    label,\n    interaction,\n    animation,\n    annotation(),\n    conversionTag<ColumnOptions>(options.yField, !isBar, !!seriesField), // 有拆分的时候禁用转化率\n    connectedArea<ColumnOptions>(!options.isStack),\n    limitInPlot\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}