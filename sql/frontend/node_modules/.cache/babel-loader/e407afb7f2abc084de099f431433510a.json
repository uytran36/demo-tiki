{"ast":null,"code":"/*\r\n * 抽取pathSegment中的关键点\r\n * M,L,A,Q,H,V一个端点\r\n * Q, S抽取一个端点，一个控制点\r\n * C抽取一个端点，两个控制点\r\n */\nfunction _getSegmentPoints(segment) {\n  var points = [];\n\n  switch (segment[0]) {\n    case 'M':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'L':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'A':\n      points.push([segment[6], segment[7]]);\n      break;\n\n    case 'Q':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'T':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'C':\n      points.push([segment[5], segment[6]]);\n      points.push([segment[1], segment[2]]);\n      points.push([segment[3], segment[4]]);\n      break;\n\n    case 'S':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'H':\n      points.push([segment[1], segment[1]]);\n      break;\n\n    case 'V':\n      points.push([segment[1], segment[1]]);\n      break;\n\n    default:\n  }\n\n  return points;\n} // 将两个点均分成count个点\n\n\nfunction _splitPoints(points, former, count) {\n  var result = [].concat(points);\n  var index;\n  var t = 1 / (count + 1);\n\n  var formerEnd = _getSegmentPoints(former)[0];\n\n  for (var i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    }\n  }\n\n  return result;\n}\n\nexport default function formatPath(fromPath, toPath) {\n  if (fromPath.length <= 1) {\n    return fromPath;\n  }\n\n  var points;\n\n  for (var i = 0; i < toPath.length; i++) {\n    if (fromPath[i][0] !== toPath[i][0]) {\n      // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n      points = _getSegmentPoints(fromPath[i]);\n\n      switch (toPath[i][0]) {\n        case 'M':\n          fromPath[i] = ['M'].concat(points[0]);\n          break;\n\n        case 'L':\n          fromPath[i] = ['L'].concat(points[0]);\n          break;\n\n        case 'A':\n          fromPath[i] = [].concat(toPath[i]);\n          fromPath[i][6] = points[0][0];\n          fromPath[i][7] = points[0][1];\n          break;\n\n        case 'Q':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        case 'T':\n          fromPath[i] = ['T'].concat(points[0]);\n          break;\n\n        case 'C':\n          if (points.length < 3) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 2);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        case 'S':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        default:\n          fromPath[i] = toPath[i];\n      }\n    }\n  }\n\n  return fromPath;\n}","map":{"version":3,"sources":["../src/format-path.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * 抽取pathSegment中的关键点\r\n * M,L,A,Q,H,V一个端点\r\n * Q, S抽取一个端点，一个控制点\r\n * C抽取一个端点，两个控制点\r\n */\r\nfunction _getSegmentPoints(segment) {\r\n    var points = [];\r\n    switch (segment[0]) {\r\n        case 'M':\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'L':\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'A':\r\n            points.push([segment[6], segment[7]]);\r\n            break;\r\n        case 'Q':\r\n            points.push([segment[3], segment[4]]);\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'T':\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'C':\r\n            points.push([segment[5], segment[6]]);\r\n            points.push([segment[1], segment[2]]);\r\n            points.push([segment[3], segment[4]]);\r\n            break;\r\n        case 'S':\r\n            points.push([segment[3], segment[4]]);\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'H':\r\n            points.push([segment[1], segment[1]]);\r\n            break;\r\n        case 'V':\r\n            points.push([segment[1], segment[1]]);\r\n            break;\r\n        default:\r\n    }\r\n    return points;\r\n}\r\n// 将两个点均分成count个点\r\nfunction _splitPoints(points, former, count) {\r\n    var result = [].concat(points);\r\n    var index;\r\n    var t = 1 / (count + 1);\r\n    var formerEnd = _getSegmentPoints(former)[0];\r\n    for (var i = 1; i <= count; i++) {\r\n        t *= i;\r\n        index = Math.floor(points.length * t);\r\n        if (index === 0) {\r\n            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\r\n        }\r\n        else {\r\n            result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport default function formatPath(fromPath, toPath) {\r\n    if (fromPath.length <= 1) {\r\n        return fromPath;\r\n    }\r\n    var points;\r\n    for (var i = 0; i < toPath.length; i++) {\r\n        if (fromPath[i][0] !== toPath[i][0]) {\r\n            // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\r\n            points = _getSegmentPoints(fromPath[i]);\r\n            switch (toPath[i][0]) {\r\n                case 'M':\r\n                    fromPath[i] = ['M'].concat(points[0]);\r\n                    break;\r\n                case 'L':\r\n                    fromPath[i] = ['L'].concat(points[0]);\r\n                    break;\r\n                case 'A':\r\n                    fromPath[i] = [].concat(toPath[i]);\r\n                    fromPath[i][6] = points[0][0];\r\n                    fromPath[i][7] = points[0][1];\r\n                    break;\r\n                case 'Q':\r\n                    if (points.length < 2) {\r\n                        if (i > 0) {\r\n                            points = _splitPoints(points, fromPath[i - 1], 1);\r\n                        }\r\n                        else {\r\n                            fromPath[i] = toPath[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\r\n                    break;\r\n                case 'T':\r\n                    fromPath[i] = ['T'].concat(points[0]);\r\n                    break;\r\n                case 'C':\r\n                    if (points.length < 3) {\r\n                        if (i > 0) {\r\n                            points = _splitPoints(points, fromPath[i - 1], 2);\r\n                        }\r\n                        else {\r\n                            fromPath[i] = toPath[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\r\n                    break;\r\n                case 'S':\r\n                    if (points.length < 2) {\r\n                        if (i > 0) {\r\n                            points = _splitPoints(points, fromPath[i - 1], 1);\r\n                        }\r\n                        else {\r\n                            fromPath[i] = toPath[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\r\n                    break;\r\n                default:\r\n                    fromPath[i] = toPath[i];\r\n            }\r\n        }\r\n    }\r\n    return fromPath;\r\n}\r\n//# sourceMappingURL=format-path.js.map"]},"metadata":{},"sourceType":"module"}