{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _queue = _interopRequireDefault(require(\"./structs/queue\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n *\n * @param callbacks\n * allowTraversal: 确定 BFS 是否从顶点沿着边遍历到其邻居，默认情况下，同一个节点只能遍历一次\n * enterNode: 当 BFS 访问某个节点时调用\n * leaveNode: 当 BFS 访问访问结束某个节点时调用\n */\n\n\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n      var id = next;\n\n      if (!seen[id]) {\n        seen[id] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * 广度优先遍历图\n * @param graph Graph 图实例\n * @param startNode 开始遍历的节点\n * @param originalCallbacks 回调\n */\n\n\nvar breadthFirstSearch = function breadthFirstSearch(graphData, startNodeId, originalCallbacks) {\n  var callbacks = initCallbacks(originalCallbacks);\n  var nodeQueue = new _queue.default();\n  var _a = graphData.edges,\n      edges = _a === void 0 ? [] : _a; // 初始化队列元素\n\n  nodeQueue.enqueue(startNodeId);\n  var previousNode = '';\n\n  var _loop_1 = function _loop_1() {\n    var currentNode = nodeQueue.dequeue();\n    callbacks.enter({\n      current: currentNode,\n      previous: previousNode\n    }); // 将所有邻居添加到队列中以便遍历\n\n    (0, _util.getNeighbors)(currentNode, edges, 'target').forEach(function (nextNode) {\n      if (callbacks.allowTraversal({\n        previous: previousNode,\n        current: currentNode,\n        next: nextNode\n      })) {\n        nodeQueue.enqueue(nextNode);\n      }\n    });\n    callbacks.leave({\n      current: currentNode,\n      previous: previousNode\n    }); // 下一次循环之前存储当前顶点\n\n    previousNode = currentNode;\n  }; // 遍历队列中的所有顶点\n\n\n  while (!nodeQueue.isEmpty()) {\n    _loop_1();\n  }\n};\n\nvar _default = breadthFirstSearch;\nexports.default = _default;","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/@antv/algorithm/lib/bfs.js"],"names":["Object","defineProperty","exports","value","default","_queue","_interopRequireDefault","require","_util","obj","__esModule","initCallbacks","callbacks","initiatedCallback","stubCallback","allowTraversalCallback","seen","_a","next","id","allowTraversal","enter","leave","breadthFirstSearch","graphData","startNodeId","originalCallbacks","nodeQueue","edges","enqueue","previousNode","_loop_1","currentNode","dequeue","current","previous","getNeighbors","forEach","nextNode","isEmpty","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _queue = _interopRequireDefault(require(\"./structs/queue\"));\n\nvar _util = require(\"./util\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *\n * @param callbacks\n * allowTraversal: 确定 BFS 是否从顶点沿着边遍历到其邻居，默认情况下，同一个节点只能遍历一次\n * enterNode: 当 BFS 访问某个节点时调用\n * leaveNode: 当 BFS 访问访问结束某个节点时调用\n */\nfunction initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n      var id = next;\n\n      if (!seen[id]) {\n        seen[id] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * 广度优先遍历图\n * @param graph Graph 图实例\n * @param startNode 开始遍历的节点\n * @param originalCallbacks 回调\n */\n\n\nvar breadthFirstSearch = function breadthFirstSearch(graphData, startNodeId, originalCallbacks) {\n  var callbacks = initCallbacks(originalCallbacks);\n  var nodeQueue = new _queue.default();\n  var _a = graphData.edges,\n      edges = _a === void 0 ? [] : _a; // 初始化队列元素\n\n  nodeQueue.enqueue(startNodeId);\n  var previousNode = '';\n\n  var _loop_1 = function _loop_1() {\n    var currentNode = nodeQueue.dequeue();\n    callbacks.enter({\n      current: currentNode,\n      previous: previousNode\n    }); // 将所有邻居添加到队列中以便遍历\n\n    (0, _util.getNeighbors)(currentNode, edges, 'target').forEach(function (nextNode) {\n      if (callbacks.allowTraversal({\n        previous: previousNode,\n        current: currentNode,\n        next: nextNode\n      })) {\n        nodeQueue.enqueue(nextNode);\n      }\n    });\n    callbacks.leave({\n      current: currentNode,\n      previous: previousNode\n    }); // 下一次循环之前存储当前顶点\n\n    previousNode = currentNode;\n  }; // 遍历队列中的所有顶点\n\n\n  while (!nodeQueue.isEmpty()) {\n    _loop_1();\n  }\n};\n\nvar _default = breadthFirstSearch;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}