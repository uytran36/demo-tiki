{"ast":null,"code":"import Matrix from './matrix';\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !Array.isArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const {\n    center = true,\n    scale = true\n  } = options;\n\n  if (center) {\n    xMatrix.center('column');\n\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n\n  if (scale) {\n    xMatrix.scale('column');\n\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', {\n    unbiased: true\n  });\n  const sdy = yIsSame ? sdx : yMatrix.standardDeviation('column', {\n    unbiased: true\n  });\n  const corr = xMatrix.transpose().mmul(yMatrix);\n\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(i, j, corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n\n  return corr;\n}","map":{"version":3,"sources":["D:/SQL/sqlindex2/sql/frontend/node_modules/ml-matrix/src/correlation.js"],"names":["Matrix","correlation","xMatrix","yMatrix","options","yIsSame","isMatrix","Array","isArray","rows","TypeError","center","scale","sdx","standardDeviation","unbiased","sdy","corr","transpose","mmul","i","j","columns","set","get"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,OAAO,GAAGD,OAAxC,EAAiDE,OAAO,GAAG,EAA3D,EAA+D;AACpEF,EAAAA,OAAO,GAAG,IAAIF,MAAJ,CAAWE,OAAX,CAAV;AACA,MAAIG,OAAO,GAAG,KAAd;;AACA,MACE,OAAOF,OAAP,KAAmB,QAAnB,IACA,CAACH,MAAM,CAACM,QAAP,CAAgBH,OAAhB,CADD,IAEA,CAACI,KAAK,CAACC,OAAN,CAAcL,OAAd,CAHH,EAIE;AACAC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAG,IAAAA,OAAO,GAAG,IAAV;AACD,GARD,MAQO;AACLF,IAAAA,OAAO,GAAG,IAAIH,MAAJ,CAAWG,OAAX,CAAV;AACD;;AACD,MAAID,OAAO,CAACO,IAAR,KAAiBN,OAAO,CAACM,IAA7B,EAAmC;AACjC,UAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AACD;;AAED,QAAM;AAAEC,IAAAA,MAAM,GAAG,IAAX;AAAiBC,IAAAA,KAAK,GAAG;AAAzB,MAAkCR,OAAxC;;AACA,MAAIO,MAAJ,EAAY;AACVT,IAAAA,OAAO,CAACS,MAAR,CAAe,QAAf;;AACA,QAAI,CAACN,OAAL,EAAc;AACZF,MAAAA,OAAO,CAACQ,MAAR,CAAe,QAAf;AACD;AACF;;AACD,MAAIC,KAAJ,EAAW;AACTV,IAAAA,OAAO,CAACU,KAAR,CAAc,QAAd;;AACA,QAAI,CAACP,OAAL,EAAc;AACZF,MAAAA,OAAO,CAACS,KAAR,CAAc,QAAd;AACD;AACF;;AAED,QAAMC,GAAG,GAAGX,OAAO,CAACY,iBAAR,CAA0B,QAA1B,EAAoC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAApC,CAAZ;AACA,QAAMC,GAAG,GAAGX,OAAO,GACfQ,GADe,GAEfV,OAAO,CAACW,iBAAR,CAA0B,QAA1B,EAAoC;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAApC,CAFJ;AAIA,QAAME,IAAI,GAAGf,OAAO,CAACgB,SAAR,GAAoBC,IAApB,CAAyBhB,OAAzB,CAAb;;AACA,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACR,IAAzB,EAA+BW,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrCJ,MAAAA,IAAI,CAACM,GAAL,CACEH,CADF,EAEEC,CAFF,EAGEJ,IAAI,CAACO,GAAL,CAASJ,CAAT,EAAYC,CAAZ,KAAkB,KAAKR,GAAG,CAACO,CAAD,CAAH,GAASJ,GAAG,CAACK,CAAD,CAAjB,CAAlB,KAA4C,KAAKnB,OAAO,CAACO,IAAR,GAAe,CAApB,CAA5C,CAHF;AAKD;AACF;;AACD,SAAOQ,IAAP;AACD","sourcesContent":["import Matrix from './matrix';\r\n\r\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\r\n  xMatrix = new Matrix(xMatrix);\r\n  let yIsSame = false;\r\n  if (\r\n    typeof yMatrix === 'object' &&\r\n    !Matrix.isMatrix(yMatrix) &&\r\n    !Array.isArray(yMatrix)\r\n  ) {\r\n    options = yMatrix;\r\n    yMatrix = xMatrix;\r\n    yIsSame = true;\r\n  } else {\r\n    yMatrix = new Matrix(yMatrix);\r\n  }\r\n  if (xMatrix.rows !== yMatrix.rows) {\r\n    throw new TypeError('Both matrices must have the same number of rows');\r\n  }\r\n\r\n  const { center = true, scale = true } = options;\r\n  if (center) {\r\n    xMatrix.center('column');\r\n    if (!yIsSame) {\r\n      yMatrix.center('column');\r\n    }\r\n  }\r\n  if (scale) {\r\n    xMatrix.scale('column');\r\n    if (!yIsSame) {\r\n      yMatrix.scale('column');\r\n    }\r\n  }\r\n\r\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\r\n  const sdy = yIsSame\r\n    ? sdx\r\n    : yMatrix.standardDeviation('column', { unbiased: true });\r\n\r\n  const corr = xMatrix.transpose().mmul(yMatrix);\r\n  for (let i = 0; i < corr.rows; i++) {\r\n    for (let j = 0; j < corr.columns; j++) {\r\n      corr.set(\r\n        i,\r\n        j,\r\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\r\n      );\r\n    }\r\n  }\r\n  return corr;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}