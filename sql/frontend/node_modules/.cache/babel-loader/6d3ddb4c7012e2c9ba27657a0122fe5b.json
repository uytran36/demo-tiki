{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\n\nvar GridBase =\n/** @class */\nfunction (_super) {\n  __extends(GridBase, _super);\n\n  function GridBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'grid',\n      line: {},\n      alternateColor: null,\n      capture: false,\n      items: [],\n      closed: false,\n      defaultCfg: {\n        line: {\n          type: 'line',\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * 获取栅格线的类型\r\n   * @return {string} 栅格线类型\r\n   */\n\n\n  GridBase.prototype.getLineType = function () {\n    var line = this.get('line') || this.get('defaultCfg').line;\n    return line.type;\n  };\n\n  GridBase.prototype.renderInner = function (group) {\n    this.drawGrid(group);\n  };\n\n  GridBase.prototype.getAlternatePath = function (prePoints, points) {\n    var regionPath = this.getGridPath(prePoints);\n    var reversePoints = points.slice(0).reverse();\n    var nextPath = this.getGridPath(reversePoints, true);\n    var closed = this.get('closed');\n\n    if (closed) {\n      regionPath = regionPath.concat(nextPath);\n    } else {\n      nextPath[0][0] = 'L'; // 更新第一个节点\n\n      regionPath = regionPath.concat(nextPath);\n      regionPath.push(['Z']);\n    }\n\n    return regionPath;\n  }; // 获取路径的配置项\n\n\n  GridBase.prototype.getPathStyle = function () {\n    return this.get('line').style;\n  }; // 绘制栅格\n\n\n  GridBase.prototype.drawGrid = function (group) {\n    var _this = this;\n\n    var line = this.get('line');\n    var items = this.get('items');\n    var alternateColor = this.get('alternateColor');\n    var preItem = null;\n    each(items, function (item, index) {\n      var id = item.id || index; // 绘制栅格线\n\n      if (line) {\n        var style = _this.getPathStyle();\n\n        style = isFunction(style) ? style(item, index, items) : style;\n\n        var lineId = _this.getElementId(\"line-\" + id);\n\n        var gridPath = _this.getGridPath(item.points);\n\n        _this.addShape(group, {\n          type: 'path',\n          name: 'grid-line',\n          id: lineId,\n          attrs: mix({\n            path: gridPath\n          }, style)\n        });\n      } // 如果存在 alternateColor 则绘制矩形\n      // 从第二个栅格线开始绘制\n\n\n      if (alternateColor && index > 0) {\n        var regionId = _this.getElementId(\"region-\" + id);\n\n        var isEven = index % 2 === 0;\n\n        if (isString(alternateColor)) {\n          // 如果颜色是单值，则是仅绘制偶数时的区域\n          if (isEven) {\n            _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n          }\n        } else {\n          var color = isEven ? alternateColor[1] : alternateColor[0];\n\n          _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n        }\n      }\n\n      preItem = item;\n    });\n  }; // 绘制栅格线间的间隔\n\n\n  GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n    var regionPath = this.getAlternatePath(prePoints, points);\n    this.addShape(group, {\n      type: 'path',\n      id: id,\n      name: 'grid-region',\n      attrs: {\n        path: regionPath,\n        fill: color\n      }\n    });\n  };\n\n  return GridBase;\n}(GroupComponent);\n\nexport default GridBase;","map":{"version":3,"sources":["../../src/grid/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport { each, isString, mix, isFunction } from '@antv/util';\r\nimport GroupComponent from '../abstract/group-component';\r\nimport Theme from '../util/theme';\r\nvar GridBase = /** @class */ (function (_super) {\r\n    __extends(GridBase, _super);\r\n    function GridBase() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GridBase.prototype.getDefaultCfg = function () {\r\n        var cfg = _super.prototype.getDefaultCfg.call(this);\r\n        return __assign(__assign({}, cfg), { name: 'grid', line: {}, alternateColor: null, capture: false, items: [], closed: false, defaultCfg: {\r\n                line: {\r\n                    type: 'line',\r\n                    style: {\r\n                        lineWidth: 1,\r\n                        stroke: Theme.lineColor,\r\n                    },\r\n                },\r\n            } });\r\n    };\r\n    /**\r\n     * 获取栅格线的类型\r\n     * @return {string} 栅格线类型\r\n     */\r\n    GridBase.prototype.getLineType = function () {\r\n        var line = this.get('line') || this.get('defaultCfg').line;\r\n        return line.type;\r\n    };\r\n    GridBase.prototype.renderInner = function (group) {\r\n        this.drawGrid(group);\r\n    };\r\n    GridBase.prototype.getAlternatePath = function (prePoints, points) {\r\n        var regionPath = this.getGridPath(prePoints);\r\n        var reversePoints = points.slice(0).reverse();\r\n        var nextPath = this.getGridPath(reversePoints, true);\r\n        var closed = this.get('closed');\r\n        if (closed) {\r\n            regionPath = regionPath.concat(nextPath);\r\n        }\r\n        else {\r\n            nextPath[0][0] = 'L'; // 更新第一个节点\r\n            regionPath = regionPath.concat(nextPath);\r\n            regionPath.push(['Z']);\r\n        }\r\n        return regionPath;\r\n    };\r\n    // 获取路径的配置项\r\n    GridBase.prototype.getPathStyle = function () {\r\n        return this.get('line').style;\r\n    };\r\n    // 绘制栅格\r\n    GridBase.prototype.drawGrid = function (group) {\r\n        var _this = this;\r\n        var line = this.get('line');\r\n        var items = this.get('items');\r\n        var alternateColor = this.get('alternateColor');\r\n        var preItem = null;\r\n        each(items, function (item, index) {\r\n            var id = item.id || index;\r\n            // 绘制栅格线\r\n            if (line) {\r\n                var style = _this.getPathStyle();\r\n                style = isFunction(style) ? style(item, index, items) : style;\r\n                var lineId = _this.getElementId(\"line-\" + id);\r\n                var gridPath = _this.getGridPath(item.points);\r\n                _this.addShape(group, {\r\n                    type: 'path',\r\n                    name: 'grid-line',\r\n                    id: lineId,\r\n                    attrs: mix({\r\n                        path: gridPath,\r\n                    }, style),\r\n                });\r\n            }\r\n            // 如果存在 alternateColor 则绘制矩形\r\n            // 从第二个栅格线开始绘制\r\n            if (alternateColor && index > 0) {\r\n                var regionId = _this.getElementId(\"region-\" + id);\r\n                var isEven = index % 2 === 0;\r\n                if (isString(alternateColor)) {\r\n                    // 如果颜色是单值，则是仅绘制偶数时的区域\r\n                    if (isEven) {\r\n                        _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\r\n                    }\r\n                }\r\n                else {\r\n                    var color = isEven ? alternateColor[1] : alternateColor[0];\r\n                    _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\r\n                }\r\n            }\r\n            preItem = item;\r\n        });\r\n    };\r\n    // 绘制栅格线间的间隔\r\n    GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\r\n        var regionPath = this.getAlternatePath(prePoints, points);\r\n        this.addShape(group, {\r\n            type: 'path',\r\n            id: id,\r\n            name: 'grid-region',\r\n            attrs: {\r\n                path: regionPath,\r\n                fill: color,\r\n            },\r\n        });\r\n    };\r\n    return GridBase;\r\n}(GroupComponent));\r\nexport default GridBase;\r\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}