{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Line as LineUtil } from '@antv/g-math';\nimport { Polyline as PolylineUtil } from '@antv/g-math';\nimport { each, isNil } from '@antv/util';\nimport ShapeBase from './base';\nimport inPolyline from '../util/in-stroke/polyline';\nimport * as ArrowUtil from '../util/arrow';\n\nvar PolyLine =\n/** @class */\nfunction (_super) {\n  __extends(PolyLine, _super);\n\n  function PolyLine() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PolyLine.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n\n    return __assign(__assign({}, attrs), {\n      startArrow: false,\n      endArrow: false\n    });\n  };\n\n  PolyLine.prototype.initAttrs = function (attrs) {\n    this.setArrow();\n  }; // 更新属性时，检测是否更改了 points\n\n\n  PolyLine.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n\n    this.setArrow();\n\n    if (['points'].indexOf(name) !== -1) {\n      this._resetCache();\n    }\n  };\n\n  PolyLine.prototype._resetCache = function () {\n    this.set('totalLength', null);\n    this.set('tCache', null);\n  };\n\n  PolyLine.prototype.setArrow = function () {\n    var attrs = this.attr();\n    var _a = this.attrs,\n        points = _a.points,\n        startArrow = _a.startArrow,\n        endArrow = _a.endArrow;\n    var length = points.length;\n    var x1 = points[0][0];\n    var y1 = points[0][1];\n    var x2 = points[length - 1][0];\n    var y2 = points[length - 1][1];\n\n    if (startArrow) {\n      ArrowUtil.addStartArrow(this, attrs, points[1][0], points[1][1], x1, y1);\n    }\n\n    if (endArrow) {\n      ArrowUtil.addEndArrow(this, attrs, points[length - 2][0], points[length - 2][1], x2, y2);\n    }\n  }; // 不允许 fill\n\n\n  PolyLine.prototype.isFill = function () {\n    return false;\n  };\n\n  PolyLine.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    // 没有设置 stroke 不能被拾取, 没有线宽不能被拾取\n    if (!isStroke || !lineWidth) {\n      return false;\n    }\n\n    var points = this.attr().points;\n    return inPolyline(points, lineWidth, x, y, false);\n  }; // 始终填充\n\n\n  PolyLine.prototype.isStroke = function () {\n    return true;\n  };\n\n  PolyLine.prototype.createPath = function (context) {\n    var _a = this.attr(),\n        points = _a.points,\n        startArrow = _a.startArrow,\n        endArrow = _a.endArrow;\n\n    var length = points.length;\n\n    if (points.length < 2) {\n      return;\n    }\n\n    var x1 = points[0][0];\n    var y1 = points[0][1];\n    var x2 = points[length - 1][0];\n    var y2 = points[length - 1][1]; // 如果定义了箭头，并且是自定义箭头，线条相应缩进\n\n    if (startArrow && startArrow.d) {\n      var distance = ArrowUtil.getShortenOffset(x1, y1, points[1][0], points[1][1], startArrow.d);\n      x1 += distance.dx;\n      y1 += distance.dy;\n    }\n\n    if (endArrow && endArrow.d) {\n      var distance = ArrowUtil.getShortenOffset(points[length - 2][0], points[length - 2][1], x2, y2, endArrow.d);\n      x2 -= distance.dx;\n      y2 -= distance.dy;\n    }\n\n    context.beginPath();\n    context.moveTo(x1, y1);\n\n    for (var i = 0; i < length - 1; i++) {\n      var point = points[i];\n      context.lineTo(point[0], point[1]);\n    }\n\n    context.lineTo(x2, y2);\n  };\n\n  PolyLine.prototype.afterDrawPath = function (context) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n\n    if (startArrowShape) {\n      startArrowShape.draw(context);\n    }\n\n    if (endArrowShape) {\n      endArrowShape.draw(context);\n    }\n  };\n  /**\r\n   * Get length of polyline\r\n   * @return {number} length\r\n   */\n\n\n  PolyLine.prototype.getTotalLength = function () {\n    var points = this.attr().points; // get totalLength from cache\n\n    var totalLength = this.get('totalLength');\n\n    if (!isNil(totalLength)) {\n      return totalLength;\n    }\n\n    this.set('totalLength', PolylineUtil.length(points));\n    return this.get('totalLength');\n  };\n  /**\r\n   * Get point according to ratio\r\n   * @param {number} ratio\r\n   * @return {Point} point\r\n   */\n\n\n  PolyLine.prototype.getPoint = function (ratio) {\n    var points = this.attr().points; // get tCache from cache\n\n    var tCache = this.get('tCache');\n\n    if (!tCache) {\n      this._setTcache();\n\n      tCache = this.get('tCache');\n    }\n\n    var subt;\n    var index;\n    each(tCache, function (v, i) {\n      if (ratio >= v[0] && ratio <= v[1]) {\n        subt = (ratio - v[0]) / (v[1] - v[0]);\n        index = i;\n      }\n    });\n    return LineUtil.pointAt(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt);\n  };\n\n  PolyLine.prototype._setTcache = function () {\n    var points = this.attr().points;\n\n    if (!points || points.length === 0) {\n      return;\n    }\n\n    var totalLength = this.getTotalLength();\n\n    if (totalLength <= 0) {\n      return;\n    }\n\n    var tempLength = 0;\n    var tCache = [];\n    var segmentT;\n    var segmentL;\n    each(points, function (p, i) {\n      if (points[i + 1]) {\n        segmentT = [];\n        segmentT[0] = tempLength / totalLength;\n        segmentL = LineUtil.length(p[0], p[1], points[i + 1][0], points[i + 1][1]);\n        tempLength += segmentL;\n        segmentT[1] = tempLength / totalLength;\n        tCache.push(segmentT);\n      }\n    });\n    this.set('tCache', tCache);\n  };\n  /**\r\n   * Get start tangent vector\r\n   * @return {Array}\r\n   */\n\n\n  PolyLine.prototype.getStartTangent = function () {\n    var points = this.attr().points;\n    var result = [];\n    result.push([points[1][0], points[1][1]]);\n    result.push([points[0][0], points[0][1]]);\n    return result;\n  };\n  /**\r\n   * Get end tangent vector\r\n   * @return {Array}\r\n   */\n\n\n  PolyLine.prototype.getEndTangent = function () {\n    var points = this.attr().points;\n    var l = points.length - 1;\n    var result = [];\n    result.push([points[l - 1][0], points[l - 1][1]]);\n    result.push([points[l][0], points[l][1]]);\n    return result;\n  };\n\n  return PolyLine;\n}(ShapeBase);\n\nexport default PolyLine;","map":{"version":3,"sources":["../../src/shape/polyline.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport { Line as LineUtil } from '@antv/g-math';\r\nimport { Polyline as PolylineUtil } from '@antv/g-math';\r\nimport { each, isNil } from '@antv/util';\r\nimport ShapeBase from './base';\r\nimport inPolyline from '../util/in-stroke/polyline';\r\nimport * as ArrowUtil from '../util/arrow';\r\nvar PolyLine = /** @class */ (function (_super) {\r\n    __extends(PolyLine, _super);\r\n    function PolyLine() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PolyLine.prototype.getDefaultAttrs = function () {\r\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\r\n        return __assign(__assign({}, attrs), { startArrow: false, endArrow: false });\r\n    };\r\n    PolyLine.prototype.initAttrs = function (attrs) {\r\n        this.setArrow();\r\n    };\r\n    // 更新属性时，检测是否更改了 points\r\n    PolyLine.prototype.onAttrChange = function (name, value, originValue) {\r\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\r\n        this.setArrow();\r\n        if (['points'].indexOf(name) !== -1) {\r\n            this._resetCache();\r\n        }\r\n    };\r\n    PolyLine.prototype._resetCache = function () {\r\n        this.set('totalLength', null);\r\n        this.set('tCache', null);\r\n    };\r\n    PolyLine.prototype.setArrow = function () {\r\n        var attrs = this.attr();\r\n        var _a = this.attrs, points = _a.points, startArrow = _a.startArrow, endArrow = _a.endArrow;\r\n        var length = points.length;\r\n        var x1 = points[0][0];\r\n        var y1 = points[0][1];\r\n        var x2 = points[length - 1][0];\r\n        var y2 = points[length - 1][1];\r\n        if (startArrow) {\r\n            ArrowUtil.addStartArrow(this, attrs, points[1][0], points[1][1], x1, y1);\r\n        }\r\n        if (endArrow) {\r\n            ArrowUtil.addEndArrow(this, attrs, points[length - 2][0], points[length - 2][1], x2, y2);\r\n        }\r\n    };\r\n    // 不允许 fill\r\n    PolyLine.prototype.isFill = function () {\r\n        return false;\r\n    };\r\n    PolyLine.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\r\n        // 没有设置 stroke 不能被拾取, 没有线宽不能被拾取\r\n        if (!isStroke || !lineWidth) {\r\n            return false;\r\n        }\r\n        var points = this.attr().points;\r\n        return inPolyline(points, lineWidth, x, y, false);\r\n    };\r\n    // 始终填充\r\n    PolyLine.prototype.isStroke = function () {\r\n        return true;\r\n    };\r\n    PolyLine.prototype.createPath = function (context) {\r\n        var _a = this.attr(), points = _a.points, startArrow = _a.startArrow, endArrow = _a.endArrow;\r\n        var length = points.length;\r\n        if (points.length < 2) {\r\n            return;\r\n        }\r\n        var x1 = points[0][0];\r\n        var y1 = points[0][1];\r\n        var x2 = points[length - 1][0];\r\n        var y2 = points[length - 1][1];\r\n        // 如果定义了箭头，并且是自定义箭头，线条相应缩进\r\n        if (startArrow && startArrow.d) {\r\n            var distance = ArrowUtil.getShortenOffset(x1, y1, points[1][0], points[1][1], startArrow.d);\r\n            x1 += distance.dx;\r\n            y1 += distance.dy;\r\n        }\r\n        if (endArrow && endArrow.d) {\r\n            var distance = ArrowUtil.getShortenOffset(points[length - 2][0], points[length - 2][1], x2, y2, endArrow.d);\r\n            x2 -= distance.dx;\r\n            y2 -= distance.dy;\r\n        }\r\n        context.beginPath();\r\n        context.moveTo(x1, y1);\r\n        for (var i = 0; i < length - 1; i++) {\r\n            var point = points[i];\r\n            context.lineTo(point[0], point[1]);\r\n        }\r\n        context.lineTo(x2, y2);\r\n    };\r\n    PolyLine.prototype.afterDrawPath = function (context) {\r\n        var startArrowShape = this.get('startArrowShape');\r\n        var endArrowShape = this.get('endArrowShape');\r\n        if (startArrowShape) {\r\n            startArrowShape.draw(context);\r\n        }\r\n        if (endArrowShape) {\r\n            endArrowShape.draw(context);\r\n        }\r\n    };\r\n    /**\r\n     * Get length of polyline\r\n     * @return {number} length\r\n     */\r\n    PolyLine.prototype.getTotalLength = function () {\r\n        var points = this.attr().points;\r\n        // get totalLength from cache\r\n        var totalLength = this.get('totalLength');\r\n        if (!isNil(totalLength)) {\r\n            return totalLength;\r\n        }\r\n        this.set('totalLength', PolylineUtil.length(points));\r\n        return this.get('totalLength');\r\n    };\r\n    /**\r\n     * Get point according to ratio\r\n     * @param {number} ratio\r\n     * @return {Point} point\r\n     */\r\n    PolyLine.prototype.getPoint = function (ratio) {\r\n        var points = this.attr().points;\r\n        // get tCache from cache\r\n        var tCache = this.get('tCache');\r\n        if (!tCache) {\r\n            this._setTcache();\r\n            tCache = this.get('tCache');\r\n        }\r\n        var subt;\r\n        var index;\r\n        each(tCache, function (v, i) {\r\n            if (ratio >= v[0] && ratio <= v[1]) {\r\n                subt = (ratio - v[0]) / (v[1] - v[0]);\r\n                index = i;\r\n            }\r\n        });\r\n        return LineUtil.pointAt(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt);\r\n    };\r\n    PolyLine.prototype._setTcache = function () {\r\n        var points = this.attr().points;\r\n        if (!points || points.length === 0) {\r\n            return;\r\n        }\r\n        var totalLength = this.getTotalLength();\r\n        if (totalLength <= 0) {\r\n            return;\r\n        }\r\n        var tempLength = 0;\r\n        var tCache = [];\r\n        var segmentT;\r\n        var segmentL;\r\n        each(points, function (p, i) {\r\n            if (points[i + 1]) {\r\n                segmentT = [];\r\n                segmentT[0] = tempLength / totalLength;\r\n                segmentL = LineUtil.length(p[0], p[1], points[i + 1][0], points[i + 1][1]);\r\n                tempLength += segmentL;\r\n                segmentT[1] = tempLength / totalLength;\r\n                tCache.push(segmentT);\r\n            }\r\n        });\r\n        this.set('tCache', tCache);\r\n    };\r\n    /**\r\n     * Get start tangent vector\r\n     * @return {Array}\r\n     */\r\n    PolyLine.prototype.getStartTangent = function () {\r\n        var points = this.attr().points;\r\n        var result = [];\r\n        result.push([points[1][0], points[1][1]]);\r\n        result.push([points[0][0], points[0][1]]);\r\n        return result;\r\n    };\r\n    /**\r\n     * Get end tangent vector\r\n     * @return {Array}\r\n     */\r\n    PolyLine.prototype.getEndTangent = function () {\r\n        var points = this.attr().points;\r\n        var l = points.length - 1;\r\n        var result = [];\r\n        result.push([points[l - 1][0], points[l - 1][1]]);\r\n        result.push([points[l][0], points[l][1]]);\r\n        return result;\r\n    };\r\n    return PolyLine;\r\n}(ShapeBase));\r\nexport default PolyLine;\r\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"module"}