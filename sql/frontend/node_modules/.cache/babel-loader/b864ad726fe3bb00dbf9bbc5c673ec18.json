{"ast":null,"code":"import isFunction from './is-function';\n/**\r\n * _.memoize(calColor);\r\n * _.memoize(calColor, (...args) => args[0]);\r\n * @param f\r\n * @param resolver\r\n */\n\nexport default (function (f, resolver) {\n  if (!isFunction(f)) {\n    throw new TypeError('Expected a function');\n  }\n\n  var memoized = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key\n\n\n    var key = resolver ? resolver.apply(this, args) : args[0];\n    var cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    var result = f.apply(this, args); // 缓存起来\n\n    cache.set(key, result);\n    return result;\n  };\n\n  memoized.cache = new Map();\n  return memoized;\n});","map":{"version":3,"sources":["../src/memoize.ts"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,eAAvB;AAEA;;;;;AAKG;;AACH,gBAAe,UAAC,CAAD,EAAc,QAAd,EAAmD;AAChE,MAAI,CAAC,UAAU,CAAC,CAAD,CAAf,EAAoB;AAClB,UAAM,IAAI,SAAJ,CAAc,qBAAd,CAAN;AACD;;AAED,MAAM,QAAQ,GAAG,YAAA;AAAS,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAO;AAAP,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;KAAT,CACf;;;AACA,QAAM,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAT,CAAe,IAAf,EAAqB,IAArB,CAAH,GAAgC,IAAI,CAAC,CAAD,CAAxD;AACA,QAAM,KAAK,GAAG,QAAQ,CAAC,KAAvB;;AAEA,QAAI,KAAK,CAAC,GAAN,CAAU,GAAV,CAAJ,EAAoB;AAClB,aAAO,KAAK,CAAC,GAAN,CAAU,GAAV,CAAP;AACD;;AACD,QAAM,MAAM,GAAG,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAc,IAAd,CAAf,CARe,CASf;;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,GAAV,EAAe,MAAf;AACA,WAAO,MAAP;AACD,GAZD;;AAcA,EAAA,QAAQ,CAAC,KAAT,GAAiB,IAAI,GAAJ,EAAjB;AAEA,SAAO,QAAP;AACD,CAtBD","sourceRoot":"","sourcesContent":["import isFunction from './is-function';\r\n/**\r\n * _.memoize(calColor);\r\n * _.memoize(calColor, (...args) => args[0]);\r\n * @param f\r\n * @param resolver\r\n */\r\nexport default (function (f, resolver) {\r\n    if (!isFunction(f)) {\r\n        throw new TypeError('Expected a function');\r\n    }\r\n    var memoized = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        // 使用方法构造 key，如果不存在 resolver，则直接取第一个参数作为 key\r\n        var key = resolver ? resolver.apply(this, args) : args[0];\r\n        var cache = memoized.cache;\r\n        if (cache.has(key)) {\r\n            return cache.get(key);\r\n        }\r\n        var result = f.apply(this, args);\r\n        // 缓存起来\r\n        cache.set(key, result);\r\n        return result;\r\n    };\r\n    memoized.cache = new Map();\r\n    return memoized;\r\n});\r\n//# sourceMappingURL=memoize.js.map"]},"metadata":{},"sourceType":"module"}