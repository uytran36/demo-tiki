{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\nimport { mix } from '@antv/util'; // 菱形shape\n\nregisterNode('diamond', {\n  // 自定义节点时的配置\n  options: {\n    size: [80, 80],\n    style: {\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'diamond',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = this.getOptions(cfg).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('path', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    var w = icon.width,\n        h = icon.height,\n        show = icon.show,\n        text = icon.text;\n\n    if (show) {\n      if (text) {\n        group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: this.type + \"-icon\",\n          name: this.type + \"-icon\",\n          draggable: true\n        });\n      } else {\n        group.addShape('image', {\n          attrs: __assign({\n            x: -w / 2,\n            y: -h / 2\n          }, icon),\n          className: this.type + \"-icon\",\n          name: this.type + \"-icon\",\n          draggable: true\n        });\n      }\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\r\n   * 绘制节点上的LinkPoints\r\n   * @param {Object} cfg data数据配置项\r\n   * @param {Group} group Group实例\r\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n  getPath: function getPath(cfg) {\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n    var path = [['M', 0, -height / 2], ['L', width / 2, 0], ['L', 0, height / 2], ['L', -width / 2, 0], ['Z'] // 封闭\n    ];\n    return path;\n  },\n\n  /**\r\n   * 获取节点的样式，供基于该节点自定义时使用\r\n   * @param {Object} cfg 节点数据模型\r\n   * @return {Object} 节点的样式\r\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var path = this.getPath(cfg);\n\n    var styles = __assign({\n      path: path\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var path = this.getPath(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      path: path\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["D:/Code/sqlindex2/sql/frontend/node_modules/@antv/g6-element/es/nodes/diamond.js"],"names":["__assign","__rest","registerNode","BaseGlobal","Global","mix","options","size","style","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","linkPoints","top","right","bottom","left","icon","show","img","width","height","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","_a","getOptions","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","w","h","text","x","y","textBaseline","textAlign","drawLinkPoints","markSize","markR","r","markStyle","getSize","isAnchorPoint","getPath","path","defaultStyle","strokeStyle","color","styles","update","item","getContainer","get","attr","updateShape","updateLinkPoints"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,UAAU,IAAIC,MAArC,QAAmD,eAAnD;AACA,SAASC,GAAT,QAAoB,YAApB,C,CAAkC;;AAElCH,YAAY,CAAC,SAAD,EAAY;AACtB;AACAI,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,CADC;AAEPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAEL,MAAM,CAACM,WAAP,CAAmBF,KAAnB,CAAyBC,MAD5B;AAELE,MAAAA,IAAI,EAAEP,MAAM,CAACM,WAAP,CAAmBF,KAAnB,CAAyBG,IAF1B;AAGLC,MAAAA,SAAS,EAAER,MAAM,CAACM,WAAP,CAAmBF,KAAnB,CAAyBI;AAH/B,KAFA;AAOP;AACAC,IAAAA,QAAQ,EAAE;AACRL,MAAAA,KAAK,EAAE;AACLG,QAAAA,IAAI,EAAEP,MAAM,CAACU,SAAP,CAAiBN,KAAjB,CAAuBG,IADxB;AAELI,QAAAA,QAAQ,EAAEX,MAAM,CAACU,SAAP,CAAiBN,KAAjB,CAAuBO;AAF5B;AADC,KARH;AAcP;AACAC,IAAAA,UAAU,EAAE;AACVC,MAAAA,GAAG,EAAE,KADK;AAEVC,MAAAA,KAAK,EAAE,KAFG;AAGVC,MAAAA,MAAM,EAAE,KAHE;AAIVC,MAAAA,IAAI,EAAE,KAJI;AAKV;AACAb,MAAAA,IAAI,EAAEH,MAAM,CAACM,WAAP,CAAmBM,UAAnB,CAA8BT,IAN1B;AAOVK,MAAAA,SAAS,EAAER,MAAM,CAACM,WAAP,CAAmBM,UAAnB,CAA8BJ,SAP/B;AAQVD,MAAAA,IAAI,EAAEP,MAAM,CAACM,WAAP,CAAmBM,UAAnB,CAA8BL,IAR1B;AASVF,MAAAA,MAAM,EAAEL,MAAM,CAACM,WAAP,CAAmBM,UAAnB,CAA8BP;AAT5B,KAfL;AA0BP;AACAY,IAAAA,IAAI,EAAE;AACJ;AACAC,MAAAA,IAAI,EAAE,KAFF;AAGJ;AACAC,MAAAA,GAAG,EAAE,oFAJD;AAKJC,MAAAA,KAAK,EAAE,EALH;AAMJC,MAAAA,MAAM,EAAE;AANJ,KA3BC;AAmCPC,IAAAA,WAAW,EAAE1B,QAAQ,CAAC,EAAD,EAAKI,MAAM,CAACuB,eAAZ;AAnCd,GAFa;AAuCtBC,EAAAA,SAAS,EAAE,SAvCW;AAwCtB;AACAC,EAAAA,aAAa,EAAE,QAzCO;AA0CtBC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AACxC,QAAIC,EAAE,GAAG,KAAKC,UAAL,CAAgBH,GAAhB,EAAqBV,IAA9B;AAAA,QACIA,IAAI,GAAGY,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADhC;AAEA,QAAIzB,KAAK,GAAG,KAAK2B,aAAL,CAAmBJ,GAAnB,CAAZ;AACA,QAAIK,QAAQ,GAAGJ,KAAK,CAACK,QAAN,CAAe,MAAf,EAAuB;AACpCC,MAAAA,KAAK,EAAE9B,KAD6B;AAEpC+B,MAAAA,SAAS,EAAE,KAAKC,IAAL,GAAY,WAFa;AAGpCC,MAAAA,IAAI,EAAE,KAAKD,IAAL,GAAY,WAHkB;AAIpCE,MAAAA,SAAS,EAAE;AAJyB,KAAvB,CAAf;AAMA,QAAIC,CAAC,GAAGtB,IAAI,CAACG,KAAb;AAAA,QACIoB,CAAC,GAAGvB,IAAI,CAACI,MADb;AAAA,QAEIH,IAAI,GAAGD,IAAI,CAACC,IAFhB;AAAA,QAGIuB,IAAI,GAAGxB,IAAI,CAACwB,IAHhB;;AAKA,QAAIvB,IAAJ,EAAU;AACR,UAAIuB,IAAJ,EAAU;AACRb,QAAAA,KAAK,CAACK,QAAN,CAAe,MAAf,EAAuB;AACrBC,UAAAA,KAAK,EAAEtC,QAAQ,CAAC;AACd8C,YAAAA,CAAC,EAAE,CADW;AAEdC,YAAAA,CAAC,EAAE,CAFW;AAGdhC,YAAAA,QAAQ,EAAE,EAHI;AAIdJ,YAAAA,IAAI,EAAE,MAJQ;AAKdF,YAAAA,MAAM,EAAE,MALM;AAMduC,YAAAA,YAAY,EAAE,QANA;AAOdC,YAAAA,SAAS,EAAE;AAPG,WAAD,EAQZ5B,IARY,CADM;AAUrBkB,UAAAA,SAAS,EAAE,KAAKC,IAAL,GAAY,OAVF;AAWrBC,UAAAA,IAAI,EAAE,KAAKD,IAAL,GAAY,OAXG;AAYrBE,UAAAA,SAAS,EAAE;AAZU,SAAvB;AAcD,OAfD,MAeO;AACLV,QAAAA,KAAK,CAACK,QAAN,CAAe,OAAf,EAAwB;AACtBC,UAAAA,KAAK,EAAEtC,QAAQ,CAAC;AACd8C,YAAAA,CAAC,EAAE,CAACH,CAAD,GAAK,CADM;AAEdI,YAAAA,CAAC,EAAE,CAACH,CAAD,GAAK;AAFM,WAAD,EAGZvB,IAHY,CADO;AAKtBkB,UAAAA,SAAS,EAAE,KAAKC,IAAL,GAAY,OALD;AAMtBC,UAAAA,IAAI,EAAE,KAAKD,IAAL,GAAY,OANI;AAOtBE,UAAAA,SAAS,EAAE;AAPW,SAAxB;AASD;AACF;;AAED,SAAKQ,cAAL,CAAoBnB,GAApB,EAAyBC,KAAzB;AACA,WAAOI,QAAP;AACD,GAxFqB;;AA0FtB;AACF;AACA;AACA;AACA;AACEc,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBnB,GAAxB,EAA6BC,KAA7B,EAAoC;AAClD,QAAIC,EAAE,GAAG,KAAKC,UAAL,CAAgBH,GAAhB,EAAqBf,UAA9B;AAAA,QACIA,UAAU,GAAGiB,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADtC;;AAGA,QAAIhB,GAAG,GAAGD,UAAU,CAACC,GAArB;AAAA,QACIG,IAAI,GAAGJ,UAAU,CAACI,IADtB;AAAA,QAEIF,KAAK,GAAGF,UAAU,CAACE,KAFvB;AAAA,QAGIC,MAAM,GAAGH,UAAU,CAACG,MAHxB;AAAA,QAIIgC,QAAQ,GAAGnC,UAAU,CAACT,IAJ1B;AAAA,QAKI6C,KAAK,GAAGpC,UAAU,CAACqC,CALvB;AAAA,QAMIC,SAAS,GAAGrD,MAAM,CAACe,UAAD,EAAa,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,MAAnC,EAA2C,GAA3C,CAAb,CANtB;;AAQA,QAAIT,IAAI,GAAG,KAAKgD,OAAL,CAAaxB,GAAb,CAAX;AACA,QAAIP,KAAK,GAAGjB,IAAI,CAAC,CAAD,CAAhB;AACA,QAAIkB,MAAM,GAAGlB,IAAI,CAAC,CAAD,CAAjB;;AAEA,QAAIa,IAAJ,EAAU;AACR;AACAY,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsD,SAAL,CAAT,EAA0B;AACvCR,UAAAA,CAAC,EAAE,CAACtB,KAAD,GAAS,CAD2B;AAEvCuB,UAAAA,CAAC,EAAE,CAFoC;AAGvCM,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBb,QAAAA,SAAS,EAAE,iBANY;AAOvBE,QAAAA,IAAI,EAAE,iBAPiB;AAQvBe,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAItC,KAAJ,EAAW;AACT;AACAc,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsD,SAAL,CAAT,EAA0B;AACvCR,UAAAA,CAAC,EAAEtB,KAAK,GAAG,CAD4B;AAEvCuB,UAAAA,CAAC,EAAE,CAFoC;AAGvCM,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBb,QAAAA,SAAS,EAAE,kBANY;AAOvBE,QAAAA,IAAI,EAAE,kBAPiB;AAQvBe,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAIvC,GAAJ,EAAS;AACP;AACAe,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsD,SAAL,CAAT,EAA0B;AACvCR,UAAAA,CAAC,EAAE,CADoC;AAEvCC,UAAAA,CAAC,EAAE,CAACtB,MAAD,GAAU,CAF0B;AAGvC4B,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBb,QAAAA,SAAS,EAAE,gBANY;AAOvBE,QAAAA,IAAI,EAAE,gBAPiB;AAQvBe,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAIrC,MAAJ,EAAY;AACV;AACAa,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsD,SAAL,CAAT,EAA0B;AACvCR,UAAAA,CAAC,EAAE,CADoC;AAEvCC,UAAAA,CAAC,EAAEtB,MAAM,GAAG,CAF2B;AAGvC4B,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBb,QAAAA,SAAS,EAAE,mBANY;AAOvBE,QAAAA,IAAI,EAAE,mBAPiB;AAQvBe,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;AACF,GAtKqB;AAuKtBC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiB1B,GAAjB,EAAsB;AAC7B,QAAIxB,IAAI,GAAG,KAAKgD,OAAL,CAAaxB,GAAb,CAAX;AACA,QAAIP,KAAK,GAAGjB,IAAI,CAAC,CAAD,CAAhB;AACA,QAAIkB,MAAM,GAAGlB,IAAI,CAAC,CAAD,CAAjB;AACA,QAAImD,IAAI,GAAG,CAAC,CAAC,GAAD,EAAM,CAAN,EAAS,CAACjC,MAAD,GAAU,CAAnB,CAAD,EAAwB,CAAC,GAAD,EAAMD,KAAK,GAAG,CAAd,EAAiB,CAAjB,CAAxB,EAA6C,CAAC,GAAD,EAAM,CAAN,EAASC,MAAM,GAAG,CAAlB,CAA7C,EAAmE,CAAC,GAAD,EAAM,CAACD,KAAD,GAAS,CAAf,EAAkB,CAAlB,CAAnE,EAAyF,CAAC,GAAD,CAAzF,CAA+F;AAA/F,KAAX;AAEA,WAAOkC,IAAP;AACD,GA9KqB;;AAgLtB;AACF;AACA;AACA;AACA;AACEvB,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBJ,GAAvB,EAA4B;AACzC,QAAI4B,YAAY,GAAG,KAAKzB,UAAL,CAAgBH,GAAhB,EAAqBvB,KAAxC;AACA,QAAIoD,WAAW,GAAG;AAChBnD,MAAAA,MAAM,EAAEsB,GAAG,CAAC8B;AADI,KAAlB,CAFyC,CAItC;;AAEH,QAAIrD,KAAK,GAAGH,GAAG,CAAC,EAAD,EAAKsD,YAAL,EAAmBC,WAAnB,CAAf;AACA,QAAIF,IAAI,GAAG,KAAKD,OAAL,CAAa1B,GAAb,CAAX;;AAEA,QAAI+B,MAAM,GAAG9D,QAAQ,CAAC;AACpB0D,MAAAA,IAAI,EAAEA;AADc,KAAD,EAElBlD,KAFkB,CAArB;;AAIA,WAAOsD,MAAP;AACD,GAnMqB;AAoMtBC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBhC,GAAhB,EAAqBiC,IAArB,EAA2B;AACjC,QAAIhC,KAAK,GAAGgC,IAAI,CAACC,YAAL,EAAZ,CADiC,CACA;;AAEjC,QAAIN,YAAY,GAAG,KAAKzB,UAAL,CAAgB,EAAhB,EAAoB1B,KAAvC;AACA,QAAIkD,IAAI,GAAG,KAAKD,OAAL,CAAa1B,GAAb,CAAX,CAJiC,CAIH;;AAE9B,QAAI6B,WAAW,GAAG;AAChBnD,MAAAA,MAAM,EAAEsB,GAAG,CAAC8B,KADI;AAEhBH,MAAAA,IAAI,EAAEA;AAFU,KAAlB,CANiC,CAS9B;;AAEH,QAAItB,QAAQ,GAAG4B,IAAI,CAACE,GAAL,CAAS,UAAT,CAAf;AACA,QAAI1D,KAAK,GAAGH,GAAG,CAAC,EAAD,EAAKsD,YAAL,EAAmBvB,QAAQ,CAAC+B,IAAT,EAAnB,EAAoCP,WAApC,CAAf;AACApD,IAAAA,KAAK,GAAGH,GAAG,CAACG,KAAD,EAAQuB,GAAG,CAACvB,KAAZ,CAAX;AACA,SAAK4D,WAAL,CAAiBrC,GAAjB,EAAsBiC,IAAtB,EAA4BxD,KAA5B,EAAmC,IAAnC;AACA,SAAK6D,gBAAL,CAAsBtC,GAAtB,EAA2BC,KAA3B;AACD;AApNqB,CAAZ,EAqNT,aArNS,CAAZ","sourcesContent":["import { __assign, __rest } from \"tslib\";\r\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\r\nimport { mix } from '@antv/util'; // 菱形shape\r\n\r\nregisterNode('diamond', {\r\n  // 自定义节点时的配置\r\n  options: {\r\n    size: [80, 80],\r\n    style: {\r\n      stroke: Global.defaultNode.style.stroke,\r\n      fill: Global.defaultNode.style.fill,\r\n      lineWidth: Global.defaultNode.style.lineWidth\r\n    },\r\n    // 文本样式配置\r\n    labelCfg: {\r\n      style: {\r\n        fill: Global.nodeLabel.style.fill,\r\n        fontSize: Global.nodeLabel.style.fontSize\r\n      }\r\n    },\r\n    // 节点上左右上下四个方向上的链接circle配置\r\n    linkPoints: {\r\n      top: false,\r\n      right: false,\r\n      bottom: false,\r\n      left: false,\r\n      // circle的大小\r\n      size: Global.defaultNode.linkPoints.size,\r\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\r\n      fill: Global.defaultNode.linkPoints.fill,\r\n      stroke: Global.defaultNode.linkPoints.stroke\r\n    },\r\n    // 节点中icon配置\r\n    icon: {\r\n      // 是否显示icon，值为 false 则不渲染icon\r\n      show: false,\r\n      // icon的地址，字符串类型\r\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\r\n      width: 20,\r\n      height: 20\r\n    },\r\n    stateStyles: __assign({}, Global.nodeStateStyles)\r\n  },\r\n  shapeType: 'diamond',\r\n  // 文本位置\r\n  labelPosition: 'center',\r\n  drawShape: function drawShape(cfg, group) {\r\n    var _a = this.getOptions(cfg).icon,\r\n        icon = _a === void 0 ? {} : _a;\r\n    var style = this.getShapeStyle(cfg);\r\n    var keyShape = group.addShape('path', {\r\n      attrs: style,\r\n      className: this.type + \"-keyShape\",\r\n      name: this.type + \"-keyShape\",\r\n      draggable: true\r\n    });\r\n    var w = icon.width,\r\n        h = icon.height,\r\n        show = icon.show,\r\n        text = icon.text;\r\n\r\n    if (show) {\r\n      if (text) {\r\n        group.addShape('text', {\r\n          attrs: __assign({\r\n            x: 0,\r\n            y: 0,\r\n            fontSize: 12,\r\n            fill: '#000',\r\n            stroke: '#000',\r\n            textBaseline: 'middle',\r\n            textAlign: 'center'\r\n          }, icon),\r\n          className: this.type + \"-icon\",\r\n          name: this.type + \"-icon\",\r\n          draggable: true\r\n        });\r\n      } else {\r\n        group.addShape('image', {\r\n          attrs: __assign({\r\n            x: -w / 2,\r\n            y: -h / 2\r\n          }, icon),\r\n          className: this.type + \"-icon\",\r\n          name: this.type + \"-icon\",\r\n          draggable: true\r\n        });\r\n      }\r\n    }\r\n\r\n    this.drawLinkPoints(cfg, group);\r\n    return keyShape;\r\n  },\r\n\r\n  /**\r\n   * 绘制节点上的LinkPoints\r\n   * @param {Object} cfg data数据配置项\r\n   * @param {Group} group Group实例\r\n   */\r\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\r\n    var _a = this.getOptions(cfg).linkPoints,\r\n        linkPoints = _a === void 0 ? {} : _a;\r\n\r\n    var top = linkPoints.top,\r\n        left = linkPoints.left,\r\n        right = linkPoints.right,\r\n        bottom = linkPoints.bottom,\r\n        markSize = linkPoints.size,\r\n        markR = linkPoints.r,\r\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\r\n\r\n    var size = this.getSize(cfg);\r\n    var width = size[0];\r\n    var height = size[1];\r\n\r\n    if (left) {\r\n      // left circle\r\n      group.addShape('circle', {\r\n        attrs: __assign(__assign({}, markStyle), {\r\n          x: -width / 2,\r\n          y: 0,\r\n          r: markSize / 2 || markR || 5\r\n        }),\r\n        className: 'link-point-left',\r\n        name: 'link-point-left',\r\n        isAnchorPoint: true\r\n      });\r\n    }\r\n\r\n    if (right) {\r\n      // right circle\r\n      group.addShape('circle', {\r\n        attrs: __assign(__assign({}, markStyle), {\r\n          x: width / 2,\r\n          y: 0,\r\n          r: markSize / 2 || markR || 5\r\n        }),\r\n        className: 'link-point-right',\r\n        name: 'link-point-right',\r\n        isAnchorPoint: true\r\n      });\r\n    }\r\n\r\n    if (top) {\r\n      // top circle\r\n      group.addShape('circle', {\r\n        attrs: __assign(__assign({}, markStyle), {\r\n          x: 0,\r\n          y: -height / 2,\r\n          r: markSize / 2 || markR || 5\r\n        }),\r\n        className: 'link-point-top',\r\n        name: 'link-point-top',\r\n        isAnchorPoint: true\r\n      });\r\n    }\r\n\r\n    if (bottom) {\r\n      // bottom circle\r\n      group.addShape('circle', {\r\n        attrs: __assign(__assign({}, markStyle), {\r\n          x: 0,\r\n          y: height / 2,\r\n          r: markSize / 2 || markR || 5\r\n        }),\r\n        className: 'link-point-bottom',\r\n        name: 'link-point-bottom',\r\n        isAnchorPoint: true\r\n      });\r\n    }\r\n  },\r\n  getPath: function getPath(cfg) {\r\n    var size = this.getSize(cfg);\r\n    var width = size[0];\r\n    var height = size[1];\r\n    var path = [['M', 0, -height / 2], ['L', width / 2, 0], ['L', 0, height / 2], ['L', -width / 2, 0], ['Z'] // 封闭\r\n    ];\r\n    return path;\r\n  },\r\n\r\n  /**\r\n   * 获取节点的样式，供基于该节点自定义时使用\r\n   * @param {Object} cfg 节点数据模型\r\n   * @return {Object} 节点的样式\r\n   */\r\n  getShapeStyle: function getShapeStyle(cfg) {\r\n    var defaultStyle = this.getOptions(cfg).style;\r\n    var strokeStyle = {\r\n      stroke: cfg.color\r\n    }; // 如果设置了color，则覆盖默认的stroke属性\r\n\r\n    var style = mix({}, defaultStyle, strokeStyle);\r\n    var path = this.getPath(cfg);\r\n\r\n    var styles = __assign({\r\n      path: path\r\n    }, style);\r\n\r\n    return styles;\r\n  },\r\n  update: function update(cfg, item) {\r\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\r\n\r\n    var defaultStyle = this.getOptions({}).style;\r\n    var path = this.getPath(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\r\n\r\n    var strokeStyle = {\r\n      stroke: cfg.color,\r\n      path: path\r\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\r\n\r\n    var keyShape = item.get('keyShape');\r\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\r\n    style = mix(style, cfg.style);\r\n    this.updateShape(cfg, item, style, true);\r\n    this.updateLinkPoints(cfg, group);\r\n  }\r\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}