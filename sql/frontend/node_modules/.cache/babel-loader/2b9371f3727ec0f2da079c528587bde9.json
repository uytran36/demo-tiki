{"ast":null,"code":"module.exports = forEach;\n\nvar vec = require('./create')();\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\n\nfunction forEach(a, stride, offset, count, fn, arg) {\n  var i, l;\n\n  if (!stride) {\n    stride = 2;\n  }\n\n  if (!offset) {\n    offset = 0;\n  }\n\n  if (count) {\n    l = Math.min(count * stride + offset, a.length);\n  } else {\n    l = a.length;\n  }\n\n  for (i = offset; i < l; i += stride) {\n    vec[0] = a[i];\n    vec[1] = a[i + 1];\n    fn(vec, vec, arg);\n    a[i] = vec[0];\n    a[i + 1] = vec[1];\n  }\n\n  return a;\n}","map":{"version":3,"sources":["E:/sqlindex2/sql/frontend/node_modules/gl-vec2/forEach.js"],"names":["module","exports","forEach","vec","require","a","stride","offset","count","fn","arg","i","l","Math","min","length"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAP,EAAV;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,OAAT,CAAiBG,CAAjB,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,KAApC,EAA2CC,EAA3C,EAA+CC,GAA/C,EAAoD;AAChD,MAAIC,CAAJ,EAAOC,CAAP;;AACA,MAAG,CAACN,MAAJ,EAAY;AACRA,IAAAA,MAAM,GAAG,CAAT;AACH;;AAED,MAAG,CAACC,MAAJ,EAAY;AACRA,IAAAA,MAAM,GAAG,CAAT;AACH;;AAED,MAAGC,KAAH,EAAU;AACNI,IAAAA,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAUN,KAAK,GAAGF,MAAT,GAAmBC,MAA5B,EAAoCF,CAAC,CAACU,MAAtC,CAAJ;AACH,GAFD,MAEO;AACHH,IAAAA,CAAC,GAAGP,CAAC,CAACU,MAAN;AACH;;AAED,OAAIJ,CAAC,GAAGJ,MAAR,EAAgBI,CAAC,GAAGC,CAApB,EAAuBD,CAAC,IAAIL,MAA5B,EAAoC;AAChCH,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAACM,CAAD,CAAV;AACAR,IAAAA,GAAG,CAAC,CAAD,CAAH,GAASE,CAAC,CAACM,CAAC,GAAC,CAAH,CAAV;AACAF,IAAAA,EAAE,CAACN,GAAD,EAAMA,GAAN,EAAWO,GAAX,CAAF;AACAL,IAAAA,CAAC,CAACM,CAAD,CAAD,GAAOR,GAAG,CAAC,CAAD,CAAV;AACAE,IAAAA,CAAC,CAACM,CAAC,GAAC,CAAH,CAAD,GAASR,GAAG,CAAC,CAAD,CAAZ;AACH;;AAED,SAAOE,CAAP;AACH","sourcesContent":["module.exports = forEach\r\n\r\nvar vec = require('./create')()\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nfunction forEach(a, stride, offset, count, fn, arg) {\r\n    var i, l\r\n    if(!stride) {\r\n        stride = 2\r\n    }\r\n\r\n    if(!offset) {\r\n        offset = 0\r\n    }\r\n    \r\n    if(count) {\r\n        l = Math.min((count * stride) + offset, a.length)\r\n    } else {\r\n        l = a.length\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n        vec[0] = a[i]\r\n        vec[1] = a[i+1]\r\n        fn(vec, vec, arg)\r\n        a[i] = vec[0]\r\n        a[i+1] = vec[1]\r\n    }\r\n    \r\n    return a\r\n}"]},"metadata":{},"sourceType":"script"}