{"ast":null,"code":"import { __assign } from \"tslib\";\n/*\r\n * @Author: moyee\r\n * @LastEditors: moyee\r\n * @Description: 拖动 Combo\r\n */\n\nimport { each } from '@antv/util';\nimport Util from '../util';\nimport Global from '../global';\nvar calculationItemsBBox = Util.calculationItemsBBox;\n/**\r\n * 遍历拖动的 Combo 下的所有 Combo\r\n * @param data 拖动的 Combo\r\n * @param fn\r\n */\n\nvar traverseCombo = function traverseCombo(data, fn) {\n  if (fn(data) === false) {\n    return;\n  }\n\n  if (data) {\n    var combos = data.get('combos');\n\n    if (combos.length === 0) {\n      return false;\n    }\n\n    each(combos, function (child) {\n      traverseCombo(child, fn);\n    });\n  }\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      enableDelegate: false,\n      delegateStyle: {},\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      activeState: '',\n      selectedState: 'selected'\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'combo:dragstart': 'onDragStart',\n      'combo:drag': 'onDrag',\n      'combo:dragend': 'onDragEnd',\n      'combo:drop': 'onDrop',\n      'node:drop': 'onNodeDrop',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave'\n    };\n  },\n  validationCombo: function validationCombo(evt) {\n    var item = evt.item;\n\n    if (!item || item.destroyed) {\n      return false;\n    }\n\n    if (!this.shouldUpdate(this, evt)) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    var graph = this.graph;\n    var item = evt.item;\n    if (!this.validationCombo(evt)) return;\n    this.targets = []; // 获取所有选中的 Combo\n\n    var combos = graph.findAllByState('combo', this.selectedState);\n    var currentCombo = item.get('id');\n    var dragCombos = combos.filter(function (combo) {\n      var comboId = combo.get('id');\n      return currentCombo === comboId;\n    });\n\n    if (dragCombos.length === 0) {\n      this.targets.push(item);\n    } else {\n      this.targets = combos;\n    }\n\n    if (this.activeState) {\n      this.targets.map(function (combo) {\n        var model = combo.getModel();\n\n        if (model.parentId) {\n          var parentCombo = graph.findById(model.parentId);\n\n          if (parentCombo) {\n            graph.setItemState(parentCombo, _this.activeState, true);\n          }\n        }\n      });\n    }\n\n    this.point = {};\n    this.originPoint = {};\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.currentItemChildCombos = [];\n    traverseCombo(item, function (param) {\n      if (param.destroyed) {\n        return false;\n      }\n\n      var model = param.getModel();\n\n      _this.currentItemChildCombos.push(model.id);\n\n      return true;\n    });\n  },\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n\n    if (this.enableDelegate) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.activeState) {\n        var graph_1 = this.graph;\n        var item = evt.item;\n        var model_1 = item.getModel(); // 拖动过程中实时计算距离\n\n        var combos = graph_1.getCombos();\n        var sourceBBox = item.getBBox();\n        var centerX_1 = sourceBBox.centerX,\n            centerY_1 = sourceBBox.centerY,\n            width_1 = sourceBBox.width; // 参与计算的 Combo，需要排除掉：\n        // 1、拖动 combo 自己\n        // 2、拖动 combo 的 parent\n        // 3、拖动 Combo 的 children\n\n        var calcCombos = combos.filter(function (combo) {\n          var cmodel = combo.getModel(); // 被拖动的是最外层的 Combo，无 parent，排除自身和子元素\n\n          if (!model_1.parentId) {\n            return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n          }\n\n          return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n        });\n        calcCombos.map(function (combo) {\n          var _a = combo.getBBox(),\n              cx = _a.centerX,\n              cy = _a.centerY,\n              w = _a.width; // 拖动的 combo 和要进入的 combo 之间的距离\n\n\n          var disX = centerX_1 - cx;\n          var disY = centerY_1 - cy; // 圆心距离\n\n          var distance = 2 * Math.sqrt(disX * disX + disY * disY);\n\n          if (width_1 + w - distance > 0.8 * width_1) {\n            graph_1.setItemState(combo, _this.activeState, true);\n          } else {\n            graph_1.setItemState(combo, _this.activeState, false);\n          }\n        });\n      }\n\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt);\n      });\n    }\n  },\n  updatePositions: function updatePositions(evt) {\n    var _this = this; // 当启用 delegate 时，拖动结束时需要更新 combo\n\n\n    if (this.enableDelegate) {\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt);\n      });\n    }\n  },\n  onDrop: function onDrop(evt) {\n    var _this = this; // 被放下的目标 combo\n\n\n    var item = evt.item;\n\n    if (!item || !this.targets || item.destroyed) {\n      return;\n    }\n\n    this.updatePositions(evt);\n    var graph = this.graph;\n    var targetModel = item.getModel();\n    this.targets.map(function (combo) {\n      var model = combo.getModel();\n\n      if (model.parentId !== targetModel.id) {\n        if (_this.activeState) {\n          graph.setItemState(item, _this.activeState, false);\n        } // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n\n\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, targetModel.id);\n        } else {\n          graph.updateCombo(combo);\n        }\n      } else {\n        graph.updateCombo(item);\n      }\n    });\n    this.end(item, evt); // 如果已经拖放下了，则不需要再通过距离判断了\n\n    this.endComparison = true;\n  },\n  onNodeDrop: function onNodeDrop(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return;\n    this.updatePositions(evt);\n    var graph = this.graph;\n    var item = evt.item;\n    var comboId = item.getModel().comboId;\n    var droppedCombo; // 如果被放置的的节点有 comboId，且这个 comboId 与正在被拖拽的 combo 的父 id 不相同，则更新父亲为 comboId\n\n    if (comboId) {\n      if (this.activeState) {\n        var combo = graph.findById(comboId);\n        graph.setItemState(combo, this.activeState, false);\n      }\n\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          if (comboId !== combo.getID()) {\n            droppedCombo = graph.findById(comboId);\n            if (comboId !== combo.getModel().parentId) graph.updateComboTree(combo, comboId);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } else {\n      // 如果被放置的节点没有 comboId，且正在被拖拽的 combo 有父 id，则更新父亲为 undefined\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          var model = combo.getModel();\n\n          if (model.comboId) {\n            graph.updateComboTree(combo);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } // 如果已经拖放下了，则不需要再通过距离判断了\n\n\n    this.endComparison = true;\n    this.end(droppedCombo, evt);\n  },\n  onDragEnter: function onDragEnter(evt) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, true);\n    }\n  },\n  onDragLeave: function onDragLeave(evt) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, false);\n    }\n  },\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var item = evt.item;\n    this.updatePositions(evt);\n    var parentCombo = this.getParentCombo(item.getModel().parentId);\n    var graph = this.graph;\n\n    if (parentCombo && this.activeState) {\n      graph.setItemState(parentCombo, this.activeState, false);\n    }\n\n    this.end(undefined, evt);\n  },\n  end: function end(comboDropedOn, evt) {\n    var _this = this;\n\n    if (!this.origin) return;\n    var graph = this.graph; // 删除delegate shape\n\n    if (this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      delegateGroup.clear();\n      this.delegateShape = null;\n    }\n\n    if (comboDropedOn && this.activeState) {\n      graph.setItemState(comboDropedOn, this.activeState, false);\n    } // 若没有被放置的 combo，则是被放置在画布上\n\n\n    if (!comboDropedOn) {\n      this.targets.map(function (combo) {\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo);\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    }\n\n    this.point = [];\n    this.origin = null;\n    this.originPoint = null;\n    this.targets.length = 0;\n  },\n\n  /**\r\n   * 遍历 comboTree，分别更新 node 和 combo\r\n   * @param data\r\n   * @param fn\r\n   */\n  traverse: function traverse(data, fn) {\n    var _this = this;\n\n    if (fn(data) === false) {\n      return;\n    }\n\n    if (data) {\n      var combos = data.get('combos');\n      each(combos, function (child) {\n        _this.traverse(child, fn);\n      });\n      var nodes = data.get('nodes');\n      each(nodes, function (child) {\n        _this.traverse(child, fn);\n      });\n    }\n  },\n  updateCombo: function updateCombo(item, evt) {\n    var _this = this;\n\n    this.traverse(item, function (param) {\n      if (param.destroyed) {\n        return false;\n      }\n\n      _this.updateSignleItem(param, evt);\n\n      return true;\n    });\n  },\n\n  /**\r\n   *\r\n   * @param item 当前正在拖动的元素\r\n   * @param evt\r\n   */\n  updateSignleItem: function updateSignleItem(item, evt) {\n    var origin = this.origin;\n    var graph = this.graph;\n    var model = item.getModel();\n    var itemId = item.get('id');\n\n    if (!this.point[itemId]) {\n      this.point[itemId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[itemId].x;\n    var y = evt.y - origin.y + this.point[itemId].y;\n    graph.updateItem(item, {\n      x: x,\n      y: y\n    });\n  },\n\n  /**\r\n   * 根据 ID 获取父 Combo\r\n   * @param parentId 父 Combo ID\r\n   */\n  getParentCombo: function getParentCombo(parentId) {\n    var graph = this.graph;\n\n    if (!parentId) {\n      return undefined;\n    }\n\n    var parentCombo = graph.findById(parentId);\n\n    if (!parentCombo) {\n      return undefined;\n    }\n\n    return parentCombo;\n  },\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph; // 当没有 delegate shape 时创建\n\n    if (!this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      var bbox = null;\n\n      if (this.targets.length > 1) {\n        bbox = calculationItemsBBox(this.targets);\n      } else {\n        bbox = this.targets[0].getBBox();\n      }\n\n      var x = bbox.x,\n          y = bbox.y,\n          width = bbox.width,\n          height = bbox.height,\n          minX = bbox.minX,\n          minY = bbox.minY;\n      this.originPoint = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n\n      var attrs = __assign(__assign({}, Global.delegateStyle), this.delegateStyle);\n\n      this.delegateShape = delegateGroup.addShape('rect', {\n        attrs: __assign({\n          width: bbox.width,\n          height: bbox.height,\n          x: bbox.x,\n          y: bbox.y\n        }, attrs),\n        name: 'combo-delegate-shape'\n      });\n      this.delegate = this.delegateShape;\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateShape.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  }\n};","map":{"version":3,"sources":["D:/Code/sqlindex2/sql/frontend/node_modules/@antv/g6-pc/es/behavior/drag-combo.js"],"names":["__assign","each","Util","Global","calculationItemsBBox","traverseCombo","data","fn","combos","get","length","child","getDefaultCfg","enableDelegate","delegateStyle","onlyChangeComboSize","activeState","selectedState","getEvents","validationCombo","evt","item","destroyed","shouldUpdate","type","getType","onDragStart","_this","graph","targets","findAllByState","currentCombo","dragCombos","filter","combo","comboId","push","map","model","getModel","parentId","parentCombo","findById","setItemState","point","originPoint","origin","x","y","currentItemChildCombos","param","id","onDrag","updateDelegate","graph_1","model_1","getCombos","sourceBBox","getBBox","centerX_1","centerX","centerY_1","centerY","width_1","width","calcCombos","cmodel","includes","_a","cx","cy","w","disX","disY","distance","Math","sqrt","updateCombo","updatePositions","onDrop","targetModel","updateComboTree","end","endComparison","onNodeDrop","droppedCombo","getID","onDragEnter","onDragLeave","onDragEnd","getParentCombo","undefined","comboDropedOn","delegateShape","delegateGroup","clear","traverse","nodes","updateSignleItem","itemId","updateItem","bbox","height","minX","minY","attrs","addShape","name","delegate","clientX","clientY","attr"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\r\n/*\r\n * @Author: moyee\r\n * @LastEditors: moyee\r\n * @Description: 拖动 Combo\r\n */\r\n\r\nimport { each } from '@antv/util';\r\nimport Util from '../util';\r\nimport Global from '../global';\r\nvar calculationItemsBBox = Util.calculationItemsBBox;\r\n/**\r\n * 遍历拖动的 Combo 下的所有 Combo\r\n * @param data 拖动的 Combo\r\n * @param fn\r\n */\r\n\r\nvar traverseCombo = function traverseCombo(data, fn) {\r\n  if (fn(data) === false) {\r\n    return;\r\n  }\r\n\r\n  if (data) {\r\n    var combos = data.get('combos');\r\n\r\n    if (combos.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    each(combos, function (child) {\r\n      traverseCombo(child, fn);\r\n    });\r\n  }\r\n};\r\n\r\nexport default {\r\n  getDefaultCfg: function getDefaultCfg() {\r\n    return {\r\n      enableDelegate: false,\r\n      delegateStyle: {},\r\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\r\n      onlyChangeComboSize: false,\r\n      // 拖动过程中目标 combo 状态样式\r\n      activeState: '',\r\n      selectedState: 'selected'\r\n    };\r\n  },\r\n  getEvents: function getEvents() {\r\n    return {\r\n      'combo:dragstart': 'onDragStart',\r\n      'combo:drag': 'onDrag',\r\n      'combo:dragend': 'onDragEnd',\r\n      'combo:drop': 'onDrop',\r\n      'node:drop': 'onNodeDrop',\r\n      'combo:dragenter': 'onDragEnter',\r\n      'combo:dragleave': 'onDragLeave'\r\n    };\r\n  },\r\n  validationCombo: function validationCombo(evt) {\r\n    var item = evt.item;\r\n\r\n    if (!item || item.destroyed) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.shouldUpdate(this, evt)) {\r\n      return false;\r\n    }\r\n\r\n    var type = item.getType();\r\n\r\n    if (type !== 'combo') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  onDragStart: function onDragStart(evt) {\r\n    var _this = this;\r\n\r\n    var graph = this.graph;\r\n    var item = evt.item;\r\n    if (!this.validationCombo(evt)) return;\r\n    this.targets = []; // 获取所有选中的 Combo\r\n\r\n    var combos = graph.findAllByState('combo', this.selectedState);\r\n    var currentCombo = item.get('id');\r\n    var dragCombos = combos.filter(function (combo) {\r\n      var comboId = combo.get('id');\r\n      return currentCombo === comboId;\r\n    });\r\n\r\n    if (dragCombos.length === 0) {\r\n      this.targets.push(item);\r\n    } else {\r\n      this.targets = combos;\r\n    }\r\n\r\n    if (this.activeState) {\r\n      this.targets.map(function (combo) {\r\n        var model = combo.getModel();\r\n\r\n        if (model.parentId) {\r\n          var parentCombo = graph.findById(model.parentId);\r\n\r\n          if (parentCombo) {\r\n            graph.setItemState(parentCombo, _this.activeState, true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    this.point = {};\r\n    this.originPoint = {};\r\n    this.origin = {\r\n      x: evt.x,\r\n      y: evt.y\r\n    };\r\n    this.currentItemChildCombos = [];\r\n    traverseCombo(item, function (param) {\r\n      if (param.destroyed) {\r\n        return false;\r\n      }\r\n\r\n      var model = param.getModel();\r\n\r\n      _this.currentItemChildCombos.push(model.id);\r\n\r\n      return true;\r\n    });\r\n  },\r\n  onDrag: function onDrag(evt) {\r\n    var _this = this;\r\n\r\n    if (!this.origin) {\r\n      return;\r\n    }\r\n\r\n    if (!this.validationCombo(evt)) return;\r\n\r\n    if (this.enableDelegate) {\r\n      this.updateDelegate(evt);\r\n    } else {\r\n      if (this.activeState) {\r\n        var graph_1 = this.graph;\r\n        var item = evt.item;\r\n        var model_1 = item.getModel(); // 拖动过程中实时计算距离\r\n\r\n        var combos = graph_1.getCombos();\r\n        var sourceBBox = item.getBBox();\r\n        var centerX_1 = sourceBBox.centerX,\r\n            centerY_1 = sourceBBox.centerY,\r\n            width_1 = sourceBBox.width; // 参与计算的 Combo，需要排除掉：\r\n        // 1、拖动 combo 自己\r\n        // 2、拖动 combo 的 parent\r\n        // 3、拖动 Combo 的 children\r\n\r\n        var calcCombos = combos.filter(function (combo) {\r\n          var cmodel = combo.getModel(); // 被拖动的是最外层的 Combo，无 parent，排除自身和子元素\r\n\r\n          if (!model_1.parentId) {\r\n            return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\r\n          }\r\n\r\n          return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\r\n        });\r\n        calcCombos.map(function (combo) {\r\n          var _a = combo.getBBox(),\r\n              cx = _a.centerX,\r\n              cy = _a.centerY,\r\n              w = _a.width; // 拖动的 combo 和要进入的 combo 之间的距离\r\n\r\n\r\n          var disX = centerX_1 - cx;\r\n          var disY = centerY_1 - cy; // 圆心距离\r\n\r\n          var distance = 2 * Math.sqrt(disX * disX + disY * disY);\r\n\r\n          if (width_1 + w - distance > 0.8 * width_1) {\r\n            graph_1.setItemState(combo, _this.activeState, true);\r\n          } else {\r\n            graph_1.setItemState(combo, _this.activeState, false);\r\n          }\r\n        });\r\n      }\r\n\r\n      each(this.targets, function (item) {\r\n        _this.updateCombo(item, evt);\r\n      });\r\n    }\r\n  },\r\n  updatePositions: function updatePositions(evt) {\r\n    var _this = this; // 当启用 delegate 时，拖动结束时需要更新 combo\r\n\r\n\r\n    if (this.enableDelegate) {\r\n      each(this.targets, function (item) {\r\n        _this.updateCombo(item, evt);\r\n      });\r\n    }\r\n  },\r\n  onDrop: function onDrop(evt) {\r\n    var _this = this; // 被放下的目标 combo\r\n\r\n\r\n    var item = evt.item;\r\n\r\n    if (!item || !this.targets || item.destroyed) {\r\n      return;\r\n    }\r\n\r\n    this.updatePositions(evt);\r\n    var graph = this.graph;\r\n    var targetModel = item.getModel();\r\n    this.targets.map(function (combo) {\r\n      var model = combo.getModel();\r\n\r\n      if (model.parentId !== targetModel.id) {\r\n        if (_this.activeState) {\r\n          graph.setItemState(item, _this.activeState, false);\r\n        } // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\r\n\r\n\r\n        if (!_this.onlyChangeComboSize) {\r\n          graph.updateComboTree(combo, targetModel.id);\r\n        } else {\r\n          graph.updateCombo(combo);\r\n        }\r\n      } else {\r\n        graph.updateCombo(item);\r\n      }\r\n    });\r\n    this.end(item, evt); // 如果已经拖放下了，则不需要再通过距离判断了\r\n\r\n    this.endComparison = true;\r\n  },\r\n  onNodeDrop: function onNodeDrop(evt) {\r\n    var _this = this;\r\n\r\n    if (!this.targets || this.targets.length === 0) return;\r\n    this.updatePositions(evt);\r\n    var graph = this.graph;\r\n    var item = evt.item;\r\n    var comboId = item.getModel().comboId;\r\n    var droppedCombo; // 如果被放置的的节点有 comboId，且这个 comboId 与正在被拖拽的 combo 的父 id 不相同，则更新父亲为 comboId\r\n\r\n    if (comboId) {\r\n      if (this.activeState) {\r\n        var combo = graph.findById(comboId);\r\n        graph.setItemState(combo, this.activeState, false);\r\n      }\r\n\r\n      this.targets.map(function (combo) {\r\n        if (!_this.onlyChangeComboSize) {\r\n          if (comboId !== combo.getID()) {\r\n            droppedCombo = graph.findById(comboId);\r\n            if (comboId !== combo.getModel().parentId) graph.updateComboTree(combo, comboId);\r\n          }\r\n        } else {\r\n          graph.updateCombo(combo);\r\n        }\r\n      });\r\n    } else {\r\n      // 如果被放置的节点没有 comboId，且正在被拖拽的 combo 有父 id，则更新父亲为 undefined\r\n      this.targets.map(function (combo) {\r\n        if (!_this.onlyChangeComboSize) {\r\n          var model = combo.getModel();\r\n\r\n          if (model.comboId) {\r\n            graph.updateComboTree(combo);\r\n          }\r\n        } else {\r\n          graph.updateCombo(combo);\r\n        }\r\n      });\r\n    } // 如果已经拖放下了，则不需要再通过距离判断了\r\n\r\n\r\n    this.endComparison = true;\r\n    this.end(droppedCombo, evt);\r\n  },\r\n  onDragEnter: function onDragEnter(evt) {\r\n    if (!this.origin) {\r\n      return;\r\n    }\r\n\r\n    if (!this.validationCombo(evt)) return;\r\n    var item = evt.item;\r\n    var graph = this.graph;\r\n\r\n    if (this.activeState) {\r\n      graph.setItemState(item, this.activeState, true);\r\n    }\r\n  },\r\n  onDragLeave: function onDragLeave(evt) {\r\n    if (!this.origin) {\r\n      return;\r\n    }\r\n\r\n    if (!this.validationCombo(evt)) return;\r\n    var item = evt.item;\r\n    var graph = this.graph;\r\n\r\n    if (this.activeState) {\r\n      graph.setItemState(item, this.activeState, false);\r\n    }\r\n  },\r\n  onDragEnd: function onDragEnd(evt) {\r\n    if (!this.targets || this.targets.length === 0) return;\r\n    var item = evt.item;\r\n    this.updatePositions(evt);\r\n    var parentCombo = this.getParentCombo(item.getModel().parentId);\r\n    var graph = this.graph;\r\n\r\n    if (parentCombo && this.activeState) {\r\n      graph.setItemState(parentCombo, this.activeState, false);\r\n    }\r\n\r\n    this.end(undefined, evt);\r\n  },\r\n  end: function end(comboDropedOn, evt) {\r\n    var _this = this;\r\n\r\n    if (!this.origin) return;\r\n    var graph = this.graph; // 删除delegate shape\r\n\r\n    if (this.delegateShape) {\r\n      var delegateGroup = graph.get('delegateGroup');\r\n      delegateGroup.clear();\r\n      this.delegateShape = null;\r\n    }\r\n\r\n    if (comboDropedOn && this.activeState) {\r\n      graph.setItemState(comboDropedOn, this.activeState, false);\r\n    } // 若没有被放置的 combo，则是被放置在画布上\r\n\r\n\r\n    if (!comboDropedOn) {\r\n      this.targets.map(function (combo) {\r\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\r\n        if (!_this.onlyChangeComboSize) {\r\n          graph.updateComboTree(combo);\r\n        } else {\r\n          graph.updateCombo(combo);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.point = [];\r\n    this.origin = null;\r\n    this.originPoint = null;\r\n    this.targets.length = 0;\r\n  },\r\n\r\n  /**\r\n   * 遍历 comboTree，分别更新 node 和 combo\r\n   * @param data\r\n   * @param fn\r\n   */\r\n  traverse: function traverse(data, fn) {\r\n    var _this = this;\r\n\r\n    if (fn(data) === false) {\r\n      return;\r\n    }\r\n\r\n    if (data) {\r\n      var combos = data.get('combos');\r\n      each(combos, function (child) {\r\n        _this.traverse(child, fn);\r\n      });\r\n      var nodes = data.get('nodes');\r\n      each(nodes, function (child) {\r\n        _this.traverse(child, fn);\r\n      });\r\n    }\r\n  },\r\n  updateCombo: function updateCombo(item, evt) {\r\n    var _this = this;\r\n\r\n    this.traverse(item, function (param) {\r\n      if (param.destroyed) {\r\n        return false;\r\n      }\r\n\r\n      _this.updateSignleItem(param, evt);\r\n\r\n      return true;\r\n    });\r\n  },\r\n\r\n  /**\r\n   *\r\n   * @param item 当前正在拖动的元素\r\n   * @param evt\r\n   */\r\n  updateSignleItem: function updateSignleItem(item, evt) {\r\n    var origin = this.origin;\r\n    var graph = this.graph;\r\n    var model = item.getModel();\r\n    var itemId = item.get('id');\r\n\r\n    if (!this.point[itemId]) {\r\n      this.point[itemId] = {\r\n        x: model.x,\r\n        y: model.y\r\n      };\r\n    }\r\n\r\n    var x = evt.x - origin.x + this.point[itemId].x;\r\n    var y = evt.y - origin.y + this.point[itemId].y;\r\n    graph.updateItem(item, {\r\n      x: x,\r\n      y: y\r\n    });\r\n  },\r\n\r\n  /**\r\n   * 根据 ID 获取父 Combo\r\n   * @param parentId 父 Combo ID\r\n   */\r\n  getParentCombo: function getParentCombo(parentId) {\r\n    var graph = this.graph;\r\n\r\n    if (!parentId) {\r\n      return undefined;\r\n    }\r\n\r\n    var parentCombo = graph.findById(parentId);\r\n\r\n    if (!parentCombo) {\r\n      return undefined;\r\n    }\r\n\r\n    return parentCombo;\r\n  },\r\n  updateDelegate: function updateDelegate(evt) {\r\n    var graph = this.graph; // 当没有 delegate shape 时创建\r\n\r\n    if (!this.delegateShape) {\r\n      var delegateGroup = graph.get('delegateGroup');\r\n      var bbox = null;\r\n\r\n      if (this.targets.length > 1) {\r\n        bbox = calculationItemsBBox(this.targets);\r\n      } else {\r\n        bbox = this.targets[0].getBBox();\r\n      }\r\n\r\n      var x = bbox.x,\r\n          y = bbox.y,\r\n          width = bbox.width,\r\n          height = bbox.height,\r\n          minX = bbox.minX,\r\n          minY = bbox.minY;\r\n      this.originPoint = {\r\n        x: x,\r\n        y: y,\r\n        width: width,\r\n        height: height,\r\n        minX: minX,\r\n        minY: minY\r\n      };\r\n\r\n      var attrs = __assign(__assign({}, Global.delegateStyle), this.delegateStyle);\r\n\r\n      this.delegateShape = delegateGroup.addShape('rect', {\r\n        attrs: __assign({\r\n          width: bbox.width,\r\n          height: bbox.height,\r\n          x: bbox.x,\r\n          y: bbox.y\r\n        }, attrs),\r\n        name: 'combo-delegate-shape'\r\n      });\r\n      this.delegate = this.delegateShape;\r\n    } else {\r\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\r\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\r\n      this.delegateShape.attr({\r\n        x: clientX,\r\n        y: clientY\r\n      });\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}