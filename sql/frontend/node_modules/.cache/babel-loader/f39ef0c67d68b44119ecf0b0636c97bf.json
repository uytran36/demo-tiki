{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, getAllElementsRecursively } from '../../utils';\nimport { adaptor } from './adaptor';\n\nvar DualAxes =\n/** @class */\nfunction (_super) {\n  __extends(DualAxes, _super);\n\n  function DualAxes() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型: 双轴图 */\n\n\n    _this.type = 'dual-axes';\n    return _this;\n  }\n  /**\n   * 获取 双轴图 默认配置\n   */\n\n\n  DualAxes.prototype.getDefaultOptions = function () {\n    return deepAssign({}, _super.prototype.getDefaultOptions.call(this), {\n      yAxis: [],\n      syncViewPadding: true\n    });\n  };\n  /**\n   * 获取双轴图的适配器\n   */\n\n\n  DualAxes.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n\n\n  DualAxes.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n\n    var elements = getAllElementsRecursively(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n\n\n  DualAxes.prototype.getStates = function () {\n    var elements = getAllElementsRecursively(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  };\n\n  return DualAxes;\n}(Plot);\n\nexport { DualAxes };","map":{"version":3,"sources":["../../../src/plots/dual-axes/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,YAArB;AAEA,SAAS,IAAT,QAAqB,iBAArB;AAGA,SAAS,UAAT,EAAqB,yBAArB,QAAsD,aAAtD;AAEA,SAAS,OAAT,QAAwB,WAAxB;;AAIA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAA9B,WAAA,QAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AACE;;;AACO,IAAA,KAAA,CAAA,IAAA,GAAe,WAAf;;AAoDR;AAlDC;;AAEG;;;AACO,EAAA,QAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO,UAAU,CAAC,EAAD,EAAK,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC/C,MAAA,KAAK,EAAE,EADwC;AAE/C,MAAA,eAAe,EAAE;AAF8B,KAAhC,CAAjB;AAID,GALS;AAOV;;AAEG;;;AACO,EAAA,QAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;AAIV;;;;;AAKG;;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAiC,SAAjC,EAA4D,MAA5D,EAAkF;AAAtB,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,IAAA;AAAsB;;AAChF,QAAM,QAAQ,GAAG,yBAAyB,CAAC,KAAK,KAAN,CAA1C;AAEA,IAAA,IAAI,CAAC,QAAD,EAAW,UAAC,GAAD,EAAa;AAC1B,UAAI,SAAS,CAAC,GAAG,CAAC,OAAJ,EAAD,CAAb,EAA8B;AAC5B,QAAA,GAAG,CAAC,QAAJ,CAAa,IAAb,EAAmB,MAAnB;AACD;AACF,KAJG,CAAJ;AAKD,GARM;AAUP;;AAEG;;;AACI,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,QAAM,QAAQ,GAAG,yBAAyB,CAAC,KAAK,KAAN,CAA1C;AAEA,QAAM,YAAY,GAAkB,EAApC;AACA,IAAA,IAAI,CAAC,QAAD,EAAW,UAAC,OAAD,EAAiB;AAC9B,UAAM,IAAI,GAAG,OAAO,CAAC,OAAR,EAAb;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,SAAR,EAAf;AACA,MAAA,IAAI,CAAC,MAAD,EAAS,UAAC,KAAD,EAAM;AACjB,QAAA,YAAY,CAAC,IAAb,CAAkB;AAAE,UAAA,IAAI,EAAA,IAAN;AAAQ,UAAA,KAAK,EAAA,KAAb;AAAe,UAAA,QAAQ,EAAE,OAAO,CAAC,QAAjC;AAA2C,UAAA,OAAO,EAAA;AAAlD,SAAlB;AACD,OAFG,CAAJ;AAGD,KANG,CAAJ;AAQA,WAAO,YAAP;AACD,GAbM;;AAcT,SAAA,QAAA;AAAC,CAtDD,CAA8B,IAA9B,CAAA","sourcesContent":["import { each } from '@antv/util';\nimport { Element } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { StateName, StateCondition, StateObject } from '../../types';\nimport { deepAssign, getAllElementsRecursively } from '../../utils';\nimport { DualAxesOptions } from './types';\nimport { adaptor } from './adaptor';\n\nexport type { DualAxesOptions };\n\nexport class DualAxes extends Plot<DualAxesOptions> {\n  /** 图表类型: 双轴图 */\n  public type: string = 'dual-axes';\n\n  /**\n   * 获取 双轴图 默认配置\n   */\n  protected getDefaultOptions(): Partial<DualAxesOptions> {\n    return deepAssign({}, super.getDefaultOptions(), {\n      yAxis: [],\n      syncViewPadding: true,\n    });\n  }\n\n  /**\n   * 获取双轴图的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<DualAxesOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}