{"ast":null,"code":"import line from './line';\nimport { distance, isNumberEqual, getBBoxByArray, piMod } from './util';\nimport { nearestPoint } from './bezier'; // 差值公式\n\nfunction quadraticAt(p0, p1, p2, t) {\n  var onet = 1 - t;\n  return onet * onet * p0 + 2 * t * onet * p1 + t * t * p2;\n} // 求极值\n\n\nfunction extrema(p0, p1, p2) {\n  var a = p0 + p2 - 2 * p1;\n\n  if (isNumberEqual(a, 0)) {\n    return [0.5];\n  }\n\n  var rst = (p0 - p1) / a;\n\n  if (rst <= 1 && rst >= 0) {\n    return [rst];\n  }\n\n  return [];\n}\n\nfunction derivativeAt(p0, p1, p2, t) {\n  return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n} // 分割贝塞尔曲线\n\n\nfunction divideQuadratic(x1, y1, x2, y2, x3, y3, t) {\n  // 划分点\n  var xt = quadraticAt(x1, x2, x3, t);\n  var yt = quadraticAt(y1, y2, y3, t); // 分割的第一条曲线的控制点\n\n  var controlPoint1 = line.pointAt(x1, y1, x2, y2, t); // 分割的第二条曲线的控制点\n\n  var controlPoint2 = line.pointAt(x2, y2, x3, y3, t);\n  return [[x1, y1, controlPoint1.x, controlPoint1.y, xt, yt], [xt, yt, controlPoint2.x, controlPoint2.y, x3, y3]];\n} // 使用迭代法取贝塞尔曲线的长度\n\n\nfunction quadraticLength(x1, y1, x2, y2, x3, y3, iterationCount) {\n  if (iterationCount === 0) {\n    return (distance(x1, y1, x2, y2) + distance(x2, y2, x3, y3) + distance(x1, y1, x3, y3)) / 2;\n  }\n\n  var quadratics = divideQuadratic(x1, y1, x2, y2, x3, y3, 0.5);\n  var left = quadratics[0];\n  var right = quadratics[1];\n  left.push(iterationCount - 1);\n  right.push(iterationCount - 1);\n  return quadraticLength.apply(null, left) + quadraticLength.apply(null, right);\n}\n\nexport default {\n  box: function (x1, y1, x2, y2, x3, y3) {\n    var xExtrema = extrema(x1, x2, x3)[0];\n    var yExtrema = extrema(y1, y2, y3)[0]; // 控制点不加入 box 的计算\n\n    var xArr = [x1, x3];\n    var yArr = [y1, y3];\n\n    if (xExtrema !== undefined) {\n      xArr.push(quadraticAt(x1, x2, x3, xExtrema));\n    }\n\n    if (yExtrema !== undefined) {\n      yArr.push(quadraticAt(y1, y2, y3, yExtrema));\n    }\n\n    return getBBoxByArray(xArr, yArr);\n  },\n  length: function (x1, y1, x2, y2, x3, y3) {\n    return quadraticLength(x1, y1, x2, y2, x3, y3, 3);\n  },\n  nearestPoint: function (x1, y1, x2, y2, x3, y3, x0, y0) {\n    return nearestPoint([x1, x2, x3], [y1, y2, y3], x0, y0, quadraticAt);\n  },\n  pointDistance: function (x1, y1, x2, y2, x3, y3, x0, y0) {\n    var point = this.nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0);\n    return distance(point.x, point.y, x0, y0);\n  },\n  interpolationAt: quadraticAt,\n  pointAt: function (x1, y1, x2, y2, x3, y3, t) {\n    return {\n      x: quadraticAt(x1, x2, x3, t),\n      y: quadraticAt(y1, y2, y3, t)\n    };\n  },\n  divide: function (x1, y1, x2, y2, x3, y3, t) {\n    return divideQuadratic(x1, y1, x2, y2, x3, y3, t);\n  },\n  tangentAngle: function (x1, y1, x2, y2, x3, y3, t) {\n    var dx = derivativeAt(x1, x2, x3, t);\n    var dy = derivativeAt(y1, y2, y3, t);\n    var angle = Math.atan2(dy, dx);\n    return piMod(angle);\n  }\n};","map":{"version":3,"sources":["../src/quadratic.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import line from './line';\r\nimport { distance, isNumberEqual, getBBoxByArray, piMod } from './util';\r\nimport { nearestPoint } from './bezier';\r\n// 差值公式\r\nfunction quadraticAt(p0, p1, p2, t) {\r\n    var onet = 1 - t;\r\n    return onet * onet * p0 + 2 * t * onet * p1 + t * t * p2;\r\n}\r\n// 求极值\r\nfunction extrema(p0, p1, p2) {\r\n    var a = p0 + p2 - 2 * p1;\r\n    if (isNumberEqual(a, 0)) {\r\n        return [0.5];\r\n    }\r\n    var rst = (p0 - p1) / a;\r\n    if (rst <= 1 && rst >= 0) {\r\n        return [rst];\r\n    }\r\n    return [];\r\n}\r\nfunction derivativeAt(p0, p1, p2, t) {\r\n    return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\r\n}\r\n// 分割贝塞尔曲线\r\nfunction divideQuadratic(x1, y1, x2, y2, x3, y3, t) {\r\n    // 划分点\r\n    var xt = quadraticAt(x1, x2, x3, t);\r\n    var yt = quadraticAt(y1, y2, y3, t);\r\n    // 分割的第一条曲线的控制点\r\n    var controlPoint1 = line.pointAt(x1, y1, x2, y2, t);\r\n    // 分割的第二条曲线的控制点\r\n    var controlPoint2 = line.pointAt(x2, y2, x3, y3, t);\r\n    return [\r\n        [x1, y1, controlPoint1.x, controlPoint1.y, xt, yt],\r\n        [xt, yt, controlPoint2.x, controlPoint2.y, x3, y3],\r\n    ];\r\n}\r\n// 使用迭代法取贝塞尔曲线的长度\r\nfunction quadraticLength(x1, y1, x2, y2, x3, y3, iterationCount) {\r\n    if (iterationCount === 0) {\r\n        return (distance(x1, y1, x2, y2) + distance(x2, y2, x3, y3) + distance(x1, y1, x3, y3)) / 2;\r\n    }\r\n    var quadratics = divideQuadratic(x1, y1, x2, y2, x3, y3, 0.5);\r\n    var left = quadratics[0];\r\n    var right = quadratics[1];\r\n    left.push(iterationCount - 1);\r\n    right.push(iterationCount - 1);\r\n    return quadraticLength.apply(null, left) + quadraticLength.apply(null, right);\r\n}\r\nexport default {\r\n    box: function (x1, y1, x2, y2, x3, y3) {\r\n        var xExtrema = extrema(x1, x2, x3)[0];\r\n        var yExtrema = extrema(y1, y2, y3)[0];\r\n        // 控制点不加入 box 的计算\r\n        var xArr = [x1, x3];\r\n        var yArr = [y1, y3];\r\n        if (xExtrema !== undefined) {\r\n            xArr.push(quadraticAt(x1, x2, x3, xExtrema));\r\n        }\r\n        if (yExtrema !== undefined) {\r\n            yArr.push(quadraticAt(y1, y2, y3, yExtrema));\r\n        }\r\n        return getBBoxByArray(xArr, yArr);\r\n    },\r\n    length: function (x1, y1, x2, y2, x3, y3) {\r\n        return quadraticLength(x1, y1, x2, y2, x3, y3, 3);\r\n    },\r\n    nearestPoint: function (x1, y1, x2, y2, x3, y3, x0, y0) {\r\n        return nearestPoint([x1, x2, x3], [y1, y2, y3], x0, y0, quadraticAt);\r\n    },\r\n    pointDistance: function (x1, y1, x2, y2, x3, y3, x0, y0) {\r\n        var point = this.nearestPoint(x1, y1, x2, y2, x3, y3, x0, y0);\r\n        return distance(point.x, point.y, x0, y0);\r\n    },\r\n    interpolationAt: quadraticAt,\r\n    pointAt: function (x1, y1, x2, y2, x3, y3, t) {\r\n        return {\r\n            x: quadraticAt(x1, x2, x3, t),\r\n            y: quadraticAt(y1, y2, y3, t),\r\n        };\r\n    },\r\n    divide: function (x1, y1, x2, y2, x3, y3, t) {\r\n        return divideQuadratic(x1, y1, x2, y2, x3, y3, t);\r\n    },\r\n    tangentAngle: function (x1, y1, x2, y2, x3, y3, t) {\r\n        var dx = derivativeAt(x1, x2, x3, t);\r\n        var dy = derivativeAt(y1, y2, y3, t);\r\n        var angle = Math.atan2(dy, dx);\r\n        return piMod(angle);\r\n    },\r\n};\r\n//# sourceMappingURL=quadratic.js.map"]},"metadata":{},"sourceType":"module"}