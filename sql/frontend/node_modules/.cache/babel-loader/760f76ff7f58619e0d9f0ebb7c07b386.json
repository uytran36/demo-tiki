{"ast":null,"code":"/**\r\n * @fileoverview 圆\r\n * @author dxq613@gmail.com\r\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { distance } from '../util/util';\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  __extends(Circle, _super);\n\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Circle.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      r: 0\n    });\n  };\n\n  Circle.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var attrs = this.attr();\n    var cx = attrs.x;\n    var cy = attrs.y;\n    var r = attrs.r;\n    var halfLineWidth = lineWidth / 2;\n    var absDistance = distance(cx, cy, x, y); // 直接用距离，如果同时存在边和填充时，可以减少两次计算\n\n    if (isFill && isStroke) {\n      return absDistance <= r + halfLineWidth;\n    }\n\n    if (isFill) {\n      return absDistance <= r;\n    }\n\n    if (isStroke) {\n      return absDistance >= r - halfLineWidth && absDistance <= r + halfLineWidth;\n    }\n\n    return false;\n  };\n\n  Circle.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var cx = attrs.x;\n    var cy = attrs.y;\n    var r = attrs.r;\n    context.beginPath();\n    context.arc(cx, cy, r, 0, Math.PI * 2, false);\n    context.closePath();\n  };\n\n  return Circle;\n}(ShapeBase);\n\nexport default Circle;","map":{"version":3,"sources":["../../src/shape/circle.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH,OAAO,SAAP,MAAsB,QAAtB;AACA,SAAS,QAAT,QAAyB,cAAzB;;AAEA,IAAA,MAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqB,EAAA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;;AAArB,WAAA,MAAA,GAAA;;AAwCC;;AAvCC,EAAA,MAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,QAAM,KAAK,GAAG,MAAA,CAAA,SAAA,CAAM,eAAN,CAAqB,IAArB,CAAqB,IAArB,CAAd;;AACA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,MAAA,CAAC,EAAE,CADK;AAER,MAAA,CAAC,EAAE,CAFK;AAGR,MAAA,CAAC,EAAE;AAHK,KADV,CAAA;AAMD,GARD;;AAUA,EAAA,MAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,CAAjB,EAAoB,CAApB,EAAuB,QAAvB,EAAiC,MAAjC,EAAyC,SAAzC,EAAkD;AAChD,QAAM,KAAK,GAAG,KAAK,IAAL,EAAd;AACA,QAAM,EAAE,GAAG,KAAK,CAAC,CAAjB;AACA,QAAM,EAAE,GAAG,KAAK,CAAC,CAAjB;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,CAAhB;AACA,QAAM,aAAa,GAAG,SAAS,GAAG,CAAlC;AACA,QAAM,WAAW,GAAG,QAAQ,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,CAA5B,CANgD,CAOhD;;AACA,QAAI,MAAM,IAAI,QAAd,EAAwB;AACtB,aAAO,WAAW,IAAI,CAAC,GAAG,aAA1B;AACD;;AACD,QAAI,MAAJ,EAAY;AACV,aAAO,WAAW,IAAI,CAAtB;AACD;;AACD,QAAI,QAAJ,EAAc;AACZ,aAAO,WAAW,IAAI,CAAC,GAAG,aAAnB,IAAoC,WAAW,IAAI,CAAC,GAAG,aAA9D;AACD;;AACD,WAAO,KAAP;AACD,GAlBD;;AAoBA,EAAA,MAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,OAAX,EAAkB;AAChB,QAAM,KAAK,GAAG,KAAK,IAAL,EAAd;AACA,QAAM,EAAE,GAAG,KAAK,CAAC,CAAjB;AACA,QAAM,EAAE,GAAG,KAAK,CAAC,CAAjB;AACA,QAAM,CAAC,GAAG,KAAK,CAAC,CAAhB;AACA,IAAA,OAAO,CAAC,SAAR;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,IAAI,CAAC,EAAL,GAAU,CAApC,EAAuC,KAAvC;AACA,IAAA,OAAO,CAAC,SAAR;AACD,GARD;;AASF,SAAA,MAAA;AAAC,CAxCD,CAAqB,SAArB,CAAA;;AA0CA,eAAe,MAAf","sourceRoot":"","sourcesContent":["/**\r\n * @fileoverview 圆\r\n * @author dxq613@gmail.com\r\n */\r\nimport { __assign, __extends } from \"tslib\";\r\nimport ShapeBase from './base';\r\nimport { distance } from '../util/util';\r\nvar Circle = /** @class */ (function (_super) {\r\n    __extends(Circle, _super);\r\n    function Circle() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Circle.prototype.getDefaultAttrs = function () {\r\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\r\n        return __assign(__assign({}, attrs), { x: 0, y: 0, r: 0 });\r\n    };\r\n    Circle.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\r\n        var attrs = this.attr();\r\n        var cx = attrs.x;\r\n        var cy = attrs.y;\r\n        var r = attrs.r;\r\n        var halfLineWidth = lineWidth / 2;\r\n        var absDistance = distance(cx, cy, x, y);\r\n        // 直接用距离，如果同时存在边和填充时，可以减少两次计算\r\n        if (isFill && isStroke) {\r\n            return absDistance <= r + halfLineWidth;\r\n        }\r\n        if (isFill) {\r\n            return absDistance <= r;\r\n        }\r\n        if (isStroke) {\r\n            return absDistance >= r - halfLineWidth && absDistance <= r + halfLineWidth;\r\n        }\r\n        return false;\r\n    };\r\n    Circle.prototype.createPath = function (context) {\r\n        var attrs = this.attr();\r\n        var cx = attrs.x;\r\n        var cy = attrs.y;\r\n        var r = attrs.r;\r\n        context.beginPath();\r\n        context.arc(cx, cy, r, 0, Math.PI * 2, false);\r\n        context.closePath();\r\n    };\r\n    return Circle;\r\n}(ShapeBase));\r\nexport default Circle;\r\n//# sourceMappingURL=circle.js.map"]},"metadata":{},"sourceType":"module"}