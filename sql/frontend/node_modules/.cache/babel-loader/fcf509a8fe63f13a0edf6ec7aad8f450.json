{"ast":null,"code":"import isArray from './is-array';\nimport isFunction from './is-function';\nimport groupBy from './group-by';\n/**\r\n * 将数据分组成 map\r\n * @param data\r\n * @param condition\r\n */\n\nexport default function groupToMap(data, condition) {\n  if (!condition) {\n    return {\n      0: data\n    };\n  }\n\n  if (!isFunction(condition)) {\n    // 如果是字符串，则按照 a*b 风格成数组\n    var paramscondition_1 = isArray(condition) ? condition : condition.replace(/\\s+/g, '').split('*');\n\n    condition = function (row) {\n      var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序\n      // 根据字段列表的值，拼接成 key\n\n      for (var i = 0, l = paramscondition_1.length; i < l; i++) {\n        unique += row[paramscondition_1[i]] && row[paramscondition_1[i]].toString();\n      }\n\n      return unique;\n    };\n  }\n\n  return groupBy(data, condition);\n}","map":{"version":3,"sources":["../src/group-to-map.ts"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,YAApB;AACA,OAAO,UAAP,MAAuB,eAAvB;AACA,OAAO,OAAP,MAAoB,YAApB;AAEA;;;;AAIG;;AACH,eAAc,SAAU,UAAV,CAAqB,IAArB,EAAgC,SAAhC,EAAqF;AACjG,MAAI,CAAC,SAAL,EAAgB;AACd,WAAO;AACL,SAAG;AADE,KAAP;AAGD;;AACD,MAAI,CAAC,UAAU,CAAC,SAAD,CAAf,EAA4B;AAC1B;AACA,QAAM,iBAAe,GAAG,OAAO,CAAC,SAAD,CAAP,GAAqB,SAArB,GAAiC,SAAS,CAAC,OAAV,CAAkB,MAAlB,EAA0B,EAA1B,EAA8B,KAA9B,CAAoC,GAApC,CAAzD;;AACA,IAAA,SAAS,GAAG,UAAU,GAAV,EAAa;AACvB,UAAI,MAAM,GAAG,GAAb,CADuB,CACL;AAElB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,iBAAe,CAAC,MAApC,EAA4C,CAAC,GAAG,CAAhD,EAAmD,CAAC,EAApD,EAAwD;AACtD,QAAA,MAAM,IAAI,GAAG,CAAC,iBAAe,CAAC,CAAD,CAAhB,CAAH,IAA2B,GAAG,CAAC,iBAAe,CAAC,CAAD,CAAhB,CAAH,CAAwB,QAAxB,EAArC;AACD;;AACD,aAAO,MAAP;AACD,KARD;AASD;;AACD,SAAO,OAAO,CAAC,IAAD,EAAO,SAAP,CAAd;AACD","sourceRoot":"","sourcesContent":["import isArray from './is-array';\r\nimport isFunction from './is-function';\r\nimport groupBy from './group-by';\r\n/**\r\n * 将数据分组成 map\r\n * @param data\r\n * @param condition\r\n */\r\nexport default function groupToMap(data, condition) {\r\n    if (!condition) {\r\n        return {\r\n            0: data,\r\n        };\r\n    }\r\n    if (!isFunction(condition)) {\r\n        // 如果是字符串，则按照 a*b 风格成数组\r\n        var paramscondition_1 = isArray(condition) ? condition : condition.replace(/\\s+/g, '').split('*');\r\n        condition = function (row) {\r\n            var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序\r\n            // 根据字段列表的值，拼接成 key\r\n            for (var i = 0, l = paramscondition_1.length; i < l; i++) {\r\n                unique += row[paramscondition_1[i]] && row[paramscondition_1[i]].toString();\r\n            }\r\n            return unique;\r\n        };\r\n    }\r\n    return groupBy(data, condition);\r\n}\r\n//# sourceMappingURL=group-to-map.js.map"]},"metadata":{},"sourceType":"module"}