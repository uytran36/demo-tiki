{"ast":null,"code":"/**\r\n * 计算几分位 https://github.com/simple-statistics/simple-statistics/blob/master/src/quantile_sorted.js\r\n * @param x  数组\r\n * @param p  百分比\r\n */\nfunction quantileSorted(x, p) {\n  var idx = x.length * p;\n  /*if (x.length === 0) { // 当前场景这些条件不可能命中\r\n    throw new Error('quantile requires at least one value.');\r\n  } else if (p < 0 || p > 1) {\r\n    throw new Error('quantiles must be between 0 and 1');\r\n  } else */\n\n  if (p === 1) {\n    // If p is 1, directly return the last element\n    return x[x.length - 1];\n  } else if (p === 0) {\n    // If p is 0, directly return the first element\n    return x[0];\n  } else if (idx % 1 !== 0) {\n    // If p is not integer, return the next element in array\n    return x[Math.ceil(idx) - 1];\n  } else if (x.length % 2 === 0) {\n    // If the list has even-length, we'll take the average of this number\n    // and the next value, if there is one\n    return (x[idx - 1] + x[idx]) / 2;\n  } else {\n    // Finally, in the simple case of an integer value\n    // with an odd-length list, return the x value at the index.\n    return x[idx];\n  }\n}\n\nexport default function calculateTicks(cfg) {\n  var tickCount = cfg.tickCount,\n      values = cfg.values;\n\n  if (!values || !values.length) {\n    return [];\n  }\n\n  var sorted = values.slice().sort(function (a, b) {\n    return a - b;\n  });\n  var ticks = [];\n\n  for (var i = 0; i < tickCount; i++) {\n    var p = i / (tickCount - 1);\n    ticks.push(quantileSorted(sorted, p));\n  }\n\n  return ticks;\n}","map":{"version":3,"sources":["../../src/tick-method/quantile.ts"],"names":[],"mappings":"AACA;;;;AAIG;AACH,SAAS,cAAT,CAAwB,CAAxB,EAA2B,CAA3B,EAA4B;AAC1B,MAAM,GAAG,GAAG,CAAC,CAAC,MAAF,GAAW,CAAvB;AACA;;;;AAIS;;AAET,MAAI,CAAC,KAAK,CAAV,EAAa;AACX;AACA,WAAO,CAAC,CAAC,CAAC,CAAC,MAAF,GAAW,CAAZ,CAAR;AACD,GAHD,MAGO,IAAI,CAAC,KAAK,CAAV,EAAa;AAClB;AACA,WAAO,CAAC,CAAC,CAAD,CAAR;AACD,GAHM,MAGA,IAAI,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACxB;AACA,WAAO,CAAC,CAAC,IAAI,CAAC,IAAL,CAAU,GAAV,IAAiB,CAAlB,CAAR;AACD,GAHM,MAGA,IAAI,CAAC,CAAC,MAAF,GAAW,CAAX,KAAiB,CAArB,EAAwB;AAC7B;AACA;AACA,WAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAP,CAAD,GAAa,CAAC,CAAC,GAAD,CAAf,IAAwB,CAA/B;AACD,GAJM,MAIA;AACL;AACA;AACA,WAAO,CAAC,CAAC,GAAD,CAAR;AACD;AACF;;AAED,eAAc,SAAU,cAAV,CAAyB,GAAzB,EAAyC;AAC7C,MAAA,SAAS,GAAa,GAAG,CAAhB,SAAT;AAAA,MAAW,MAAM,GAAK,GAAG,CAAR,MAAjB;;AACR,MAAI,CAAC,MAAD,IAAW,CAAC,MAAM,CAAC,MAAvB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AACD,MAAM,MAAM,GAAG,MAAM,CAAC,KAAP,GAAe,IAAf,CAAoB,UAAC,CAAD,EAAI,CAAJ,EAAK;AACtC,WAAO,CAAC,GAAG,CAAX;AACD,GAFc,CAAf;AAGA,MAAM,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,QAAM,CAAC,GAAG,CAAC,IAAI,SAAS,GAAG,CAAhB,CAAX;AACA,IAAA,KAAK,CAAC,IAAN,CAAW,cAAc,CAAC,MAAD,EAAS,CAAT,CAAzB;AACD;;AACD,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * 计算几分位 https://github.com/simple-statistics/simple-statistics/blob/master/src/quantile_sorted.js\r\n * @param x  数组\r\n * @param p  百分比\r\n */\r\nfunction quantileSorted(x, p) {\r\n    var idx = x.length * p;\r\n    /*if (x.length === 0) { // 当前场景这些条件不可能命中\r\n      throw new Error('quantile requires at least one value.');\r\n    } else if (p < 0 || p > 1) {\r\n      throw new Error('quantiles must be between 0 and 1');\r\n    } else */\r\n    if (p === 1) {\r\n        // If p is 1, directly return the last element\r\n        return x[x.length - 1];\r\n    }\r\n    else if (p === 0) {\r\n        // If p is 0, directly return the first element\r\n        return x[0];\r\n    }\r\n    else if (idx % 1 !== 0) {\r\n        // If p is not integer, return the next element in array\r\n        return x[Math.ceil(idx) - 1];\r\n    }\r\n    else if (x.length % 2 === 0) {\r\n        // If the list has even-length, we'll take the average of this number\r\n        // and the next value, if there is one\r\n        return (x[idx - 1] + x[idx]) / 2;\r\n    }\r\n    else {\r\n        // Finally, in the simple case of an integer value\r\n        // with an odd-length list, return the x value at the index.\r\n        return x[idx];\r\n    }\r\n}\r\nexport default function calculateTicks(cfg) {\r\n    var tickCount = cfg.tickCount, values = cfg.values;\r\n    if (!values || !values.length) {\r\n        return [];\r\n    }\r\n    var sorted = values.slice().sort(function (a, b) {\r\n        return a - b;\r\n    });\r\n    var ticks = [];\r\n    for (var i = 0; i < tickCount; i++) {\r\n        var p = i / (tickCount - 1);\r\n        ticks.push(quantileSorted(sorted, p));\r\n    }\r\n    return ticks;\r\n}\r\n//# sourceMappingURL=quantile.js.map"]},"metadata":{},"sourceType":"module"}