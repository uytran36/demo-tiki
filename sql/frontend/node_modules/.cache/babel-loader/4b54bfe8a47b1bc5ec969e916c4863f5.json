{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { getGraphSize, processMinimap } from '../graphs/utils';\nimport { isObject, isString } from '@antv/util';\nexport default function useInit(graphInstance, config, container) {\n  var graphHook = useRef();\n  var data = config.data,\n      nodeStyle = config.nodeStyle,\n      nodeAnchorPoints = config.nodeAnchorPoints,\n      nodeType = config.nodeType,\n      edgeType = config.edgeType,\n      edgeStyle = config.edgeStyle,\n      width = config.width,\n      height = config.height,\n      layout = config.layout,\n      minimapCfg = config.minimapCfg,\n      behaviors = config.behaviors,\n      nodeLabelCfg = config.nodeLabelCfg,\n      edgeLabelCfg = config.edgeLabelCfg;\n  var minimap;\n  useEffect(function () {\n    var _a;\n\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.changeData(data);\n      (_a = graphInstance.get('eventData')) === null || _a === void 0 ? void 0 : _a.setData(data);\n    }\n  }, [data]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.getNodes().forEach(function (node) {\n        graphInstance.updateItem(node, {\n          type: nodeType,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        });\n      });\n    }\n  }, [nodeStyle, nodeAnchorPoints, nodeType]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.getEdges().forEach(function (edge) {\n        graphInstance.updateItem(edge, {\n          type: edgeType,\n          style: edgeStyle,\n          labelCfg: edgeLabelCfg\n        });\n      });\n    }\n  }, [edgeStyle, edgeType]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      var graphSize = getGraphSize(width, height, container);\n      graphInstance.changeSize(graphSize[0], graphSize[1]);\n    }\n  }, [container, width, height]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.updateLayout(layout);\n    }\n  }, [layout]);\n  useEffect(function () {\n    if (!minimapCfg || !graphInstance || graphInstance.destroyed) {\n      return;\n    }\n\n    if (minimapCfg.show) {\n      minimap = processMinimap(minimapCfg, graphInstance);\n      minimap === null || minimap === void 0 ? void 0 : minimap.updateCanvas();\n    } else {\n      var pluginMinimap = graphInstance.get('plugins')[0];\n\n      if (pluginMinimap) {\n        graphInstance.removePlugin(pluginMinimap);\n      }\n    }\n  }, [minimapCfg]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      var defaultMode = graphInstance.get('modes').default;\n      var removingBehaviors_1 = [];\n      defaultMode.forEach(function (be) {\n        if (isObject(be)) {\n          removingBehaviors_1.push(be.type);\n        } else if (isString(be)) {\n          removingBehaviors_1.push(be);\n        }\n      });\n      graphInstance.removeBehaviors(removingBehaviors_1, 'default');\n      graphInstance.addBehaviors(behaviors, 'default');\n    }\n  }, [behaviors]);\n  useEffect(function () {\n    graphHook.current = graphInstance;\n    return function () {\n      if (graphInstance && !graphInstance.destroyed) {\n        graphInstance.destroy();\n        graphInstance = undefined;\n      }\n    };\n  }, []);\n  return {\n    graphHook: graphHook\n  };\n}","map":{"version":3,"sources":["E:/sqlindex2/sql/frontend/node_modules/@ant-design/charts/es/hooks/useGraph.js"],"names":["useRef","useEffect","getGraphSize","processMinimap","isObject","isString","useInit","graphInstance","config","container","graphHook","data","nodeStyle","nodeAnchorPoints","nodeType","edgeType","edgeStyle","width","height","layout","minimapCfg","behaviors","nodeLabelCfg","edgeLabelCfg","minimap","_a","destroyed","changeData","get","setData","getNodes","forEach","node","updateItem","type","style","anchorPoints","labelCfg","getEdges","edge","graphSize","changeSize","updateLayout","show","updateCanvas","pluginMinimap","removePlugin","defaultMode","default","removingBehaviors_1","be","push","removeBehaviors","addBehaviors","current","destroy","undefined"],"mappings":"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","sourcesContent":["import { useRef, useEffect } from 'react';\r\nimport { getGraphSize, processMinimap } from '../graphs/utils';\r\nimport { isObject, isString } from '@antv/util';\r\nexport default function useInit(graphInstance, config, container) {\r\n    var graphHook = useRef();\r\n    var data = config.data, nodeStyle = config.nodeStyle, nodeAnchorPoints = config.nodeAnchorPoints, nodeType = config.nodeType, edgeType = config.edgeType, edgeStyle = config.edgeStyle, width = config.width, height = config.height, layout = config.layout, minimapCfg = config.minimapCfg, behaviors = config.behaviors, nodeLabelCfg = config.nodeLabelCfg, edgeLabelCfg = config.edgeLabelCfg;\r\n    var minimap;\r\n    useEffect(function () {\r\n        var _a;\r\n        if (graphInstance && !graphInstance.destroyed) {\r\n            graphInstance.changeData(data);\r\n            (_a = graphInstance.get('eventData')) === null || _a === void 0 ? void 0 : _a.setData(data);\r\n        }\r\n    }, [data]);\r\n    useEffect(function () {\r\n        if (graphInstance && !graphInstance.destroyed) {\r\n            graphInstance.getNodes().forEach(function (node) {\r\n                graphInstance.updateItem(node, {\r\n                    type: nodeType,\r\n                    style: nodeStyle,\r\n                    anchorPoints: nodeAnchorPoints,\r\n                    labelCfg: nodeLabelCfg,\r\n                });\r\n            });\r\n        }\r\n    }, [nodeStyle, nodeAnchorPoints, nodeType]);\r\n    useEffect(function () {\r\n        if (graphInstance && !graphInstance.destroyed) {\r\n            graphInstance.getEdges().forEach(function (edge) {\r\n                graphInstance.updateItem(edge, {\r\n                    type: edgeType,\r\n                    style: edgeStyle,\r\n                    labelCfg: edgeLabelCfg,\r\n                });\r\n            });\r\n        }\r\n    }, [edgeStyle, edgeType]);\r\n    useEffect(function () {\r\n        if (graphInstance && !graphInstance.destroyed) {\r\n            var graphSize = getGraphSize(width, height, container);\r\n            graphInstance.changeSize(graphSize[0], graphSize[1]);\r\n        }\r\n    }, [container, width, height]);\r\n    useEffect(function () {\r\n        if (graphInstance && !graphInstance.destroyed) {\r\n            graphInstance.updateLayout(layout);\r\n        }\r\n    }, [layout]);\r\n    useEffect(function () {\r\n        if (!minimapCfg || !graphInstance || graphInstance.destroyed) {\r\n            return;\r\n        }\r\n        if (minimapCfg.show) {\r\n            minimap = processMinimap(minimapCfg, graphInstance);\r\n            minimap === null || minimap === void 0 ? void 0 : minimap.updateCanvas();\r\n        }\r\n        else {\r\n            var pluginMinimap = graphInstance.get('plugins')[0];\r\n            if (pluginMinimap) {\r\n                graphInstance.removePlugin(pluginMinimap);\r\n            }\r\n        }\r\n    }, [minimapCfg]);\r\n    useEffect(function () {\r\n        if (graphInstance && !graphInstance.destroyed) {\r\n            var defaultMode = graphInstance.get('modes').default;\r\n            var removingBehaviors_1 = [];\r\n            defaultMode.forEach(function (be) {\r\n                if (isObject(be)) {\r\n                    removingBehaviors_1.push(be.type);\r\n                }\r\n                else if (isString(be)) {\r\n                    removingBehaviors_1.push(be);\r\n                }\r\n            });\r\n            graphInstance.removeBehaviors(removingBehaviors_1, 'default');\r\n            graphInstance.addBehaviors(behaviors, 'default');\r\n        }\r\n    }, [behaviors]);\r\n    useEffect(function () {\r\n        graphHook.current = graphInstance;\r\n        return function () {\r\n            if (graphInstance && !graphInstance.destroyed) {\r\n                graphInstance.destroy();\r\n                graphInstance = undefined;\r\n            }\r\n        };\r\n    }, []);\r\n    return {\r\n        graphHook: graphHook,\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}