{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { clone, deepMix, each, isArray, isObject, isString, upperFirst } from '@antv/util';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox, shouldRefreshEdge } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\n\nvar ItemController =\n/** @class */\nfunction () {\n  function ItemController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\r\n   * 增加 Item 实例\r\n   *\r\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\r\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\r\n   * @returns {(Item)}\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.addItem = function (type, model) {\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(vType + \"Group\") || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null; // 获取 this.get('styles') 中的值\n\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n\n    if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, val, model[cfg]);\n        } else if (isArray(val)) {\n          model[cfg] = model[cfg] || clone(defaultModel[cfg]);\n        } else {\n          model[cfg] = model[cfg] || defaultModel[cfg];\n        }\n      });\n    }\n\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n\n    if (mapper) {\n      var mappedModel_1 = mapper(model);\n\n      if (mappedModel_1[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel_1[STATE_SUFFIX];\n        delete mappedModel_1[STATE_SUFFIX];\n      } // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n\n\n      each(mappedModel_1, function (val, cfg) {\n        if (isObject(val) && !isArray(val)) {\n          model[cfg] = deepMix({}, model[cfg], val);\n        } else {\n          model[cfg] = mappedModel_1[cfg] || model[cfg];\n        }\n      });\n    }\n\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n\n      target = model.target; // eslint-disable-line prefer-destructuring\n\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \" + model.id + \" does not exist!\");\n        return;\n      }\n\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true; // graph.updateCombo(source as ICombo);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true; // graph.updateCombo(target as ICombo);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      if (!isNaN(comboBBox.x)) model.x = comboBBox.x;else if (isNaN(model.x)) model.x = Math.random() * 100;\n      if (!isNaN(comboBBox.y)) model.y = comboBBox.y;else if (isNaN(model.y)) model.y = Math.random() * 100;\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        bbox: model.collapsed ? getComboBBox([], graph) : comboBBox,\n        group: comboGroup\n      });\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      }); // collapse the combo if the collapsed is true in the model\n\n      if (model.collapsed) {\n        setTimeout(function () {\n          graph.collapseCombo(item);\n        }, 0);\n      }\n    }\n\n    if (item) {\n      graph.get(type + \"s\").push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      }); // eslint-disable-next-line consistent-return\n\n      return item;\n    }\n  };\n  /**\r\n   * 更新节点或边\r\n   *\r\n   * @param {Item} item ID 或 实例\r\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\r\n   * @returns\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var _a, _b;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    } // 更新的 item 的类型\n\n\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n    var isOnlyMove = item.isOnlyMove(cfg);\n\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result); // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n\n      var newModel = deepMix({}, model, mappedModel, cfg);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    } // emit beforeupdateitem 事件\n\n\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n\n        item.setSource(source);\n      }\n\n      if (cfg.target) {\n        var target = cfg.target;\n\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n\n        item.setTarget(target);\n      }\n\n      item.update(cfg);\n    } // item.update(cfg);\n\n\n    if (type === NODE || type === COMBO) {\n      item.update(cfg, isOnlyMove);\n      var edges_1 = item.getEdges();\n      var refreshEdge = shouldRefreshEdge(cfg);\n      if (refreshEdge && type === NODE) each(edges_1, function (edge) {\n        edge.refresh();\n      });else if (refreshEdge && type === COMBO) {\n        var shapeFactory = item.get('shapeFactory');\n        var shapeType = model.type || 'circle';\n        var comboAnimate = model.animate === undefined || cfg.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate || cfg.animate;\n\n        if (comboAnimate) {\n          setTimeout(function () {\n            if (!item || item.destroyed) return;\n            var keyShape = item.getKeyShape();\n            if (!keyShape || keyShape.destroyed) return;\n            each(edges_1, function (edge) {\n              if (edge && !edge.destroyed) edge.refresh();\n            });\n          }, 201);\n        } else {\n          each(edges_1, function (edge) {\n            edge.refresh();\n          });\n        }\n      }\n    }\n\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\r\n   * 根据 combo 的子元素更新 combo 的位置及大小\r\n   *\r\n   * @param {ICombo} combo ID 或 实例\r\n   * @returns\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.updateCombo = function (combo, children) {\n    var _this = this;\n\n    var _a, _b;\n\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    if (!combo || combo.destroyed) {\n      return;\n    }\n\n    var model = combo.getModel();\n    var comboBBox = getComboBBox(model.collapsed ? [] : children, graph);\n\n    var _c = model.collapsed ? getComboBBox(children, graph) : comboBBox,\n        comboX = _c.x,\n        comboY = _c.y;\n\n    combo.set('bbox', comboBBox);\n    combo.update({\n      x: comboX,\n      y: comboY\n    });\n    var shapeFactory = combo.get('shapeFactory');\n    var shapeType = model.type || 'circle';\n    var comboAnimate = model.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate;\n\n    if (comboAnimate) {\n      setTimeout(function () {\n        if (!combo || combo.destroyed) return;\n        var keyShape = combo.getKeyShape();\n        if (!keyShape || keyShape.destroyed) return;\n        combo.getShapeCfg(model); // 更新 combo 缓存的 size\n\n        _this.updateComboEdges(combo);\n      }, 201);\n    } else {\n      this.updateComboEdges(combo);\n    }\n  };\n\n  ItemController.prototype.updateComboEdges = function (combo) {\n    var combEdges = combo.getEdges() || [];\n\n    for (var i = 0; i < combEdges.length; i++) {\n      var edge = combEdges[i];\n\n      if (edge && !edge.destroyed) {\n        var edgeSF = edge.get('shapeFactory');\n        var edgeCfg = edge.getShapeCfg(edge.getModel());\n        var edgeGroup = edge.getContainer();\n        edgeGroup.clear();\n        var keyShape = edgeSF.draw(edgeCfg.type, edgeCfg, edgeGroup);\n        edge.set('keyShape', keyShape);\n        keyShape.set('isKeyShape', true);\n        keyShape.set('draggable', true);\n        edge.setOriginStyle();\n      }\n    }\n  };\n  /**\r\n   * 收起 combo，隐藏相关元素\r\n   */\n\n\n  ItemController.prototype.collapseCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c);\n    });\n  };\n  /**\r\n   * 展开 combo，相关元素出现\r\n   * 若子 combo 原先是收起状态，则保持它的收起状态\r\n   */\n\n\n  ItemController.prototype.expandCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node);\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c);\n      }\n    });\n  };\n  /**\r\n   * 删除指定的节点或边\r\n   *\r\n   * @param {Item} item item ID 或实例\r\n   * @returns {void}\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    }\n\n    var itemModel = clone(item.getModel());\n    graph.emit('beforeremoveitem', {\n      item: itemModel\n    });\n    var type = '';\n    if (item.getType) type = item.getType();\n    var items = graph.get(type + \"s\");\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\" + type + \"s\");\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n\n      if (comboTrees && comboId) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      } // 若移除的是节点，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1; // find the subtree rooted at the item to be removed\n\n      var found_2 = false; // the flag to terminate the forEach circulation\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      } // 若移除的是 combo，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (parentId) graph.updateCombo(parentId);\n    }\n\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel\n    });\n  };\n  /**\r\n   * 更新 item 状态\r\n   *\r\n   * @param {Item} item Item 实例\r\n   * @param {string} state 状态名称\r\n   * @param {boolean} value 是否启用状态或状态值\r\n   * @returns {void}\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n    } // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n\n\n    if (item.hasState(stateName) === value && value || // 当该状态已经存在且现在需要设置为 true 时，不需要继续。当该状态不存在，且设置为 false 时，需要继续\n    isString(value) && item.hasState(stateName)) {\n      // 当该状态 value 是字符串，且已经存在该状态，不需要继续\n      return;\n    }\n\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\r\n   * 将指定状态的优先级提升为最高优先级\r\n   * @param {Item} item 元素id或元素实例\r\n   * @param state 状态名称\r\n   */\n\n\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    } // 先取消已有的 state\n\n\n    this.setItemState(currentItem, state, false); // 再设置state，则此时该优先级为最高\n\n    this.setItemState(currentItem, state, true);\n  };\n  /**\r\n   * 清除所有指定的状态\r\n   *\r\n   * @param {Item} item Item 实例\r\n   * @param {string[]} states 状态名称集合\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\r\n   * 刷新指定的 Item\r\n   *\r\n   * @param {Item} item Item ID 或 实例\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemrefresh', {\n      item: item\n    }); // 调用 Item 的 refresh 方法，实现刷新功能\n\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\r\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\r\n   *\r\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\r\n   * @param {ComboConfig[]} comboModels combos 数据\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\r\n   * 改变Item的显示状态\r\n   *\r\n   * @param {Item} item Item ID 或 实例\r\n   * @param {boolean} visible 是否显示\r\n   * @memberof ItemController\r\n   */\n\n\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n\n      if (children_1 && (!visible || visible && !item.getModel().collapsed)) {\n        children_1.forEach(function (child) {\n          var childItem = graph.findById(child.id);\n\n          _this.changeItemVisibility(childItem, visible);\n        });\n      }\n\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n\n  return ItemController;\n}();\n\nexport default ItemController;","map":{"version":3,"sources":["D:/Code/sqlindex2/sql/frontend/node_modules/@antv/g6-core/es/graph/controller/item.js"],"names":["__assign","clone","deepMix","each","isArray","isObject","isString","upperFirst","Edge","Node","Combo","traverseTreeUp","traverseTree","getComboBBox","shouldRefreshEdge","NODE","EDGE","VEDGE","COMBO","CFG_PREFIX","MAPPER_SUFFIX","STATE_SUFFIX","ItemController","graph","destroyed","prototype","addItem","type","model","vType","parent","get","upperType","item","styles","defaultModel","val","cfg","mapper","mappedModel_1","emit","source","target","findById","console","warn","id","getType","isComboEdge","linkCenter","group","addGroup","children","comboBBox","isNaN","x","Math","random","y","comboGroup","setZIndex","depth","bbox","collapsed","comboModel_1","getModel","forEach","child","childItem","addChild","setTimeout","collapseCombo","push","updateItem","_a","_b","isOnlyMove","result","mappedModel","newModel","set","key","setSource","setTarget","update","edges_1","getEdges","refreshEdge","edge","refresh","shapeFactory","shapeType","comboAnimate","animate","undefined","options","keyShape","getKeyShape","updateCombo","combo","_this","_c","comboX","comboY","getShapeCfg","updateComboEdges","combEdges","i","length","edgeSF","edgeCfg","edgeGroup","getContainer","clear","draw","setOriginStyle","getChildren","nodes","node","hideItem","combos","c","expandCombo","showItem","show","removeItem","itemModel","items","index","indexOf","splice","vitems","vindex","itemId","itemMap","comboTrees","comboId","brothers_1","found_1","ctree","bidx","edges","parentId","comboInTree_1","found_2","removed","destroy","setItemState","state","value","stateName","hasState","enabled","setState","autoPaint","priorityState","currentItem","clearItemStates","states","clearStates","refreshItem","addCombos","comboModels","comboModel","sort","changeItemVisibility","visible","changeVisibility","isVisible","id_1","children_1","found_3"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\r\nimport { clone, deepMix, each, isArray, isObject, isString, upperFirst } from '@antv/util';\r\nimport Edge from '../../item/edge';\r\nimport Node from '../../item/node';\r\nimport Combo from '../../item/combo';\r\nimport { traverseTreeUp, traverseTree, getComboBBox, shouldRefreshEdge } from '../../util/graphic';\r\nvar NODE = 'node';\r\nvar EDGE = 'edge';\r\nvar VEDGE = 'vedge';\r\nvar COMBO = 'combo';\r\nvar CFG_PREFIX = 'default';\r\nvar MAPPER_SUFFIX = 'Mapper';\r\nvar STATE_SUFFIX = 'stateStyles';\r\n\r\nvar ItemController =\r\n/** @class */\r\nfunction () {\r\n  function ItemController(graph) {\r\n    this.graph = graph;\r\n    this.destroyed = false;\r\n  }\r\n  /**\r\n   * 增加 Item 实例\r\n   *\r\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\r\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\r\n   * @returns {(Item)}\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.addItem = function (type, model) {\r\n    var graph = this.graph;\r\n    var vType = type === VEDGE ? EDGE : type;\r\n    var parent = graph.get(vType + \"Group\") || graph.get('group');\r\n    var upperType = upperFirst(vType);\r\n    var item = null; // 获取 this.get('styles') 中的值\r\n\r\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\r\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\r\n\r\n    if (model[STATE_SUFFIX]) {\r\n      // 设置 this.get('styles') 中的值\r\n      styles = model[STATE_SUFFIX];\r\n    }\r\n\r\n    if (defaultModel) {\r\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\r\n      each(defaultModel, function (val, cfg) {\r\n        if (isObject(val) && !isArray(val)) {\r\n          model[cfg] = deepMix({}, val, model[cfg]);\r\n        } else if (isArray(val)) {\r\n          model[cfg] = model[cfg] || clone(defaultModel[cfg]);\r\n        } else {\r\n          model[cfg] = model[cfg] || defaultModel[cfg];\r\n        }\r\n      });\r\n    }\r\n\r\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\r\n\r\n    if (mapper) {\r\n      var mappedModel_1 = mapper(model);\r\n\r\n      if (mappedModel_1[STATE_SUFFIX]) {\r\n        // 设置 this.get('styles') 中的值\r\n        styles = mappedModel_1[STATE_SUFFIX];\r\n        delete mappedModel_1[STATE_SUFFIX];\r\n      } // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\r\n\r\n\r\n      each(mappedModel_1, function (val, cfg) {\r\n        if (isObject(val) && !isArray(val)) {\r\n          model[cfg] = deepMix({}, model[cfg], val);\r\n        } else {\r\n          model[cfg] = mappedModel_1[cfg] || model[cfg];\r\n        }\r\n      });\r\n    }\r\n\r\n    graph.emit('beforeadditem', {\r\n      type: type,\r\n      model: model\r\n    });\r\n\r\n    if (type === EDGE || type === VEDGE) {\r\n      var source = void 0;\r\n      var target = void 0;\r\n      source = model.source; // eslint-disable-line prefer-destructuring\r\n\r\n      target = model.target; // eslint-disable-line prefer-destructuring\r\n\r\n      if (source && isString(source)) {\r\n        source = graph.findById(source);\r\n      }\r\n\r\n      if (target && isString(target)) {\r\n        target = graph.findById(target);\r\n      }\r\n\r\n      if (!source || !target) {\r\n        console.warn(\"The source or target node of edge \" + model.id + \" does not exist!\");\r\n        return;\r\n      }\r\n\r\n      if (source.getType && source.getType() === 'combo') {\r\n        model.isComboEdge = true; // graph.updateCombo(source as ICombo);\r\n      }\r\n\r\n      if (target.getType && target.getType() === 'combo') {\r\n        model.isComboEdge = true; // graph.updateCombo(target as ICombo);\r\n      }\r\n\r\n      item = new Edge({\r\n        model: model,\r\n        source: source,\r\n        target: target,\r\n        styles: styles,\r\n        linkCenter: graph.get('linkCenter'),\r\n        group: parent.addGroup()\r\n      });\r\n    } else if (type === NODE) {\r\n      item = new Node({\r\n        model: model,\r\n        styles: styles,\r\n        group: parent.addGroup()\r\n      });\r\n    } else if (type === COMBO) {\r\n      var children = model.children;\r\n      var comboBBox = getComboBBox(children, graph);\r\n      if (!isNaN(comboBBox.x)) model.x = comboBBox.x;else if (isNaN(model.x)) model.x = Math.random() * 100;\r\n      if (!isNaN(comboBBox.y)) model.y = comboBBox.y;else if (isNaN(model.y)) model.y = Math.random() * 100;\r\n      var comboGroup = parent.addGroup();\r\n      comboGroup.setZIndex(model.depth);\r\n      item = new Combo({\r\n        model: model,\r\n        styles: styles,\r\n        bbox: model.collapsed ? getComboBBox([], graph) : comboBBox,\r\n        group: comboGroup\r\n      });\r\n      var comboModel_1 = item.getModel();\r\n      (children || []).forEach(function (child) {\r\n        var childItem = graph.findById(child.id);\r\n        item.addChild(childItem);\r\n        child.depth = comboModel_1.depth + 2;\r\n      }); // collapse the combo if the collapsed is true in the model\r\n\r\n      if (model.collapsed) {\r\n        setTimeout(function () {\r\n          graph.collapseCombo(item);\r\n        }, 0);\r\n      }\r\n    }\r\n\r\n    if (item) {\r\n      graph.get(type + \"s\").push(item);\r\n      graph.get('itemMap')[item.get('id')] = item;\r\n      graph.emit('afteradditem', {\r\n        item: item,\r\n        model: model\r\n      }); // eslint-disable-next-line consistent-return\r\n\r\n      return item;\r\n    }\r\n  };\r\n  /**\r\n   * 更新节点或边\r\n   *\r\n   * @param {Item} item ID 或 实例\r\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\r\n   * @returns\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.updateItem = function (item, cfg) {\r\n    var _a, _b;\r\n\r\n    var graph = this.graph;\r\n\r\n    if (isString(item)) {\r\n      item = graph.findById(item);\r\n    }\r\n\r\n    if (!item || item.destroyed) {\r\n      return;\r\n    } // 更新的 item 的类型\r\n\r\n\r\n    var type = '';\r\n    if (item.getType) type = item.getType();\r\n    var mapper = graph.get(type + MAPPER_SUFFIX);\r\n    var model = item.getModel();\r\n    var isOnlyMove = item.isOnlyMove(cfg);\r\n\r\n    if (mapper) {\r\n      var result = deepMix({}, model, cfg);\r\n      var mappedModel = mapper(result); // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\r\n\r\n      var newModel = deepMix({}, model, mappedModel, cfg);\r\n\r\n      if (mappedModel[STATE_SUFFIX]) {\r\n        item.set('styles', newModel[STATE_SUFFIX]);\r\n        delete newModel[STATE_SUFFIX];\r\n      }\r\n\r\n      each(newModel, function (val, key) {\r\n        cfg[key] = val;\r\n      });\r\n    } else {\r\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\r\n      each(cfg, function (val, key) {\r\n        if (model[key]) {\r\n          if (isObject(val) && !isArray(val)) {\r\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\r\n          }\r\n        }\r\n      });\r\n    } // emit beforeupdateitem 事件\r\n\r\n\r\n    graph.emit('beforeupdateitem', {\r\n      item: item,\r\n      cfg: cfg\r\n    });\r\n\r\n    if (type === EDGE) {\r\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\r\n      if (cfg.source) {\r\n        var source = cfg.source;\r\n\r\n        if (isString(source)) {\r\n          source = graph.findById(source);\r\n        }\r\n\r\n        item.setSource(source);\r\n      }\r\n\r\n      if (cfg.target) {\r\n        var target = cfg.target;\r\n\r\n        if (isString(target)) {\r\n          target = graph.findById(target);\r\n        }\r\n\r\n        item.setTarget(target);\r\n      }\r\n\r\n      item.update(cfg);\r\n    } // item.update(cfg);\r\n\r\n\r\n    if (type === NODE || type === COMBO) {\r\n      item.update(cfg, isOnlyMove);\r\n      var edges_1 = item.getEdges();\r\n      var refreshEdge = shouldRefreshEdge(cfg);\r\n      if (refreshEdge && type === NODE) each(edges_1, function (edge) {\r\n        edge.refresh();\r\n      });else if (refreshEdge && type === COMBO) {\r\n        var shapeFactory = item.get('shapeFactory');\r\n        var shapeType = model.type || 'circle';\r\n        var comboAnimate = model.animate === undefined || cfg.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate || cfg.animate;\r\n\r\n        if (comboAnimate) {\r\n          setTimeout(function () {\r\n            if (!item || item.destroyed) return;\r\n            var keyShape = item.getKeyShape();\r\n            if (!keyShape || keyShape.destroyed) return;\r\n            each(edges_1, function (edge) {\r\n              if (edge && !edge.destroyed) edge.refresh();\r\n            });\r\n          }, 201);\r\n        } else {\r\n          each(edges_1, function (edge) {\r\n            edge.refresh();\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    graph.emit('afterupdateitem', {\r\n      item: item,\r\n      cfg: cfg\r\n    });\r\n  };\r\n  /**\r\n   * 根据 combo 的子元素更新 combo 的位置及大小\r\n   *\r\n   * @param {ICombo} combo ID 或 实例\r\n   * @returns\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.updateCombo = function (combo, children) {\r\n    var _this = this;\r\n\r\n    var _a, _b;\r\n\r\n    var graph = this.graph;\r\n\r\n    if (isString(combo)) {\r\n      combo = graph.findById(combo);\r\n    }\r\n\r\n    if (!combo || combo.destroyed) {\r\n      return;\r\n    }\r\n\r\n    var model = combo.getModel();\r\n    var comboBBox = getComboBBox(model.collapsed ? [] : children, graph);\r\n\r\n    var _c = model.collapsed ? getComboBBox(children, graph) : comboBBox,\r\n        comboX = _c.x,\r\n        comboY = _c.y;\r\n\r\n    combo.set('bbox', comboBBox);\r\n    combo.update({\r\n      x: comboX,\r\n      y: comboY\r\n    });\r\n    var shapeFactory = combo.get('shapeFactory');\r\n    var shapeType = model.type || 'circle';\r\n    var comboAnimate = model.animate === undefined ? (_b = (_a = shapeFactory[shapeType]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.animate : model.animate;\r\n\r\n    if (comboAnimate) {\r\n      setTimeout(function () {\r\n        if (!combo || combo.destroyed) return;\r\n        var keyShape = combo.getKeyShape();\r\n        if (!keyShape || keyShape.destroyed) return;\r\n        combo.getShapeCfg(model); // 更新 combo 缓存的 size\r\n\r\n        _this.updateComboEdges(combo);\r\n      }, 201);\r\n    } else {\r\n      this.updateComboEdges(combo);\r\n    }\r\n  };\r\n\r\n  ItemController.prototype.updateComboEdges = function (combo) {\r\n    var combEdges = combo.getEdges() || [];\r\n\r\n    for (var i = 0; i < combEdges.length; i++) {\r\n      var edge = combEdges[i];\r\n\r\n      if (edge && !edge.destroyed) {\r\n        var edgeSF = edge.get('shapeFactory');\r\n        var edgeCfg = edge.getShapeCfg(edge.getModel());\r\n        var edgeGroup = edge.getContainer();\r\n        edgeGroup.clear();\r\n        var keyShape = edgeSF.draw(edgeCfg.type, edgeCfg, edgeGroup);\r\n        edge.set('keyShape', keyShape);\r\n        keyShape.set('isKeyShape', true);\r\n        keyShape.set('draggable', true);\r\n        edge.setOriginStyle();\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * 收起 combo，隐藏相关元素\r\n   */\r\n\r\n\r\n  ItemController.prototype.collapseCombo = function (combo) {\r\n    var graph = this.graph;\r\n\r\n    if (isString(combo)) {\r\n      combo = graph.findById(combo);\r\n    }\r\n\r\n    var children = combo.getChildren();\r\n    children.nodes.forEach(function (node) {\r\n      graph.hideItem(node);\r\n    });\r\n    children.combos.forEach(function (c) {\r\n      graph.hideItem(c);\r\n    });\r\n  };\r\n  /**\r\n   * 展开 combo，相关元素出现\r\n   * 若子 combo 原先是收起状态，则保持它的收起状态\r\n   */\r\n\r\n\r\n  ItemController.prototype.expandCombo = function (combo) {\r\n    var graph = this.graph;\r\n\r\n    if (isString(combo)) {\r\n      combo = graph.findById(combo);\r\n    }\r\n\r\n    var children = combo.getChildren();\r\n    children.nodes.forEach(function (node) {\r\n      graph.showItem(node);\r\n    });\r\n    children.combos.forEach(function (c) {\r\n      if (c.getModel().collapsed) {\r\n        c.show();\r\n      } else {\r\n        graph.showItem(c);\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * 删除指定的节点或边\r\n   *\r\n   * @param {Item} item item ID 或实例\r\n   * @returns {void}\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.removeItem = function (item) {\r\n    var _this = this;\r\n\r\n    var graph = this.graph;\r\n\r\n    if (isString(item)) {\r\n      item = graph.findById(item);\r\n    }\r\n\r\n    if (!item || item.destroyed) {\r\n      return;\r\n    }\r\n\r\n    var itemModel = clone(item.getModel());\r\n    graph.emit('beforeremoveitem', {\r\n      item: itemModel\r\n    });\r\n    var type = '';\r\n    if (item.getType) type = item.getType();\r\n    var items = graph.get(type + \"s\");\r\n    var index = items.indexOf(item);\r\n    if (index > -1) items.splice(index, 1);\r\n\r\n    if (type === EDGE) {\r\n      var vitems = graph.get(\"v\" + type + \"s\");\r\n      var vindex = vitems.indexOf(item);\r\n      if (vindex > -1) vitems.splice(vindex, 1);\r\n    }\r\n\r\n    var itemId = item.get('id');\r\n    var itemMap = graph.get('itemMap');\r\n    delete itemMap[itemId];\r\n    var comboTrees = graph.get('comboTrees');\r\n    var id = item.get('id');\r\n\r\n    if (type === NODE) {\r\n      var comboId = item.getModel().comboId;\r\n\r\n      if (comboTrees && comboId) {\r\n        var brothers_1 = comboTrees;\r\n        var found_1 = false; // the flag to terminate the forEach circulation\r\n        // remove the node from the children array of its parent fromt he tree\r\n\r\n        comboTrees.forEach(function (ctree) {\r\n          if (found_1) return;\r\n          traverseTree(ctree, function (combo) {\r\n            if (combo.id === id && brothers_1) {\r\n              var bidx = brothers_1.indexOf(combo);\r\n              brothers_1.splice(bidx, 1);\r\n              found_1 = true;\r\n              return false; // terminate the traverse\r\n            }\r\n\r\n            brothers_1 = combo.children;\r\n            return true;\r\n          });\r\n        });\r\n      } // 若移除的是节点，需要将与之相连的边一同删除\r\n\r\n\r\n      var edges = item.getEdges();\r\n\r\n      for (var i = edges.length - 1; i >= 0; i--) {\r\n        graph.removeItem(edges[i], false);\r\n      }\r\n\r\n      if (comboId) graph.updateCombo(comboId);\r\n    } else if (type === COMBO) {\r\n      var parentId = item.getModel().parentId;\r\n      var comboInTree_1; // find the subtree rooted at the item to be removed\r\n\r\n      var found_2 = false; // the flag to terminate the forEach circulation\r\n\r\n      (comboTrees || []).forEach(function (ctree) {\r\n        if (found_2) return;\r\n        traverseTree(ctree, function (combo) {\r\n          if (combo.id === id) {\r\n            comboInTree_1 = combo;\r\n            found_2 = true;\r\n            return false; // terminate the traverse\r\n          }\r\n\r\n          return true;\r\n        });\r\n      });\r\n      comboInTree_1.removed = true;\r\n\r\n      if (comboInTree_1 && comboInTree_1.children) {\r\n        comboInTree_1.children.forEach(function (child) {\r\n          _this.removeItem(child.id);\r\n        });\r\n      } // 若移除的是 combo，需要将与之相连的边一同删除\r\n\r\n\r\n      var edges = item.getEdges();\r\n\r\n      for (var i = edges.length; i >= 0; i--) {\r\n        graph.removeItem(edges[i], false);\r\n      }\r\n\r\n      if (parentId) graph.updateCombo(parentId);\r\n    }\r\n\r\n    item.destroy();\r\n    graph.emit('afterremoveitem', {\r\n      item: itemModel\r\n    });\r\n  };\r\n  /**\r\n   * 更新 item 状态\r\n   *\r\n   * @param {Item} item Item 实例\r\n   * @param {string} state 状态名称\r\n   * @param {boolean} value 是否启用状态或状态值\r\n   * @returns {void}\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.setItemState = function (item, state, value) {\r\n    var graph = this.graph;\r\n    var stateName = state;\r\n\r\n    if (isString(value)) {\r\n      stateName = state + \":\" + value;\r\n    } // 已经存在要设置的 state，或不存在 state 的样式为 undefined\r\n\r\n\r\n    if (item.hasState(stateName) === value && value || // 当该状态已经存在且现在需要设置为 true 时，不需要继续。当该状态不存在，且设置为 false 时，需要继续\r\n    isString(value) && item.hasState(stateName)) {\r\n      // 当该状态 value 是字符串，且已经存在该状态，不需要继续\r\n      return;\r\n    }\r\n\r\n    graph.emit('beforeitemstatechange', {\r\n      item: item,\r\n      state: stateName,\r\n      enabled: value\r\n    });\r\n    item.setState(state, value);\r\n    graph.autoPaint();\r\n    graph.emit('afteritemstatechange', {\r\n      item: item,\r\n      state: stateName,\r\n      enabled: value\r\n    });\r\n  };\r\n  /**\r\n   * 将指定状态的优先级提升为最高优先级\r\n   * @param {Item} item 元素id或元素实例\r\n   * @param state 状态名称\r\n   */\r\n\r\n\r\n  ItemController.prototype.priorityState = function (item, state) {\r\n    var graph = this.graph;\r\n    var currentItem = item;\r\n\r\n    if (isString(item)) {\r\n      currentItem = graph.findById(item);\r\n    } // 先取消已有的 state\r\n\r\n\r\n    this.setItemState(currentItem, state, false); // 再设置state，则此时该优先级为最高\r\n\r\n    this.setItemState(currentItem, state, true);\r\n  };\r\n  /**\r\n   * 清除所有指定的状态\r\n   *\r\n   * @param {Item} item Item 实例\r\n   * @param {string[]} states 状态名称集合\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.clearItemStates = function (item, states) {\r\n    var graph = this.graph;\r\n\r\n    if (isString(item)) {\r\n      item = graph.findById(item);\r\n    }\r\n\r\n    graph.emit('beforeitemstatesclear', {\r\n      item: item,\r\n      states: states\r\n    });\r\n    item.clearStates(states);\r\n    graph.emit('afteritemstatesclear', {\r\n      item: item,\r\n      states: states\r\n    });\r\n  };\r\n  /**\r\n   * 刷新指定的 Item\r\n   *\r\n   * @param {Item} item Item ID 或 实例\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.refreshItem = function (item) {\r\n    var graph = this.graph;\r\n\r\n    if (isString(item)) {\r\n      item = graph.findById(item);\r\n    }\r\n\r\n    graph.emit('beforeitemrefresh', {\r\n      item: item\r\n    }); // 调用 Item 的 refresh 方法，实现刷新功能\r\n\r\n    item.refresh();\r\n    graph.emit('afteritemrefresh', {\r\n      item: item\r\n    });\r\n  };\r\n  /**\r\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\r\n   *\r\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\r\n   * @param {ComboConfig[]} comboModels combos 数据\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\r\n    var _this = this;\r\n\r\n    var graph = this.graph;\r\n    (comboTrees || []).forEach(function (ctree) {\r\n      traverseTreeUp(ctree, function (child) {\r\n        var comboModel;\r\n        comboModels.forEach(function (model) {\r\n          if (model.id === child.id) {\r\n            model.children = child.children;\r\n            model.depth = child.depth;\r\n            comboModel = model;\r\n          }\r\n        });\r\n\r\n        if (comboModel) {\r\n          _this.addItem('combo', comboModel);\r\n        }\r\n\r\n        return true;\r\n      });\r\n    });\r\n    var comboGroup = graph.get('comboGroup');\r\n    if (comboGroup) comboGroup.sort();\r\n  };\r\n  /**\r\n   * 改变Item的显示状态\r\n   *\r\n   * @param {Item} item Item ID 或 实例\r\n   * @param {boolean} visible 是否显示\r\n   * @memberof ItemController\r\n   */\r\n\r\n\r\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\r\n    var _this = this;\r\n\r\n    var graph = this.graph;\r\n\r\n    if (isString(item)) {\r\n      item = graph.findById(item);\r\n    }\r\n\r\n    if (!item) {\r\n      console.warn('The item to be shown or hidden does not exist!');\r\n      return;\r\n    }\r\n\r\n    graph.emit('beforeitemvisibilitychange', {\r\n      item: item,\r\n      visible: visible\r\n    });\r\n    item.changeVisibility(visible);\r\n\r\n    if (item.getType && item.getType() === NODE) {\r\n      var edges = item.getEdges();\r\n      each(edges, function (edge) {\r\n        // 若隐藏节点，则将与之关联的边也隐藏\r\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\r\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\r\n          return;\r\n        }\r\n\r\n        _this.changeItemVisibility(edge, visible);\r\n      });\r\n    } else if (item.getType && item.getType() === COMBO) {\r\n      var comboTrees = graph.get('comboTrees');\r\n      var id_1 = item.get('id');\r\n      var children_1 = [];\r\n      var found_3 = false; // flag the terminate the forEach\r\n\r\n      (comboTrees || []).forEach(function (ctree) {\r\n        if (found_3) return;\r\n        if (!ctree.children || ctree.children.length === 0) return;\r\n        traverseTree(ctree, function (combo) {\r\n          if (combo.id === id_1) {\r\n            children_1 = combo.children;\r\n            found_3 = true;\r\n            return false; // terminate the traverse\r\n          }\r\n\r\n          return true;\r\n        });\r\n      });\r\n\r\n      if (children_1 && (!visible || visible && !item.getModel().collapsed)) {\r\n        children_1.forEach(function (child) {\r\n          var childItem = graph.findById(child.id);\r\n\r\n          _this.changeItemVisibility(childItem, visible);\r\n        });\r\n      }\r\n\r\n      var edges = item.getEdges();\r\n      each(edges, function (edge) {\r\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\r\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\r\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\r\n          return;\r\n        }\r\n\r\n        _this.changeItemVisibility(edge, visible);\r\n      });\r\n    }\r\n\r\n    graph.emit('afteritemvisibilitychange', {\r\n      item: item,\r\n      visible: visible\r\n    });\r\n    return item;\r\n  };\r\n\r\n  ItemController.prototype.destroy = function () {\r\n    this.graph = null;\r\n    this.destroyed = true;\r\n  };\r\n\r\n  return ItemController;\r\n}();\r\n\r\nexport default ItemController;"]},"metadata":{},"sourceType":"module"}