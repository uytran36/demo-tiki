{"ast":null,"code":"var _ = require(\"./lodash\");\n\nvar util = require(\"./util\");\n\nmodule.exports = addBorderSegments;\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, \"minRank\")) {\n      node.borderLeft = [];\n      node.borderRight = [];\n\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = {\n    width: 0,\n    height: 0,\n    rank: rank,\n    borderType: prop\n  };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n\n  if (prev) {\n    g.setEdge(prev, curr, {\n      weight: 1\n    });\n  }\n}","map":{"version":3,"sources":["D:/Code/sqlindex2/sql/frontend/node_modules/dagre/lib/add-border-segments.js"],"names":["_","require","util","module","exports","addBorderSegments","g","dfs","v","children","node","length","forEach","has","borderLeft","borderRight","rank","minRank","maxRank","addBorderNode","prop","prefix","sg","sgNode","label","width","height","borderType","prev","curr","addDummyNode","setParent","setEdge","weight"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,UAAD,CAAf;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,iBAAjB;;AAEA,SAASA,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B,WAASC,GAAT,CAAaC,CAAb,EAAgB;AACd,QAAIC,QAAQ,GAAGH,CAAC,CAACG,QAAF,CAAWD,CAAX,CAAf;AACA,QAAIE,IAAI,GAAGJ,CAAC,CAACI,IAAF,CAAOF,CAAP,CAAX;;AACA,QAAIC,QAAQ,CAACE,MAAb,EAAqB;AACnBX,MAAAA,CAAC,CAACY,OAAF,CAAUH,QAAV,EAAoBF,GAApB;AACD;;AAED,QAAIP,CAAC,CAACa,GAAF,CAAMH,IAAN,EAAY,SAAZ,CAAJ,EAA4B;AAC1BA,MAAAA,IAAI,CAACI,UAAL,GAAkB,EAAlB;AACAJ,MAAAA,IAAI,CAACK,WAAL,GAAmB,EAAnB;;AACA,WAAK,IAAIC,IAAI,GAAGN,IAAI,CAACO,OAAhB,EAAyBC,OAAO,GAAGR,IAAI,CAACQ,OAAL,GAAe,CAAvD,EACEF,IAAI,GAAGE,OADT,EAEE,EAAEF,IAFJ,EAEU;AACRG,QAAAA,aAAa,CAACb,CAAD,EAAI,YAAJ,EAAkB,KAAlB,EAAyBE,CAAzB,EAA4BE,IAA5B,EAAkCM,IAAlC,CAAb;AACAG,QAAAA,aAAa,CAACb,CAAD,EAAI,aAAJ,EAAmB,KAAnB,EAA0BE,CAA1B,EAA6BE,IAA7B,EAAmCM,IAAnC,CAAb;AACD;AACF;AACF;;AAEDhB,EAAAA,CAAC,CAACY,OAAF,CAAUN,CAAC,CAACG,QAAF,EAAV,EAAwBF,GAAxB;AACD;;AAED,SAASY,aAAT,CAAuBb,CAAvB,EAA0Bc,IAA1B,EAAgCC,MAAhC,EAAwCC,EAAxC,EAA4CC,MAA5C,EAAoDP,IAApD,EAA0D;AACxD,MAAIQ,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE,CAApB;AAAuBV,IAAAA,IAAI,EAAEA,IAA7B;AAAmCW,IAAAA,UAAU,EAAEP;AAA/C,GAAZ;AACA,MAAIQ,IAAI,GAAGL,MAAM,CAACH,IAAD,CAAN,CAAaJ,IAAI,GAAG,CAApB,CAAX;AACA,MAAIa,IAAI,GAAG3B,IAAI,CAAC4B,YAAL,CAAkBxB,CAAlB,EAAqB,QAArB,EAA+BkB,KAA/B,EAAsCH,MAAtC,CAAX;AACAE,EAAAA,MAAM,CAACH,IAAD,CAAN,CAAaJ,IAAb,IAAqBa,IAArB;AACAvB,EAAAA,CAAC,CAACyB,SAAF,CAAYF,IAAZ,EAAkBP,EAAlB;;AACA,MAAIM,IAAJ,EAAU;AACRtB,IAAAA,CAAC,CAAC0B,OAAF,CAAUJ,IAAV,EAAgBC,IAAhB,EAAsB;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAAtB;AACD;AACF","sourcesContent":["var _ = require(\"./lodash\");\r\nvar util = require(\"./util\");\r\n\r\nmodule.exports = addBorderSegments;\r\n\r\nfunction addBorderSegments(g) {\r\n  function dfs(v) {\r\n    var children = g.children(v);\r\n    var node = g.node(v);\r\n    if (children.length) {\r\n      _.forEach(children, dfs);\r\n    }\r\n\r\n    if (_.has(node, \"minRank\")) {\r\n      node.borderLeft = [];\r\n      node.borderRight = [];\r\n      for (var rank = node.minRank, maxRank = node.maxRank + 1;\r\n        rank < maxRank;\r\n        ++rank) {\r\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\r\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\r\n      }\r\n    }\r\n  }\r\n\r\n  _.forEach(g.children(), dfs);\r\n}\r\n\r\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\r\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\r\n  var prev = sgNode[prop][rank - 1];\r\n  var curr = util.addDummyNode(g, \"border\", label, prefix);\r\n  sgNode[prop][rank] = curr;\r\n  g.setParent(curr, sg);\r\n  if (prev) {\r\n    g.setEdge(prev, curr, { weight: 1 });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}