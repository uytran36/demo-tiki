{"ast":null,"code":"/* eslint-disable no-restricted-syntax */\n// 类型检测\nexport var isType = function (value, type) {\n  var toString = {}.toString;\n  return toString.call(value) === \"[object \" + type + \"]\";\n};\nexport var clone = function (source) {\n  if (!source) {\n    return source;\n  }\n\n  var target = {}; // eslint-disable-next-line guard-for-in\n\n  for (var k in source) {\n    target[k] = source[k];\n  }\n\n  return target;\n};\nexport var getType = function (n) {\n  return Object.prototype.toString.call(n).slice(8, -1);\n};\n/**\r\n * 深克隆\r\n * @param source 要深克隆的目标对象\r\n */\n\nexport var deepClone = function (source) {\n  if (!source) {\n    return source;\n  } // @ts-ignore\n\n\n  var target = new source.constructor();\n\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = getType(source[key]) === 'Object' || getType(source[key]) === 'Array' ? deepClone(source[key]) : source[key];\n    }\n  }\n\n  return target;\n};\n/**\r\n * 存在时返回路径值，不存在时返回 undefined\r\n */\n\nexport var hasPath = function (source, path) {\n  var current = source;\n\n  for (var i = 0; i < path.length; i += 1) {\n    if (current === null || current === void 0 ? void 0 : current[path[i]]) {\n      current = current[path[i]];\n    } else {\n      current = undefined;\n      break;\n    }\n  }\n\n  return current;\n};\n/**\r\n * 内部指定 params ，不考虑复杂情况\r\n */\n\nexport var setPath = function (source, path, value) {\n  if (!source) {\n    return source;\n  }\n\n  var o = source;\n  path.forEach(function (key, idx) {\n    // 不是最后一个\n    if (idx < path.length - 1) {\n      o = o[key];\n    } else {\n      o[key] = value;\n    }\n  });\n  return source;\n};","map":{"version":3,"sources":["D:/Code/sqlindex2/sql/frontend/node_modules/@ant-design/charts/es/util/utils.js"],"names":["isType","value","type","toString","call","clone","source","target","k","getType","n","Object","prototype","slice","deepClone","constructor","key","hasOwnProperty","hasPath","path","current","i","length","undefined","setPath","o","forEach","idx"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-syntax */\r\n// 类型检测\r\nexport var isType = function (value, type) {\r\n    var toString = {}.toString;\r\n    return toString.call(value) === \"[object \" + type + \"]\";\r\n};\r\nexport var clone = function (source) {\r\n    if (!source) {\r\n        return source;\r\n    }\r\n    var target = {};\r\n    // eslint-disable-next-line guard-for-in\r\n    for (var k in source) {\r\n        target[k] = source[k];\r\n    }\r\n    return target;\r\n};\r\nexport var getType = function (n) {\r\n    return Object.prototype.toString.call(n).slice(8, -1);\r\n};\r\n/**\r\n * 深克隆\r\n * @param source 要深克隆的目标对象\r\n */\r\nexport var deepClone = function (source) {\r\n    if (!source) {\r\n        return source;\r\n    }\r\n    // @ts-ignore\r\n    var target = new source.constructor();\r\n    for (var key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n            target[key] =\r\n                getType(source[key]) === 'Object' || getType(source[key]) === 'Array'\r\n                    ? deepClone(source[key])\r\n                    : source[key];\r\n        }\r\n    }\r\n    return target;\r\n};\r\n/**\r\n * 存在时返回路径值，不存在时返回 undefined\r\n */\r\nexport var hasPath = function (source, path) {\r\n    var current = source;\r\n    for (var i = 0; i < path.length; i += 1) {\r\n        if (current === null || current === void 0 ? void 0 : current[path[i]]) {\r\n            current = current[path[i]];\r\n        }\r\n        else {\r\n            current = undefined;\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n};\r\n/**\r\n * 内部指定 params ，不考虑复杂情况\r\n */\r\nexport var setPath = function (source, path, value) {\r\n    if (!source) {\r\n        return source;\r\n    }\r\n    var o = source;\r\n    path.forEach(function (key, idx) {\r\n        // 不是最后一个\r\n        if (idx < path.length - 1) {\r\n            o = o[key];\r\n        }\r\n        else {\r\n            o[key] = value;\r\n        }\r\n    });\r\n    return source;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}